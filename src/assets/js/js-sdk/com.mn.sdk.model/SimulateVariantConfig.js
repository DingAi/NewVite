/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The SimulateVariantConfig model module.
 * @module com.mn.sdk.model/SimulateVariantConfig
 * @version 1.0
 */
export class SimulateVariantConfig {
  /**
   * Constructs a new <code>SimulateVariantConfig</code>.
   * 模拟硬件的变量配置
   * @alias module:com.mn.sdk.model/SimulateVariantConfig
   * @class
   * @param createdTime {Date} 创建时间
   * @param max {Number} 范围最大值
   * @param min {Number} 范围最小值
   * @param remark {String} 描述
   * @param ruleId {String} 规则ID
   * @param simulateType {String} 模拟数据变化的类型:fixed,random,increase,decrease
   * @param stepMax {Number} 自增或自减时的步进最大值
   * @param stepMin {Number} 自增或自减时的步进最小值
   * @param triggerInterval {Number} 触发间隔，以秒为单位
   * @param updatedTime {Date} 修改时间
   * @param variantId {Number} 变量id
   */
  constructor(createdTime, max, min, remark, ruleId, simulateType, stepMax, stepMin, triggerInterval, updatedTime, variantId) {
    this.createdTime = createdTime;
    this.max = max;
    this.min = min;
    this.remark = remark;
    this.ruleId = ruleId;
    this.simulateType = simulateType;
    this.stepMax = stepMax;
    this.stepMin = stepMin;
    this.triggerInterval = triggerInterval;
    this.updatedTime = updatedTime;
    this.variantId = variantId;
  }


    static constructFromList(list) {
        let array = [new SimulateVariantConfig()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(SimulateVariantConfig.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>SimulateVariantConfig</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/SimulateVariantConfig} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/SimulateVariantConfig} The populated <code>SimulateVariantConfig</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SimulateVariantConfig();
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'Date');
      if (Reflect.has(data, 'max'))
        obj.max = ApiClient.convertToType(data['max'], 'Number');
      if (Reflect.has(data, 'min'))
        obj.min = ApiClient.convertToType(data['min'], 'Number');
      if (Reflect.has(data, 'remark'))
        obj.remark = ApiClient.convertToType(data['remark'], 'String');
      if (Reflect.has(data, 'ruleId'))
        obj.ruleId = ApiClient.convertToType(data['ruleId'], 'String');
      if (Reflect.has(data, 'simulateType'))
        obj.simulateType = ApiClient.convertToType(data['simulateType'], 'String');
      if (Reflect.has(data, 'stepMax'))
        obj.stepMax = ApiClient.convertToType(data['stepMax'], 'Number');
      if (Reflect.has(data, 'stepMin'))
        obj.stepMin = ApiClient.convertToType(data['stepMin'], 'Number');
      if (Reflect.has(data, 'triggerInterval'))
        obj.triggerInterval = ApiClient.convertToType(data['triggerInterval'], 'Number');
      if (Reflect.has(data, 'updatedTime'))
        obj.updatedTime = ApiClient.convertToType(data['updatedTime'], 'Date');
      if (Reflect.has(data, 'variantId'))
        obj.variantId = ApiClient.convertToType(data['variantId'], 'Number');
    }
    return obj;
  }
}

/**
 * 创建时间
 * @member {Date} createdTime
 */
SimulateVariantConfig.prototype.createdTime = undefined;

/**
 * 范围最大值
 * @member {Number} max
 */
SimulateVariantConfig.prototype.max = undefined;

/**
 * 范围最小值
 * @member {Number} min
 */
SimulateVariantConfig.prototype.min = undefined;

/**
 * 描述
 * @member {String} remark
 */
SimulateVariantConfig.prototype.remark = undefined;

/**
 * 规则ID
 * @member {String} ruleId
 */
SimulateVariantConfig.prototype.ruleId = undefined;

/**
 * 模拟数据变化的类型:fixed,random,increase,decrease
 * @member {String} simulateType
 */
SimulateVariantConfig.prototype.simulateType = undefined;

/**
 * 自增或自减时的步进最大值
 * @member {Number} stepMax
 */
SimulateVariantConfig.prototype.stepMax = undefined;

/**
 * 自增或自减时的步进最小值
 * @member {Number} stepMin
 */
SimulateVariantConfig.prototype.stepMin = undefined;

/**
 * 触发间隔，以秒为单位
 * @member {Number} triggerInterval
 */
SimulateVariantConfig.prototype.triggerInterval = undefined;

/**
 * 修改时间
 * @member {Date} updatedTime
 */
SimulateVariantConfig.prototype.updatedTime = undefined;

/**
 * 变量id
 * @member {Number} variantId
 */
SimulateVariantConfig.prototype.variantId = undefined;


