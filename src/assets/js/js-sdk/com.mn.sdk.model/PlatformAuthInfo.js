/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The PlatformAuthInfo model module.
 * @module com.mn.sdk.model/PlatformAuthInfo
 * @version 1.0
 */
export class PlatformAuthInfo {
  /**
   * Constructs a new <code>PlatformAuthInfo</code>.
   * @alias module:com.mn.sdk.model/PlatformAuthInfo
   * @class
   * @param companyNoteTotal {Number} 每个企业免费短信条数
   * @param deviceNoteTotal {Number} device短信免费
   * @param deviceTotal {Number} 第三方设备总量
   * @param deviceUsed {Number} 第三方设备已使用数
   * @param emailTotal {Number} 邮件调用次数/年
   * @param emailUsed {Number} 邮件已使用数
   * @param locationTotal {Number} 定位调用次数/年
   * @param locationUsed {Number} 定位已使用数
   * @param variantTotal {Number} 变量
   * @param variantUsed {Number} 变量已使用数
   * @param weatherTotal {Number} 天启调用次数/年
   * @param weatherUsed {Number} 天启已使用数
   */
  constructor(companyNoteTotal, deviceNoteTotal, deviceTotal, deviceUsed, emailTotal, emailUsed, locationTotal, locationUsed, variantTotal, variantUsed, weatherTotal, weatherUsed) {
    this.companyNoteTotal = companyNoteTotal;
    this.deviceNoteTotal = deviceNoteTotal;
    this.deviceTotal = deviceTotal;
    this.deviceUsed = deviceUsed;
    this.emailTotal = emailTotal;
    this.emailUsed = emailUsed;
    this.locationTotal = locationTotal;
    this.locationUsed = locationUsed;
    this.variantTotal = variantTotal;
    this.variantUsed = variantUsed;
    this.weatherTotal = weatherTotal;
    this.weatherUsed = weatherUsed;
  }


    static constructFromList(list) {
        let array = [new PlatformAuthInfo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(PlatformAuthInfo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>PlatformAuthInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/PlatformAuthInfo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/PlatformAuthInfo} The populated <code>PlatformAuthInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PlatformAuthInfo();
      if (Reflect.has(data, 'companyNoteTotal'))
        obj.companyNoteTotal = ApiClient.convertToType(data['companyNoteTotal'], 'Number');
      if (Reflect.has(data, 'deviceNoteTotal'))
        obj.deviceNoteTotal = ApiClient.convertToType(data['deviceNoteTotal'], 'Number');
      if (Reflect.has(data, 'deviceTotal'))
        obj.deviceTotal = ApiClient.convertToType(data['deviceTotal'], 'Number');
      if (Reflect.has(data, 'deviceUsed'))
        obj.deviceUsed = ApiClient.convertToType(data['deviceUsed'], 'Number');
      if (Reflect.has(data, 'emailTotal'))
        obj.emailTotal = ApiClient.convertToType(data['emailTotal'], 'Number');
      if (Reflect.has(data, 'emailUsed'))
        obj.emailUsed = ApiClient.convertToType(data['emailUsed'], 'Number');
      if (Reflect.has(data, 'locationTotal'))
        obj.locationTotal = ApiClient.convertToType(data['locationTotal'], 'Number');
      if (Reflect.has(data, 'locationUsed'))
        obj.locationUsed = ApiClient.convertToType(data['locationUsed'], 'Number');
      if (Reflect.has(data, 'variantTotal'))
        obj.variantTotal = ApiClient.convertToType(data['variantTotal'], 'Number');
      if (Reflect.has(data, 'variantUsed'))
        obj.variantUsed = ApiClient.convertToType(data['variantUsed'], 'Number');
      if (Reflect.has(data, 'weatherTotal'))
        obj.weatherTotal = ApiClient.convertToType(data['weatherTotal'], 'Number');
      if (Reflect.has(data, 'weatherUsed'))
        obj.weatherUsed = ApiClient.convertToType(data['weatherUsed'], 'Number');
    }
    return obj;
  }
}

/**
 * 每个企业免费短信条数
 * @member {Number} companyNoteTotal
 */
PlatformAuthInfo.prototype.companyNoteTotal = undefined;

/**
 * device短信免费
 * @member {Number} deviceNoteTotal
 */
PlatformAuthInfo.prototype.deviceNoteTotal = undefined;

/**
 * 第三方设备总量
 * @member {Number} deviceTotal
 */
PlatformAuthInfo.prototype.deviceTotal = undefined;

/**
 * 第三方设备已使用数
 * @member {Number} deviceUsed
 */
PlatformAuthInfo.prototype.deviceUsed = undefined;

/**
 * 邮件调用次数/年
 * @member {Number} emailTotal
 */
PlatformAuthInfo.prototype.emailTotal = undefined;

/**
 * 邮件已使用数
 * @member {Number} emailUsed
 */
PlatformAuthInfo.prototype.emailUsed = undefined;

/**
 * 定位调用次数/年
 * @member {Number} locationTotal
 */
PlatformAuthInfo.prototype.locationTotal = undefined;

/**
 * 定位已使用数
 * @member {Number} locationUsed
 */
PlatformAuthInfo.prototype.locationUsed = undefined;

/**
 * 变量
 * @member {Number} variantTotal
 */
PlatformAuthInfo.prototype.variantTotal = undefined;

/**
 * 变量已使用数
 * @member {Number} variantUsed
 */
PlatformAuthInfo.prototype.variantUsed = undefined;

/**
 * 天启调用次数/年
 * @member {Number} weatherTotal
 */
PlatformAuthInfo.prototype.weatherTotal = undefined;

/**
 * 天启已使用数
 * @member {Number} weatherUsed
 */
PlatformAuthInfo.prototype.weatherUsed = undefined;


