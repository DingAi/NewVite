/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The VariantTagVo model module.
 * @module com.mn.sdk.model/VariantTagVo
 * @version 1.0
 */
export class VariantTagVo {
  /**
   * Constructs a new <code>VariantTagVo</code>.
   * 变量标签Vo类
   * @alias module:com.mn.sdk.model/VariantTagVo
   * @class
   * @param id {String} 变量标签id
   * @param indexType {String} 排序号
   * @param isBind {Boolean} 是否已被绑定
   * @param name {String} 变量标签名称
   * @param sort {Number} 排序号
   */
  constructor(id, indexType, isBind, name, sort) {
    this.id = id;
    this.indexType = indexType;
    this.isBind = isBind;
    this.name = name;
    this.sort = sort;
  }


    static constructFromList(list) {
        let array = [new VariantTagVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(VariantTagVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>VariantTagVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/VariantTagVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/VariantTagVo} The populated <code>VariantTagVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new VariantTagVo();
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'indexType'))
        obj.indexType = ApiClient.convertToType(data['indexType'], 'String');
      if (Reflect.has(data, 'isBind'))
        obj.isBind = ApiClient.convertToType(data['isBind'], 'Boolean');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'sort'))
        obj.sort = ApiClient.convertToType(data['sort'], 'Number');
    }
    return obj;
  }
}

/**
 * 变量标签id
 * @member {String} id
 */
VariantTagVo.prototype.id = undefined;

/**
 * 排序号
 * @member {String} indexType
 */
VariantTagVo.prototype.indexType = undefined;

/**
 * 是否已被绑定
 * @member {Boolean} isBind
 */
VariantTagVo.prototype.isBind = undefined;

/**
 * 变量标签名称
 * @member {String} name
 */
VariantTagVo.prototype.name = undefined;

/**
 * 排序号
 * @member {Number} sort
 */
VariantTagVo.prototype.sort = undefined;


