/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ProjectBoardTreeNodeVo model module.
 * @module com.mn.sdk.model/ProjectBoardTreeNodeVo
 * @version 1.0
 */
export class ProjectBoardTreeNodeVo {
  /**
   * Constructs a new <code>ProjectBoardTreeNodeVo</code>.
   * 项目看板树节点VO类
   * @alias module:com.mn.sdk.model/ProjectBoardTreeNodeVo
   * @class
   * @param createdTime {Date} 创建时间 主要用于排序时 序列号相同 在根据创建时间进行排序
   * @param id {String} 节点ID
   * @param level {String} 日期类属性值 0：年 1：年月
   * @param name {String} 节点类型名称
   * @param sort {Number} 树节点层级 在一个看板下是唯一的(前端不能传入 后端自动根据顺序添加)
   * @param type {String} 项目看板节点类型 0:省、1市、2 区、3客户、4年、5月、6项目属性 、7:系统项目
   * @param value {String} 类型=6项目属性(属性ID) 类型!=属性(为类型名称)
   */
  constructor(createdTime, id, level, name, sort, type, value) {
    this.createdTime = createdTime;
    this.id = id;
    this.level = level;
    this.name = name;
    this.sort = sort;
    this.type = type;
    this.value = value;
  }


    static constructFromList(list) {
        let array = [new ProjectBoardTreeNodeVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(ProjectBoardTreeNodeVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>ProjectBoardTreeNodeVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/ProjectBoardTreeNodeVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/ProjectBoardTreeNodeVo} The populated <code>ProjectBoardTreeNodeVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ProjectBoardTreeNodeVo();
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'Date');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'level'))
        obj.level = ApiClient.convertToType(data['level'], 'String');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'sort'))
        obj.sort = ApiClient.convertToType(data['sort'], 'Number');
      if (Reflect.has(data, 'type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (Reflect.has(data, 'value'))
        obj.value = ApiClient.convertToType(data['value'], 'String');
    }
    return obj;
  }
}

/**
 * 创建时间 主要用于排序时 序列号相同 在根据创建时间进行排序
 * @member {Date} createdTime
 */
ProjectBoardTreeNodeVo.prototype.createdTime = undefined;

/**
 * 节点ID
 * @member {String} id
 */
ProjectBoardTreeNodeVo.prototype.id = undefined;

/**
 * 日期类属性值 0：年 1：年月
 * @member {String} level
 */
ProjectBoardTreeNodeVo.prototype.level = undefined;

/**
 * 节点类型名称
 * @member {String} name
 */
ProjectBoardTreeNodeVo.prototype.name = undefined;

/**
 * 树节点层级 在一个看板下是唯一的(前端不能传入 后端自动根据顺序添加)
 * @member {Number} sort
 */
ProjectBoardTreeNodeVo.prototype.sort = undefined;

/**
 * 项目看板节点类型 0:省、1市、2 区、3客户、4年、5月、6项目属性 、7:系统项目
 * @member {String} type
 */
ProjectBoardTreeNodeVo.prototype.type = undefined;

/**
 * 类型=6项目属性(属性ID) 类型!=属性(为类型名称)
 * @member {String} value
 */
ProjectBoardTreeNodeVo.prototype.value = undefined;


