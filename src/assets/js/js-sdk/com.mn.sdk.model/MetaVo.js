/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The MetaVo model module.
 * @module com.mn.sdk.model/MetaVo
 * @version 1.0
 */
export class MetaVo {
  /**
   * Constructs a new <code>MetaVo</code>.
   * @alias module:com.mn.sdk.model/MetaVo
   * @class
   * @param icon {String} 
   * @param id {String} 
   * @param leaf {Boolean} 
   * @param level {Number} 
   * @param parent {String} 
   * @param resouceValue {String} 
   * @param title {String} 
   */
  constructor(icon, id, leaf, level, parent, resouceValue, title) {
    this.icon = icon;
    this.id = id;
    this.leaf = leaf;
    this.level = level;
    this.parent = parent;
    this.resouceValue = resouceValue;
    this.title = title;
  }


    static constructFromList(list) {
        let array = [new MetaVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(MetaVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>MetaVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/MetaVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/MetaVo} The populated <code>MetaVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MetaVo();
      if (Reflect.has(data, 'icon'))
        obj.icon = ApiClient.convertToType(data['icon'], 'String');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'leaf'))
        obj.leaf = ApiClient.convertToType(data['leaf'], 'Boolean');
      if (Reflect.has(data, 'level'))
        obj.level = ApiClient.convertToType(data['level'], 'Number');
      if (Reflect.has(data, 'parent'))
        obj.parent = ApiClient.convertToType(data['parent'], 'String');
      if (Reflect.has(data, 'resouceValue'))
        obj.resouceValue = ApiClient.convertToType(data['resouceValue'], 'String');
      if (Reflect.has(data, 'title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} icon
 */
MetaVo.prototype.icon = undefined;

/**
 * @member {String} id
 */
MetaVo.prototype.id = undefined;

/**
 * @member {Boolean} leaf
 */
MetaVo.prototype.leaf = undefined;

/**
 * @member {Number} level
 */
MetaVo.prototype.level = undefined;

/**
 * @member {String} parent
 */
MetaVo.prototype.parent = undefined;

/**
 * @member {String} resouceValue
 */
MetaVo.prototype.resouceValue = undefined;

/**
 * @member {String} title
 */
MetaVo.prototype.title = undefined;


