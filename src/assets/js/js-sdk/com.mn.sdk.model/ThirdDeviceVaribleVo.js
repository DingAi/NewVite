/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ThirdDeviceVaribleVo model module.
 * @module com.mn.sdk.model/ThirdDeviceVaribleVo
 * @version 1.0
 */
export class ThirdDeviceVaribleVo {
  /**
   * Constructs a new <code>ThirdDeviceVaribleVo</code>.
   * 变量表实体类
   * @alias module:com.mn.sdk.model/ThirdDeviceVaribleVo
   * @class
   * @param addr {String} 变量地址
   * @param createdBy {String} 创建人
   * @param dataType {String} 数据类型
   * @param deviceId {String} 虚拟设备号
   * @param enableLinear {Number} 
   * @param enableLinearFlag {String} 
   * @param groupId {Number} 变量组id
   * @param groupName {String} 变量组名称
   * @param inputMax {String} 
   * @param inputMin {String} 
   * @param joinName {String} 
   * @param name {String} 变量名称
   * @param outDataType {String} 
   * @param outMax {String} 
   * @param outMin {String} 
   * @param phoneVisible {Number} 是否在移动端显示 0:不显示 1:显示
   * @param plcId {Number} PLC设备Id
   * @param saveType {String} 历史存储类型 0:不存储，1:周期存储，2:变化存储，3:条件存储
   * @param saveValue {String} 历史存储值（1,5,10,30,60分钟），save_type为1(周期存储)，才会有save_value
   * @param sortNo {Number} 排序号
   * @param textFalse {String} 手机端为false显示文本
   * @param textTrue {String} 手机端为true显示文本
   * @param unit {String} 变量单位
   * @param variantId {Number} 每个虚拟设备的变量id从1递增
   * @param variantLevel {String} 变量类别 '':不启用类别，2:专家类，3:工程师类，4:操作师类
   * @param writeable {String} 是否可写 0:只读，1:可读可写
   */
  constructor(addr, createdBy, dataType, deviceId, enableLinear, enableLinearFlag, groupId, groupName, inputMax, inputMin, joinName, name, outDataType, outMax, outMin, phoneVisible, plcId, saveType, saveValue, sortNo, textFalse, textTrue, unit, variantId, variantLevel, writeable) {
    this.addr = addr;
    this.createdBy = createdBy;
    this.dataType = dataType;
    this.deviceId = deviceId;
    this.enableLinear = enableLinear;
    this.enableLinearFlag = enableLinearFlag;
    this.groupId = groupId;
    this.groupName = groupName;
    this.inputMax = inputMax;
    this.inputMin = inputMin;
    this.joinName = joinName;
    this.name = name;
    this.outDataType = outDataType;
    this.outMax = outMax;
    this.outMin = outMin;
    this.phoneVisible = phoneVisible;
    this.plcId = plcId;
    this.saveType = saveType;
    this.saveValue = saveValue;
    this.sortNo = sortNo;
    this.textFalse = textFalse;
    this.textTrue = textTrue;
    this.unit = unit;
    this.variantId = variantId;
    this.variantLevel = variantLevel;
    this.writeable = writeable;
  }


    static constructFromList(list) {
        let array = [new ThirdDeviceVaribleVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(ThirdDeviceVaribleVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>ThirdDeviceVaribleVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/ThirdDeviceVaribleVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/ThirdDeviceVaribleVo} The populated <code>ThirdDeviceVaribleVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ThirdDeviceVaribleVo();
      if (Reflect.has(data, 'addr'))
        obj.addr = ApiClient.convertToType(data['addr'], 'String');
      if (Reflect.has(data, 'createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], 'String');
      if (Reflect.has(data, 'dataType'))
        obj.dataType = ApiClient.convertToType(data['dataType'], 'String');
      if (Reflect.has(data, 'deviceId'))
        obj.deviceId = ApiClient.convertToType(data['deviceId'], 'String');
      if (Reflect.has(data, 'enableLinear'))
        obj.enableLinear = ApiClient.convertToType(data['enableLinear'], 'Number');
      if (Reflect.has(data, 'enableLinearFlag'))
        obj.enableLinearFlag = ApiClient.convertToType(data['enableLinearFlag'], 'String');
      if (Reflect.has(data, 'groupId'))
        obj.groupId = ApiClient.convertToType(data['groupId'], 'Number');
      if (Reflect.has(data, 'groupName'))
        obj.groupName = ApiClient.convertToType(data['groupName'], 'String');
      if (Reflect.has(data, 'inputMax'))
        obj.inputMax = ApiClient.convertToType(data['inputMax'], 'String');
      if (Reflect.has(data, 'inputMin'))
        obj.inputMin = ApiClient.convertToType(data['inputMin'], 'String');
      if (Reflect.has(data, 'joinName'))
        obj.joinName = ApiClient.convertToType(data['joinName'], 'String');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'outDataType'))
        obj.outDataType = ApiClient.convertToType(data['outDataType'], 'String');
      if (Reflect.has(data, 'outMax'))
        obj.outMax = ApiClient.convertToType(data['outMax'], 'String');
      if (Reflect.has(data, 'outMin'))
        obj.outMin = ApiClient.convertToType(data['outMin'], 'String');
      if (Reflect.has(data, 'phoneVisible'))
        obj.phoneVisible = ApiClient.convertToType(data['phoneVisible'], 'Number');
      if (Reflect.has(data, 'plcId'))
        obj.plcId = ApiClient.convertToType(data['plcId'], 'Number');
      if (Reflect.has(data, 'saveType'))
        obj.saveType = ApiClient.convertToType(data['saveType'], 'String');
      if (Reflect.has(data, 'saveValue'))
        obj.saveValue = ApiClient.convertToType(data['saveValue'], 'String');
      if (Reflect.has(data, 'sortNo'))
        obj.sortNo = ApiClient.convertToType(data['sortNo'], 'Number');
      if (Reflect.has(data, 'textFalse'))
        obj.textFalse = ApiClient.convertToType(data['textFalse'], 'String');
      if (Reflect.has(data, 'textTrue'))
        obj.textTrue = ApiClient.convertToType(data['textTrue'], 'String');
      if (Reflect.has(data, 'unit'))
        obj.unit = ApiClient.convertToType(data['unit'], 'String');
      if (Reflect.has(data, 'variantId'))
        obj.variantId = ApiClient.convertToType(data['variantId'], 'Number');
      if (Reflect.has(data, 'variantLevel'))
        obj.variantLevel = ApiClient.convertToType(data['variantLevel'], 'String');
      if (Reflect.has(data, 'writeable'))
        obj.writeable = ApiClient.convertToType(data['writeable'], 'String');
    }
    return obj;
  }
}

/**
 * 变量地址
 * @member {String} addr
 */
ThirdDeviceVaribleVo.prototype.addr = undefined;

/**
 * 创建人
 * @member {String} createdBy
 */
ThirdDeviceVaribleVo.prototype.createdBy = undefined;

/**
 * 数据类型
 * @member {String} dataType
 */
ThirdDeviceVaribleVo.prototype.dataType = undefined;

/**
 * 虚拟设备号
 * @member {String} deviceId
 */
ThirdDeviceVaribleVo.prototype.deviceId = undefined;

/**
 * @member {Number} enableLinear
 */
ThirdDeviceVaribleVo.prototype.enableLinear = undefined;

/**
 * @member {String} enableLinearFlag
 */
ThirdDeviceVaribleVo.prototype.enableLinearFlag = undefined;

/**
 * 变量组id
 * @member {Number} groupId
 */
ThirdDeviceVaribleVo.prototype.groupId = undefined;

/**
 * 变量组名称
 * @member {String} groupName
 */
ThirdDeviceVaribleVo.prototype.groupName = undefined;

/**
 * @member {String} inputMax
 */
ThirdDeviceVaribleVo.prototype.inputMax = undefined;

/**
 * @member {String} inputMin
 */
ThirdDeviceVaribleVo.prototype.inputMin = undefined;

/**
 * @member {String} joinName
 */
ThirdDeviceVaribleVo.prototype.joinName = undefined;

/**
 * 变量名称
 * @member {String} name
 */
ThirdDeviceVaribleVo.prototype.name = undefined;

/**
 * @member {String} outDataType
 */
ThirdDeviceVaribleVo.prototype.outDataType = undefined;

/**
 * @member {String} outMax
 */
ThirdDeviceVaribleVo.prototype.outMax = undefined;

/**
 * @member {String} outMin
 */
ThirdDeviceVaribleVo.prototype.outMin = undefined;

/**
 * 是否在移动端显示 0:不显示 1:显示
 * @member {Number} phoneVisible
 */
ThirdDeviceVaribleVo.prototype.phoneVisible = undefined;

/**
 * PLC设备Id
 * @member {Number} plcId
 */
ThirdDeviceVaribleVo.prototype.plcId = undefined;

/**
 * 历史存储类型 0:不存储，1:周期存储，2:变化存储，3:条件存储
 * @member {String} saveType
 */
ThirdDeviceVaribleVo.prototype.saveType = undefined;

/**
 * 历史存储值（1,5,10,30,60分钟），save_type为1(周期存储)，才会有save_value
 * @member {String} saveValue
 */
ThirdDeviceVaribleVo.prototype.saveValue = undefined;

/**
 * 排序号
 * @member {Number} sortNo
 */
ThirdDeviceVaribleVo.prototype.sortNo = undefined;

/**
 * 手机端为false显示文本
 * @member {String} textFalse
 */
ThirdDeviceVaribleVo.prototype.textFalse = undefined;

/**
 * 手机端为true显示文本
 * @member {String} textTrue
 */
ThirdDeviceVaribleVo.prototype.textTrue = undefined;

/**
 * 变量单位
 * @member {String} unit
 */
ThirdDeviceVaribleVo.prototype.unit = undefined;

/**
 * 每个虚拟设备的变量id从1递增
 * @member {Number} variantId
 */
ThirdDeviceVaribleVo.prototype.variantId = undefined;

/**
 * 变量类别 '':不启用类别，2:专家类，3:工程师类，4:操作师类
 * @member {String} variantLevel
 */
ThirdDeviceVaribleVo.prototype.variantLevel = undefined;

/**
 * 是否可写 0:只读，1:可读可写
 * @member {String} writeable
 */
ThirdDeviceVaribleVo.prototype.writeable = undefined;


