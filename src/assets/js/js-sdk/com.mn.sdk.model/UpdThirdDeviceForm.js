/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The UpdThirdDeviceForm model module.
 * @module com.mn.sdk.model/UpdThirdDeviceForm
 * @version 1.0
 */
export class UpdThirdDeviceForm {
  /**
   * Constructs a new <code>UpdThirdDeviceForm</code>.
   * 第三方设备信息
   * @alias module:com.mn.sdk.model/UpdThirdDeviceForm
   * @class
   * @param authType {String} 权限验证方式
   * @param companyId {String} 所属企业Id
   * @param createdBy {String} 创建人
   * @param createdTime {String} 创建时间
   * @param groupId {String} 所属分组
   * @param id {String} 第三方设备Id
   * @param protocolId {String} 设备所属协议ID
   * @param remark {String} 设备描述
   * @param secret {String} 设备密钥
   * @param serialNumber {String} 序列号
   * @param tlsEnabled {String} 是否启用
   * @param updatedTime {String} 修改时间
   */
  constructor(authType, companyId, createdBy, createdTime, groupId, id, protocolId, remark, secret, serialNumber, tlsEnabled, updatedTime) {
    this.authType = authType;
    this.companyId = companyId;
    this.createdBy = createdBy;
    this.createdTime = createdTime;
    this.groupId = groupId;
    this.id = id;
    this.protocolId = protocolId;
    this.remark = remark;
    this.secret = secret;
    this.serialNumber = serialNumber;
    this.tlsEnabled = tlsEnabled;
    this.updatedTime = updatedTime;
  }


    static constructFromList(list) {
        let array = [new UpdThirdDeviceForm()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(UpdThirdDeviceForm.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>UpdThirdDeviceForm</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/UpdThirdDeviceForm} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/UpdThirdDeviceForm} The populated <code>UpdThirdDeviceForm</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UpdThirdDeviceForm();
      if (Reflect.has(data, 'authType'))
        obj.authType = ApiClient.convertToType(data['authType'], 'String');
      if (Reflect.has(data, 'companyId'))
        obj.companyId = ApiClient.convertToType(data['companyId'], 'String');
      if (Reflect.has(data, 'createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], 'String');
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'String');
      if (Reflect.has(data, 'groupId'))
        obj.groupId = ApiClient.convertToType(data['groupId'], 'String');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'protocolId'))
        obj.protocolId = ApiClient.convertToType(data['protocolId'], 'String');
      if (Reflect.has(data, 'remark'))
        obj.remark = ApiClient.convertToType(data['remark'], 'String');
      if (Reflect.has(data, 'secret'))
        obj.secret = ApiClient.convertToType(data['secret'], 'String');
      if (Reflect.has(data, 'serialNumber'))
        obj.serialNumber = ApiClient.convertToType(data['serialNumber'], 'String');
      if (Reflect.has(data, 'tlsEnabled'))
        obj.tlsEnabled = ApiClient.convertToType(data['tlsEnabled'], 'String');
      if (Reflect.has(data, 'updatedTime'))
        obj.updatedTime = ApiClient.convertToType(data['updatedTime'], 'String');
    }
    return obj;
  }
}

/**
 * 权限验证方式
 * @member {String} authType
 */
UpdThirdDeviceForm.prototype.authType = undefined;

/**
 * 所属企业Id
 * @member {String} companyId
 */
UpdThirdDeviceForm.prototype.companyId = undefined;

/**
 * 创建人
 * @member {String} createdBy
 */
UpdThirdDeviceForm.prototype.createdBy = undefined;

/**
 * 创建时间
 * @member {String} createdTime
 */
UpdThirdDeviceForm.prototype.createdTime = undefined;

/**
 * 所属分组
 * @member {String} groupId
 */
UpdThirdDeviceForm.prototype.groupId = undefined;

/**
 * 第三方设备Id
 * @member {String} id
 */
UpdThirdDeviceForm.prototype.id = undefined;

/**
 * 设备所属协议ID
 * @member {String} protocolId
 */
UpdThirdDeviceForm.prototype.protocolId = undefined;

/**
 * 设备描述
 * @member {String} remark
 */
UpdThirdDeviceForm.prototype.remark = undefined;

/**
 * 设备密钥
 * @member {String} secret
 */
UpdThirdDeviceForm.prototype.secret = undefined;

/**
 * 序列号
 * @member {String} serialNumber
 */
UpdThirdDeviceForm.prototype.serialNumber = undefined;

/**
 * 是否启用
 * @member {String} tlsEnabled
 */
UpdThirdDeviceForm.prototype.tlsEnabled = undefined;

/**
 * 修改时间
 * @member {String} updatedTime
 */
UpdThirdDeviceForm.prototype.updatedTime = undefined;


