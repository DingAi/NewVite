/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The TreeNodeVo model module.
 * @module com.mn.sdk.model/TreeNodeVo
 * @version 1.0
 */
export class TreeNodeVo {
  /**
   * Constructs a new <code>TreeNodeVo</code>.
   * @alias module:com.mn.sdk.model/TreeNodeVo
   * @class
   * @param children {Array.<Object>} 子节点
   * @param id {String} 节点唯一id
   * @param isProject {Boolean} 是否为项目节点
   * @param name {String} 节点名称
   * @param sort {Number} 排序号
   */
  constructor(children, id, isProject, name, sort) {
    this.children = children;
    this.id = id;
    this.isProject = isProject;
    this.name = name;
    this.sort = sort;
  }


    static constructFromList(list) {
        let array = [new TreeNodeVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(TreeNodeVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>TreeNodeVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/TreeNodeVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/TreeNodeVo} The populated <code>TreeNodeVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TreeNodeVo();
      if (Reflect.has(data, 'children'))
        obj.children = ApiClient.convertToType(data['children'], [Object]);
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'isProject'))
        obj.isProject = ApiClient.convertToType(data['isProject'], 'Boolean');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'sort'))
        obj.sort = ApiClient.convertToType(data['sort'], 'Number');
    }
    return obj;
  }
}

/**
 * 子节点
 * @member {Array.<Object>} children
 */
TreeNodeVo.prototype.children = undefined;

/**
 * 节点唯一id
 * @member {String} id
 */
TreeNodeVo.prototype.id = undefined;

/**
 * 是否为项目节点
 * @member {Boolean} isProject
 */
TreeNodeVo.prototype.isProject = undefined;

/**
 * 节点名称
 * @member {String} name
 */
TreeNodeVo.prototype.name = undefined;

/**
 * 排序号
 * @member {Number} sort
 */
TreeNodeVo.prototype.sort = undefined;


