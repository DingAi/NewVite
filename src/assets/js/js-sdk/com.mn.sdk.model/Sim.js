/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The Sim model module.
 * @module com.mn.sdk.model/Sim
 * @version 1.0
 */
export class Sim {
  /**
   * Constructs a new <code>Sim</code>.
   * @alias module:com.mn.sdk.model/Sim
   * @class
   * @param balanceFlow {Number} 剩余流量
   * @param deviceId {String} 设备Id
   * @param deviceName {String} 设备名称
   * @param expirationTime {String} 过期时间
   * @param iccid {String} iccid
   * @param operator {String} 运营商
   * @param operatorId {String} 运营商分组
   * @param projectId {String} 项目id
   * @param projectName {String} 项目名称
   * @param rechargeStatus {String} 开的充值状态0：不可充值，1：可充值
   * @param serialNumber {String} 设备序列号
   * @param status {String} 过滤状态，0：停机，1：正常,2：注销,3：其它
   * @param statusDescription {String} 卡的状态描述信息
   * @param totalFlow {Number} 总流量
   */
  constructor(balanceFlow, deviceId, deviceName, expirationTime, iccid, operator, operatorId, projectId, projectName, rechargeStatus, serialNumber, status, statusDescription, totalFlow) {
    this.balanceFlow = balanceFlow;
    this.deviceId = deviceId;
    this.deviceName = deviceName;
    this.expirationTime = expirationTime;
    this.iccid = iccid;
    this.operator = operator;
    this.operatorId = operatorId;
    this.projectId = projectId;
    this.projectName = projectName;
    this.rechargeStatus = rechargeStatus;
    this.serialNumber = serialNumber;
    this.status = status;
    this.statusDescription = statusDescription;
    this.totalFlow = totalFlow;
  }


    static constructFromList(list) {
        let array = [new Sim()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(Sim.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>Sim</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/Sim} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/Sim} The populated <code>Sim</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Sim();
      if (Reflect.has(data, 'balanceFlow'))
        obj.balanceFlow = ApiClient.convertToType(data['balanceFlow'], 'Number');
      if (Reflect.has(data, 'deviceId'))
        obj.deviceId = ApiClient.convertToType(data['deviceId'], 'String');
      if (Reflect.has(data, 'deviceName'))
        obj.deviceName = ApiClient.convertToType(data['deviceName'], 'String');
      if (Reflect.has(data, 'expirationTime'))
        obj.expirationTime = ApiClient.convertToType(data['expirationTime'], 'String');
      if (Reflect.has(data, 'iccid'))
        obj.iccid = ApiClient.convertToType(data['iccid'], 'String');
      if (Reflect.has(data, 'operator'))
        obj.operator = ApiClient.convertToType(data['operator'], 'String');
      if (Reflect.has(data, 'operatorId'))
        obj.operatorId = ApiClient.convertToType(data['operatorId'], 'String');
      if (Reflect.has(data, 'projectId'))
        obj.projectId = ApiClient.convertToType(data['projectId'], 'String');
      if (Reflect.has(data, 'projectName'))
        obj.projectName = ApiClient.convertToType(data['projectName'], 'String');
      if (Reflect.has(data, 'rechargeStatus'))
        obj.rechargeStatus = ApiClient.convertToType(data['rechargeStatus'], 'String');
      if (Reflect.has(data, 'serialNumber'))
        obj.serialNumber = ApiClient.convertToType(data['serialNumber'], 'String');
      if (Reflect.has(data, 'status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (Reflect.has(data, 'statusDescription'))
        obj.statusDescription = ApiClient.convertToType(data['statusDescription'], 'String');
      if (Reflect.has(data, 'totalFlow'))
        obj.totalFlow = ApiClient.convertToType(data['totalFlow'], 'Number');
    }
    return obj;
  }
}

/**
 * 剩余流量
 * @member {Number} balanceFlow
 */
Sim.prototype.balanceFlow = undefined;

/**
 * 设备Id
 * @member {String} deviceId
 */
Sim.prototype.deviceId = undefined;

/**
 * 设备名称
 * @member {String} deviceName
 */
Sim.prototype.deviceName = undefined;

/**
 * 过期时间
 * @member {String} expirationTime
 */
Sim.prototype.expirationTime = undefined;

/**
 * iccid
 * @member {String} iccid
 */
Sim.prototype.iccid = undefined;

/**
 * 运营商
 * @member {String} operator
 */
Sim.prototype.operator = undefined;

/**
 * 运营商分组
 * @member {String} operatorId
 */
Sim.prototype.operatorId = undefined;

/**
 * 项目id
 * @member {String} projectId
 */
Sim.prototype.projectId = undefined;

/**
 * 项目名称
 * @member {String} projectName
 */
Sim.prototype.projectName = undefined;

/**
 * 开的充值状态0：不可充值，1：可充值
 * @member {String} rechargeStatus
 */
Sim.prototype.rechargeStatus = undefined;

/**
 * 设备序列号
 * @member {String} serialNumber
 */
Sim.prototype.serialNumber = undefined;

/**
 * 过滤状态，0：停机，1：正常,2：注销,3：其它
 * @member {String} status
 */
Sim.prototype.status = undefined;

/**
 * 卡的状态描述信息
 * @member {String} statusDescription
 */
Sim.prototype.statusDescription = undefined;

/**
 * 总流量
 * @member {Number} totalFlow
 */
Sim.prototype.totalFlow = undefined;


