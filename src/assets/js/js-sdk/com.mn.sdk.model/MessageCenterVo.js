/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The MessageCenterVo model module.
 * @module com.mn.sdk.model/MessageCenterVo
 * @version 1.0
 */
export class MessageCenterVo {
  /**
   * Constructs a new <code>MessageCenterVo</code>.
   * 消息
   * @alias module:com.mn.sdk.model/MessageCenterVo
   * @class
   * @param content {String} 消息内容
   * @param createdTime {String} 创建时间
   * @param id {String} 消息表主键
   * @param messageSubject {String} 消息主题
   * @param messageType {String} 消息类型名称
   * @param messageTypeId {String} 消息类型Id
   * @param projectId {String} 项目id
   * @param projectName {String} 项目名称(如果存在自定义名称，则用自定义的，如果不存在，则用项目名称)
   * @param readStatus {String} 消息状态  0 未读  1 已读
   * @param subjectName {String} 消息主题-消息类型名称 组合
   * @param title {String} 消息标题
   * @param type {String} 
   */
  constructor(content, createdTime, id, messageSubject, messageType, messageTypeId, projectId, projectName, readStatus, subjectName, title, type) {
    this.content = content;
    this.createdTime = createdTime;
    this.id = id;
    this.messageSubject = messageSubject;
    this.messageType = messageType;
    this.messageTypeId = messageTypeId;
    this.projectId = projectId;
    this.projectName = projectName;
    this.readStatus = readStatus;
    this.subjectName = subjectName;
    this.title = title;
    this.type = type;
  }


    static constructFromList(list) {
        let array = [new MessageCenterVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(MessageCenterVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>MessageCenterVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/MessageCenterVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/MessageCenterVo} The populated <code>MessageCenterVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MessageCenterVo();
      if (Reflect.has(data, 'content'))
        obj.content = ApiClient.convertToType(data['content'], 'String');
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'String');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'messageSubject'))
        obj.messageSubject = ApiClient.convertToType(data['messageSubject'], 'String');
      if (Reflect.has(data, 'messageType'))
        obj.messageType = ApiClient.convertToType(data['messageType'], 'String');
      if (Reflect.has(data, 'messageTypeId'))
        obj.messageTypeId = ApiClient.convertToType(data['messageTypeId'], 'String');
      if (Reflect.has(data, 'projectId'))
        obj.projectId = ApiClient.convertToType(data['projectId'], 'String');
      if (Reflect.has(data, 'projectName'))
        obj.projectName = ApiClient.convertToType(data['projectName'], 'String');
      if (Reflect.has(data, 'readStatus'))
        obj.readStatus = ApiClient.convertToType(data['readStatus'], 'String');
      if (Reflect.has(data, 'subjectName'))
        obj.subjectName = ApiClient.convertToType(data['subjectName'], 'String');
      if (Reflect.has(data, 'title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (Reflect.has(data, 'type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
    }
    return obj;
  }
}

/**
 * 消息内容
 * @member {String} content
 */
MessageCenterVo.prototype.content = undefined;

/**
 * 创建时间
 * @member {String} createdTime
 */
MessageCenterVo.prototype.createdTime = undefined;

/**
 * 消息表主键
 * @member {String} id
 */
MessageCenterVo.prototype.id = undefined;

/**
 * 消息主题
 * @member {String} messageSubject
 */
MessageCenterVo.prototype.messageSubject = undefined;

/**
 * 消息类型名称
 * @member {String} messageType
 */
MessageCenterVo.prototype.messageType = undefined;

/**
 * 消息类型Id
 * @member {String} messageTypeId
 */
MessageCenterVo.prototype.messageTypeId = undefined;

/**
 * 项目id
 * @member {String} projectId
 */
MessageCenterVo.prototype.projectId = undefined;

/**
 * 项目名称(如果存在自定义名称，则用自定义的，如果不存在，则用项目名称)
 * @member {String} projectName
 */
MessageCenterVo.prototype.projectName = undefined;

/**
 * 消息状态  0 未读  1 已读
 * @member {String} readStatus
 */
MessageCenterVo.prototype.readStatus = undefined;

/**
 * 消息主题-消息类型名称 组合
 * @member {String} subjectName
 */
MessageCenterVo.prototype.subjectName = undefined;

/**
 * 消息标题
 * @member {String} title
 */
MessageCenterVo.prototype.title = undefined;

/**
 * @member {String} type
 */
MessageCenterVo.prototype.type = undefined;


