/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The DeviceMonitorVo model module.
 * @module com.mn.sdk.model/DeviceMonitorVo
 * @version 1.0
 */
export class DeviceMonitorVo {
  /**
   * Constructs a new <code>DeviceMonitorVo</code>.
   * 超级用户查看平台Device监控Vo
   * @alias module:com.mn.sdk.model/DeviceMonitorVo
   * @class
   * @param companyName {String} 企业名称
   * @param disconnectionTimes {Number} 断线次数
   * @param lastOff {Date} 上次离线时间
   * @param lastOn {Date} 上次在线时间
   * @param name {String} DeviceName或者plcName
   * @param onlineRate {Number} 在线率
   * @param packages {Number} 包数
   * @param projectId {String} 项目id
   * @param projectName {String} 项目名称
   * @param protocol {String} 协议
   * @param serialNumber {String} 设备序列号
   * @param status {Boolean} 状态
   * @param synchronous {Boolean} 是否同步
   * @param thirdDevice {Boolean} 是否是第三方设备
   * @param thirdDeviceId {String} 第三方设备id
   * @param time {Date} 状态改变时间
   * @param totalOfflineTime {Number} 总离线时间
   * @param totalOnlineTime {Number} 总在线时间
   * @param version {String} 版本
   */
  constructor(companyName, disconnectionTimes, lastOff, lastOn, name, onlineRate, packages, projectId, projectName, protocol, serialNumber, status, synchronous, thirdDevice, thirdDeviceId, time, totalOfflineTime, totalOnlineTime, version) {
    this.companyName = companyName;
    this.disconnectionTimes = disconnectionTimes;
    this.lastOff = lastOff;
    this.lastOn = lastOn;
    this.name = name;
    this.onlineRate = onlineRate;
    this.packages = packages;
    this.projectId = projectId;
    this.projectName = projectName;
    this.protocol = protocol;
    this.serialNumber = serialNumber;
    this.status = status;
    this.synchronous = synchronous;
    this.thirdDevice = thirdDevice;
    this.thirdDeviceId = thirdDeviceId;
    this.time = time;
    this.totalOfflineTime = totalOfflineTime;
    this.totalOnlineTime = totalOnlineTime;
    this.version = version;
  }


    static constructFromList(list) {
        let array = [new DeviceMonitorVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(DeviceMonitorVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>DeviceMonitorVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/DeviceMonitorVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/DeviceMonitorVo} The populated <code>DeviceMonitorVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DeviceMonitorVo();
      if (Reflect.has(data, 'companyName'))
        obj.companyName = ApiClient.convertToType(data['companyName'], 'String');
      if (Reflect.has(data, 'disconnectionTimes'))
        obj.disconnectionTimes = ApiClient.convertToType(data['disconnectionTimes'], 'Number');
      if (Reflect.has(data, 'lastOff'))
        obj.lastOff = ApiClient.convertToType(data['lastOff'], 'Date');
      if (Reflect.has(data, 'lastOn'))
        obj.lastOn = ApiClient.convertToType(data['lastOn'], 'Date');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'onlineRate'))
        obj.onlineRate = ApiClient.convertToType(data['onlineRate'], 'Number');
      if (Reflect.has(data, 'packages'))
        obj.packages = ApiClient.convertToType(data['packages'], 'Number');
      if (Reflect.has(data, 'projectId'))
        obj.projectId = ApiClient.convertToType(data['projectId'], 'String');
      if (Reflect.has(data, 'projectName'))
        obj.projectName = ApiClient.convertToType(data['projectName'], 'String');
      if (Reflect.has(data, 'protocol'))
        obj.protocol = ApiClient.convertToType(data['protocol'], 'String');
      if (Reflect.has(data, 'serialNumber'))
        obj.serialNumber = ApiClient.convertToType(data['serialNumber'], 'String');
      if (Reflect.has(data, 'status'))
        obj.status = ApiClient.convertToType(data['status'], 'Boolean');
      if (Reflect.has(data, 'synchronous'))
        obj.synchronous = ApiClient.convertToType(data['synchronous'], 'Boolean');
      if (Reflect.has(data, 'thirdDevice'))
        obj.thirdDevice = ApiClient.convertToType(data['thirdDevice'], 'Boolean');
      if (Reflect.has(data, 'thirdDeviceId'))
        obj.thirdDeviceId = ApiClient.convertToType(data['thirdDeviceId'], 'String');
      if (Reflect.has(data, 'time'))
        obj.time = ApiClient.convertToType(data['time'], 'Date');
      if (Reflect.has(data, 'totalOfflineTime'))
        obj.totalOfflineTime = ApiClient.convertToType(data['totalOfflineTime'], 'Number');
      if (Reflect.has(data, 'totalOnlineTime'))
        obj.totalOnlineTime = ApiClient.convertToType(data['totalOnlineTime'], 'Number');
      if (Reflect.has(data, 'version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
    }
    return obj;
  }
}

/**
 * 企业名称
 * @member {String} companyName
 */
DeviceMonitorVo.prototype.companyName = undefined;

/**
 * 断线次数
 * @member {Number} disconnectionTimes
 */
DeviceMonitorVo.prototype.disconnectionTimes = undefined;

/**
 * 上次离线时间
 * @member {Date} lastOff
 */
DeviceMonitorVo.prototype.lastOff = undefined;

/**
 * 上次在线时间
 * @member {Date} lastOn
 */
DeviceMonitorVo.prototype.lastOn = undefined;

/**
 * DeviceName或者plcName
 * @member {String} name
 */
DeviceMonitorVo.prototype.name = undefined;

/**
 * 在线率
 * @member {Number} onlineRate
 */
DeviceMonitorVo.prototype.onlineRate = undefined;

/**
 * 包数
 * @member {Number} packages
 */
DeviceMonitorVo.prototype.packages = undefined;

/**
 * 项目id
 * @member {String} projectId
 */
DeviceMonitorVo.prototype.projectId = undefined;

/**
 * 项目名称
 * @member {String} projectName
 */
DeviceMonitorVo.prototype.projectName = undefined;

/**
 * 协议
 * @member {String} protocol
 */
DeviceMonitorVo.prototype.protocol = undefined;

/**
 * 设备序列号
 * @member {String} serialNumber
 */
DeviceMonitorVo.prototype.serialNumber = undefined;

/**
 * 状态
 * @member {Boolean} status
 */
DeviceMonitorVo.prototype.status = undefined;

/**
 * 是否同步
 * @member {Boolean} synchronous
 */
DeviceMonitorVo.prototype.synchronous = undefined;

/**
 * 是否是第三方设备
 * @member {Boolean} thirdDevice
 */
DeviceMonitorVo.prototype.thirdDevice = undefined;

/**
 * 第三方设备id
 * @member {String} thirdDeviceId
 */
DeviceMonitorVo.prototype.thirdDeviceId = undefined;

/**
 * 状态改变时间
 * @member {Date} time
 */
DeviceMonitorVo.prototype.time = undefined;

/**
 * 总离线时间
 * @member {Number} totalOfflineTime
 */
DeviceMonitorVo.prototype.totalOfflineTime = undefined;

/**
 * 总在线时间
 * @member {Number} totalOnlineTime
 */
DeviceMonitorVo.prototype.totalOnlineTime = undefined;

/**
 * 版本
 * @member {String} version
 */
DeviceMonitorVo.prototype.version = undefined;


