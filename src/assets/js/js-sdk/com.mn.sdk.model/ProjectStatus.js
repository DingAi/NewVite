/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ProjectStatus model module.
 * @module com.mn.sdk.model/ProjectStatus
 * @version 1.0
 */
export class ProjectStatus {
  /**
   * Constructs a new <code>ProjectStatus</code>.
   * @alias module:com.mn.sdk.model/ProjectStatus
   * @class
   * @param alarmStatus {String} 报警状态：0:无报警，1：有报警
   * @param bindSerialNumber {String} 序列号状态： 0:部分设备未绑定序列号，1：所有设备均已绑定序列号
   * @param deviceStatus {String} 设备状态： 0:部分设备离线，1：全部在线
   * @param hasDevice {String} 项目有无设备：0:项目无设备，1：项目有设备
   * @param plcStatus {String} PLC状态 0:部分离线，1：全部在线
   * @param projectId {String} 项目id
   * @param synchronizationStatus {String} 同步状态： 0:不需要同步，1：需要同步
   */
  constructor(alarmStatus, bindSerialNumber, deviceStatus, hasDevice, plcStatus, projectId, synchronizationStatus) {
    this.alarmStatus = alarmStatus;
    this.bindSerialNumber = bindSerialNumber;
    this.deviceStatus = deviceStatus;
    this.hasDevice = hasDevice;
    this.plcStatus = plcStatus;
    this.projectId = projectId;
    this.synchronizationStatus = synchronizationStatus;
  }


    static constructFromList(list) {
        let array = [new ProjectStatus()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(ProjectStatus.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>ProjectStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/ProjectStatus} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/ProjectStatus} The populated <code>ProjectStatus</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ProjectStatus();
      if (Reflect.has(data, 'alarmStatus'))
        obj.alarmStatus = ApiClient.convertToType(data['alarmStatus'], 'String');
      if (Reflect.has(data, 'bindSerialNumber'))
        obj.bindSerialNumber = ApiClient.convertToType(data['bindSerialNumber'], 'String');
      if (Reflect.has(data, 'deviceStatus'))
        obj.deviceStatus = ApiClient.convertToType(data['deviceStatus'], 'String');
      if (Reflect.has(data, 'hasDevice'))
        obj.hasDevice = ApiClient.convertToType(data['hasDevice'], 'String');
      if (Reflect.has(data, 'plcStatus'))
        obj.plcStatus = ApiClient.convertToType(data['plcStatus'], 'String');
      if (Reflect.has(data, 'projectId'))
        obj.projectId = ApiClient.convertToType(data['projectId'], 'String');
      if (Reflect.has(data, 'synchronizationStatus'))
        obj.synchronizationStatus = ApiClient.convertToType(data['synchronizationStatus'], 'String');
    }
    return obj;
  }
}

/**
 * 报警状态：0:无报警，1：有报警
 * @member {String} alarmStatus
 */
ProjectStatus.prototype.alarmStatus = undefined;

/**
 * 序列号状态： 0:部分设备未绑定序列号，1：所有设备均已绑定序列号
 * @member {String} bindSerialNumber
 */
ProjectStatus.prototype.bindSerialNumber = undefined;

/**
 * 设备状态： 0:部分设备离线，1：全部在线
 * @member {String} deviceStatus
 */
ProjectStatus.prototype.deviceStatus = undefined;

/**
 * 项目有无设备：0:项目无设备，1：项目有设备
 * @member {String} hasDevice
 */
ProjectStatus.prototype.hasDevice = undefined;

/**
 * PLC状态 0:部分离线，1：全部在线
 * @member {String} plcStatus
 */
ProjectStatus.prototype.plcStatus = undefined;

/**
 * 项目id
 * @member {String} projectId
 */
ProjectStatus.prototype.projectId = undefined;

/**
 * 同步状态： 0:不需要同步，1：需要同步
 * @member {String} synchronizationStatus
 */
ProjectStatus.prototype.synchronizationStatus = undefined;


