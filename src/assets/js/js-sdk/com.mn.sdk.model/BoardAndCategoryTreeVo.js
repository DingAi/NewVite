/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The BoardAndCategoryTreeVo model module.
 * @module com.mn.sdk.model/BoardAndCategoryTreeVo
 * @version 1.0
 */
export class BoardAndCategoryTreeVo {
  /**
   * Constructs a new <code>BoardAndCategoryTreeVo</code>.
   * 报表看板树节点Vo
   * @alias module:com.mn.sdk.model/BoardAndCategoryTreeVo
   * @class
   * @param boardList {Array.<module:com.mn.sdk.model/BoardAndCategoryTreeVo>} 看板子节点
   * @param id {String} 看板Id
   * @param name {String} 看板名称
   * @param parentId {String} 看板父节点Id
   * @param src {String} 看板报表路径
   * @param type {Number} 看板类型 0：看板分类，1：看板
   */
  constructor(boardList, id, name, parentId, src, type) {
    this.boardList = boardList;
    this.id = id;
    this.name = name;
    this.parentId = parentId;
    this.src = src;
    this.type = type;
  }


    static constructFromList(list) {
        let array = [new BoardAndCategoryTreeVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(BoardAndCategoryTreeVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>BoardAndCategoryTreeVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/BoardAndCategoryTreeVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/BoardAndCategoryTreeVo} The populated <code>BoardAndCategoryTreeVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new BoardAndCategoryTreeVo();
      if (Reflect.has(data, 'boardList'))
        obj.boardList = ApiClient.convertToType(data['boardList'], [BoardAndCategoryTreeVo]);
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'parentId'))
        obj.parentId = ApiClient.convertToType(data['parentId'], 'String');
      if (Reflect.has(data, 'src'))
        obj.src = ApiClient.convertToType(data['src'], 'String');
      if (Reflect.has(data, 'type'))
        obj.type = ApiClient.convertToType(data['type'], 'Number');
    }
    return obj;
  }
}

/**
 * 看板子节点
 * @member {Array.<module:com.mn.sdk.model/BoardAndCategoryTreeVo>} boardList
 */
BoardAndCategoryTreeVo.prototype.boardList = undefined;

/**
 * 看板Id
 * @member {String} id
 */
BoardAndCategoryTreeVo.prototype.id = undefined;

/**
 * 看板名称
 * @member {String} name
 */
BoardAndCategoryTreeVo.prototype.name = undefined;

/**
 * 看板父节点Id
 * @member {String} parentId
 */
BoardAndCategoryTreeVo.prototype.parentId = undefined;

/**
 * 看板报表路径
 * @member {String} src
 */
BoardAndCategoryTreeVo.prototype.src = undefined;

/**
 * 看板类型 0：看板分类，1：看板
 * @member {Number} type
 */
BoardAndCategoryTreeVo.prototype.type = undefined;


