/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The UserForm model module.
 * @module com.mn.sdk.model/UserForm
 * @version 1.0
 */
export class UserForm {
  /**
   * Constructs a new <code>UserForm</code>.
   * 添加用户信息Form
   * @alias module:com.mn.sdk.model/UserForm
   * @class
   * @param address {String} 地址
   * @param departmentId {String} 部门ID
   * @param deviceId {String} 图片验证码设备id
   * @param email {String} 电子邮箱
   * @param lock {Boolean} 账号是否锁定(1:锁定 0未锁定)
   * @param nickname {String} 昵称
   * @param officePhone {String} 办公电话
   * @param password {String} 密码
   * @param phone {String} 手机号
   * @param phoneCode {String} 手机验证码
   * @param roleId {String} 角色ID
   * @param sex {Number} 性别(0:男 1:女 2:未知)
   * @param source {Number} 数据来源(0注册审核,1企业管理菜单中手动添加,2超级用户添加企业时生成,3系统自动添加)
   * @param type {Number} 类型(1管理员 2普通用户)与实际的type不一样
   * @param username {String} 用户名
   */
  constructor(address, departmentId, deviceId, email, lock, nickname, officePhone, password, phone, phoneCode, roleId, sex, source, type, username) {
    this.address = address;
    this.departmentId = departmentId;
    this.deviceId = deviceId;
    this.email = email;
    this.lock = lock;
    this.nickname = nickname;
    this.officePhone = officePhone;
    this.password = password;
    this.phone = phone;
    this.phoneCode = phoneCode;
    this.roleId = roleId;
    this.sex = sex;
    this.source = source;
    this.type = type;
    this.username = username;
  }


    static constructFromList(list) {
        let array = [new UserForm()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(UserForm.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>UserForm</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/UserForm} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/UserForm} The populated <code>UserForm</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UserForm();
      if (Reflect.has(data, 'address'))
        obj.address = ApiClient.convertToType(data['address'], 'String');
      if (Reflect.has(data, 'departmentId'))
        obj.departmentId = ApiClient.convertToType(data['departmentId'], 'String');
      if (Reflect.has(data, 'deviceId'))
        obj.deviceId = ApiClient.convertToType(data['deviceId'], 'String');
      if (Reflect.has(data, 'email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (Reflect.has(data, 'lock'))
        obj.lock = ApiClient.convertToType(data['lock'], 'Boolean');
      if (Reflect.has(data, 'nickname'))
        obj.nickname = ApiClient.convertToType(data['nickname'], 'String');
      if (Reflect.has(data, 'officePhone'))
        obj.officePhone = ApiClient.convertToType(data['officePhone'], 'String');
      if (Reflect.has(data, 'password'))
        obj.password = ApiClient.convertToType(data['password'], 'String');
      if (Reflect.has(data, 'phone'))
        obj.phone = ApiClient.convertToType(data['phone'], 'String');
      if (Reflect.has(data, 'phoneCode'))
        obj.phoneCode = ApiClient.convertToType(data['phoneCode'], 'String');
      if (Reflect.has(data, 'roleId'))
        obj.roleId = ApiClient.convertToType(data['roleId'], 'String');
      if (Reflect.has(data, 'sex'))
        obj.sex = ApiClient.convertToType(data['sex'], 'Number');
      if (Reflect.has(data, 'source'))
        obj.source = ApiClient.convertToType(data['source'], 'Number');
      if (Reflect.has(data, 'type'))
        obj.type = ApiClient.convertToType(data['type'], 'Number');
      if (Reflect.has(data, 'username'))
        obj.username = ApiClient.convertToType(data['username'], 'String');
    }
    return obj;
  }
}

/**
 * 地址
 * @member {String} address
 */
UserForm.prototype.address = undefined;

/**
 * 部门ID
 * @member {String} departmentId
 */
UserForm.prototype.departmentId = undefined;

/**
 * 图片验证码设备id
 * @member {String} deviceId
 */
UserForm.prototype.deviceId = undefined;

/**
 * 电子邮箱
 * @member {String} email
 */
UserForm.prototype.email = undefined;

/**
 * 账号是否锁定(1:锁定 0未锁定)
 * @member {Boolean} lock
 */
UserForm.prototype.lock = undefined;

/**
 * 昵称
 * @member {String} nickname
 */
UserForm.prototype.nickname = undefined;

/**
 * 办公电话
 * @member {String} officePhone
 */
UserForm.prototype.officePhone = undefined;

/**
 * 密码
 * @member {String} password
 */
UserForm.prototype.password = undefined;

/**
 * 手机号
 * @member {String} phone
 */
UserForm.prototype.phone = undefined;

/**
 * 手机验证码
 * @member {String} phoneCode
 */
UserForm.prototype.phoneCode = undefined;

/**
 * 角色ID
 * @member {String} roleId
 */
UserForm.prototype.roleId = undefined;

/**
 * 性别(0:男 1:女 2:未知)
 * @member {Number} sex
 */
UserForm.prototype.sex = undefined;

/**
 * 数据来源(0注册审核,1企业管理菜单中手动添加,2超级用户添加企业时生成,3系统自动添加)
 * @member {Number} source
 */
UserForm.prototype.source = undefined;

/**
 * 类型(1管理员 2普通用户)与实际的type不一样
 * @member {Number} type
 */
UserForm.prototype.type = undefined;

/**
 * 用户名
 * @member {String} username
 */
UserForm.prototype.username = undefined;


