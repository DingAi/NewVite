/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The PaymentRecord model module.
 * @module com.mn.sdk.model/PaymentRecord
 * @version 1.0
 */
export class PaymentRecord {
  /**
   * Constructs a new <code>PaymentRecord</code>.
   * @alias module:com.mn.sdk.model/PaymentRecord
   * @class
   * @param companyId {String} 企业id 
   * @param createdTime {Date} 订单创建时间
   * @param detail {String} 充值详情，iccid等
   * @param id {String} 订单id
   * @param mchId {String} 微信支付的商户号
   * @param money {Number} 缴费金额
   * @param orderCount {Number} 充值额度
   * @param orderType {String} 订单类型 1短信,2天气,3定位,4邮件,5流量,6语音 
   * @param packageName {String} 套餐名称 
   * @param payMethod {String} 充值的方式 0:微信
   * @param payTime {Date} 订单支付时间
   * @param status {String} 订单状态，0:失败，1:成功 
   * @param tradeType {String} 交易的类型
   */
  constructor(companyId, createdTime, detail, id, mchId, money, orderCount, orderType, packageName, payMethod, payTime, status, tradeType) {
    this.companyId = companyId;
    this.createdTime = createdTime;
    this.detail = detail;
    this.id = id;
    this.mchId = mchId;
    this.money = money;
    this.orderCount = orderCount;
    this.orderType = orderType;
    this.packageName = packageName;
    this.payMethod = payMethod;
    this.payTime = payTime;
    this.status = status;
    this.tradeType = tradeType;
  }


    static constructFromList(list) {
        let array = [new PaymentRecord()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(PaymentRecord.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>PaymentRecord</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/PaymentRecord} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/PaymentRecord} The populated <code>PaymentRecord</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PaymentRecord();
      if (Reflect.has(data, 'companyId'))
        obj.companyId = ApiClient.convertToType(data['companyId'], 'String');
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'Date');
      if (Reflect.has(data, 'detail'))
        obj.detail = ApiClient.convertToType(data['detail'], 'String');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'mchId'))
        obj.mchId = ApiClient.convertToType(data['mchId'], 'String');
      if (Reflect.has(data, 'money'))
        obj.money = ApiClient.convertToType(data['money'], 'Number');
      if (Reflect.has(data, 'orderCount'))
        obj.orderCount = ApiClient.convertToType(data['orderCount'], 'Number');
      if (Reflect.has(data, 'orderType'))
        obj.orderType = ApiClient.convertToType(data['orderType'], 'String');
      if (Reflect.has(data, 'packageName'))
        obj.packageName = ApiClient.convertToType(data['packageName'], 'String');
      if (Reflect.has(data, 'payMethod'))
        obj.payMethod = ApiClient.convertToType(data['payMethod'], 'String');
      if (Reflect.has(data, 'payTime'))
        obj.payTime = ApiClient.convertToType(data['payTime'], 'Date');
      if (Reflect.has(data, 'status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (Reflect.has(data, 'tradeType'))
        obj.tradeType = ApiClient.convertToType(data['tradeType'], 'String');
    }
    return obj;
  }
}

/**
 * 企业id 
 * @member {String} companyId
 */
PaymentRecord.prototype.companyId = undefined;

/**
 * 订单创建时间
 * @member {Date} createdTime
 */
PaymentRecord.prototype.createdTime = undefined;

/**
 * 充值详情，iccid等
 * @member {String} detail
 */
PaymentRecord.prototype.detail = undefined;

/**
 * 订单id
 * @member {String} id
 */
PaymentRecord.prototype.id = undefined;

/**
 * 微信支付的商户号
 * @member {String} mchId
 */
PaymentRecord.prototype.mchId = undefined;

/**
 * 缴费金额
 * @member {Number} money
 */
PaymentRecord.prototype.money = undefined;

/**
 * 充值额度
 * @member {Number} orderCount
 */
PaymentRecord.prototype.orderCount = undefined;

/**
 * 订单类型 1短信,2天气,3定位,4邮件,5流量,6语音 
 * @member {String} orderType
 */
PaymentRecord.prototype.orderType = undefined;

/**
 * 套餐名称 
 * @member {String} packageName
 */
PaymentRecord.prototype.packageName = undefined;

/**
 * 充值的方式 0:微信
 * @member {String} payMethod
 */
PaymentRecord.prototype.payMethod = undefined;

/**
 * 订单支付时间
 * @member {Date} payTime
 */
PaymentRecord.prototype.payTime = undefined;

/**
 * 订单状态，0:失败，1:成功 
 * @member {String} status
 */
PaymentRecord.prototype.status = undefined;

/**
 * 交易的类型
 * @member {String} tradeType
 */
PaymentRecord.prototype.tradeType = undefined;


