/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The UpdateProjectBoardForm model module.
 * @module com.mn.sdk.model/UpdateProjectBoardForm
 * @version 1.0
 */
export class UpdateProjectBoardForm {
  /**
   * Constructs a new <code>UpdateProjectBoardForm</code>.
   * 修改项目看板传输类
   * @alias module:com.mn.sdk.model/UpdateProjectBoardForm
   * @class
   * @param id {String} 项目看板Id
   * @param name {String} 项目看板名称
   * @param remark {String} 项目看板备注
   * @param sort {Number} 项目看板序列号
   * @param useEnable {Boolean} 是否使用项目看板 true:使用  false:不使用
   */
  constructor(id, name, remark, sort, useEnable) {
    this.id = id;
    this.name = name;
    this.remark = remark;
    this.sort = sort;
    this.useEnable = useEnable;
  }


    static constructFromList(list) {
        let array = [new UpdateProjectBoardForm()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(UpdateProjectBoardForm.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>UpdateProjectBoardForm</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/UpdateProjectBoardForm} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/UpdateProjectBoardForm} The populated <code>UpdateProjectBoardForm</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UpdateProjectBoardForm();
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'remark'))
        obj.remark = ApiClient.convertToType(data['remark'], 'String');
      if (Reflect.has(data, 'sort'))
        obj.sort = ApiClient.convertToType(data['sort'], 'Number');
      if (Reflect.has(data, 'useEnable'))
        obj.useEnable = ApiClient.convertToType(data['useEnable'], 'Boolean');
    }
    return obj;
  }
}

/**
 * 项目看板Id
 * @member {String} id
 */
UpdateProjectBoardForm.prototype.id = undefined;

/**
 * 项目看板名称
 * @member {String} name
 */
UpdateProjectBoardForm.prototype.name = undefined;

/**
 * 项目看板备注
 * @member {String} remark
 */
UpdateProjectBoardForm.prototype.remark = undefined;

/**
 * 项目看板序列号
 * @member {Number} sort
 */
UpdateProjectBoardForm.prototype.sort = undefined;

/**
 * 是否使用项目看板 true:使用  false:不使用
 * @member {Boolean} useEnable
 */
UpdateProjectBoardForm.prototype.useEnable = undefined;


