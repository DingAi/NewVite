/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The DeviceMonitorParam model module.
 * @module com.mn.sdk.model/DeviceMonitorParam
 * @version 1.0
 */
export class DeviceMonitorParam {
  /**
   * Constructs a new <code>DeviceMonitorParam</code>.
   * Device监控Param
   * @alias module:com.mn.sdk.model/DeviceMonitorParam
   * @class
   * @param currentPage {Number} 页码
   * @param pageSize {Number} 查询数量
   * @param projectIds {Array.<String>} 查询查询项目的ids
   * @param searchKey {String} 查询key
   * @param type {String} 获取Device的类型,项目设备:project 游离设备:free
   */
  constructor(currentPage, pageSize, projectIds, searchKey, type) {
    this.currentPage = currentPage;
    this.pageSize = pageSize;
    this.projectIds = projectIds;
    this.searchKey = searchKey;
    this.type = type;
  }


    static constructFromList(list) {
        let array = [new DeviceMonitorParam()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(DeviceMonitorParam.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>DeviceMonitorParam</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/DeviceMonitorParam} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/DeviceMonitorParam} The populated <code>DeviceMonitorParam</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DeviceMonitorParam();
      if (Reflect.has(data, 'currentPage'))
        obj.currentPage = ApiClient.convertToType(data['currentPage'], 'Number');
      if (Reflect.has(data, 'pageSize'))
        obj.pageSize = ApiClient.convertToType(data['pageSize'], 'Number');
      if (Reflect.has(data, 'projectIds'))
        obj.projectIds = ApiClient.convertToType(data['projectIds'], ['String']);
      if (Reflect.has(data, 'searchKey'))
        obj.searchKey = ApiClient.convertToType(data['searchKey'], 'String');
      if (Reflect.has(data, 'type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
    }
    return obj;
  }
}

/**
 * 页码
 * @member {Number} currentPage
 */
DeviceMonitorParam.prototype.currentPage = undefined;

/**
 * 查询数量
 * @member {Number} pageSize
 */
DeviceMonitorParam.prototype.pageSize = undefined;

/**
 * 查询查询项目的ids
 * @member {Array.<String>} projectIds
 */
DeviceMonitorParam.prototype.projectIds = undefined;

/**
 * 查询key
 * @member {String} searchKey
 */
DeviceMonitorParam.prototype.searchKey = undefined;

/**
 * 获取Device的类型,项目设备:project 游离设备:free
 * @member {String} type
 */
DeviceMonitorParam.prototype.type = undefined;


