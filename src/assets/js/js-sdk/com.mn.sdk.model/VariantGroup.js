/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The VariantGroup model module.
 * @module com.mn.sdk.model/VariantGroup
 * @version 1.0
 */
export class VariantGroup {
  /**
   * Constructs a new <code>VariantGroup</code>.
   * 变量组Pojo类
   * @alias module:com.mn.sdk.model/VariantGroup
   * @class
   * @param deviceId {String} 虚拟设备Id
   * @param groupId {Number} 变量组Id
   * @param id {String} 变量组唯一Id
   * @param name {String} 变量组名称
   * @param sortNo {Number} 变量组排序号
   */
  constructor(deviceId, groupId, id, name, sortNo) {
    this.deviceId = deviceId;
    this.groupId = groupId;
    this.id = id;
    this.name = name;
    this.sortNo = sortNo;
  }


    static constructFromList(list) {
        let array = [new VariantGroup()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(VariantGroup.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>VariantGroup</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/VariantGroup} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/VariantGroup} The populated <code>VariantGroup</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new VariantGroup();
      if (Reflect.has(data, 'deviceId'))
        obj.deviceId = ApiClient.convertToType(data['deviceId'], 'String');
      if (Reflect.has(data, 'groupId'))
        obj.groupId = ApiClient.convertToType(data['groupId'], 'Number');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'sortNo'))
        obj.sortNo = ApiClient.convertToType(data['sortNo'], 'Number');
    }
    return obj;
  }
}

/**
 * 虚拟设备Id
 * @member {String} deviceId
 */
VariantGroup.prototype.deviceId = undefined;

/**
 * 变量组Id
 * @member {Number} groupId
 */
VariantGroup.prototype.groupId = undefined;

/**
 * 变量组唯一Id
 * @member {String} id
 */
VariantGroup.prototype.id = undefined;

/**
 * 变量组名称
 * @member {String} name
 */
VariantGroup.prototype.name = undefined;

/**
 * 变量组排序号
 * @member {Number} sortNo
 */
VariantGroup.prototype.sortNo = undefined;


