/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The VariantIndexForm model module.
 * @module com.mn.sdk.model/VariantIndexForm
 * @version 1.0
 */
export class VariantIndexForm {
  /**
   * Constructs a new <code>VariantIndexForm</code>.
   * 维护变量指标 Form
   * @alias module:com.mn.sdk.model/VariantIndexForm
   * @class
   * @param deviceId {String} 设备Id
   * @param operateType {String} add/del（新增变量指标或 删除变量指标）
   * @param resourceId {String} 模板/项目Id
   * @param resourceType {String} project/template
   * @param variantId {Number} 变量Id
   * @param variantIndex {String} 变量指标
   */
  constructor(deviceId, operateType, resourceId, resourceType, variantId, variantIndex) {
    this.deviceId = deviceId;
    this.operateType = operateType;
    this.resourceId = resourceId;
    this.resourceType = resourceType;
    this.variantId = variantId;
    this.variantIndex = variantIndex;
  }


    static constructFromList(list) {
        let array = [new VariantIndexForm()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(VariantIndexForm.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>VariantIndexForm</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/VariantIndexForm} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/VariantIndexForm} The populated <code>VariantIndexForm</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new VariantIndexForm();
      if (Reflect.has(data, 'deviceId'))
        obj.deviceId = ApiClient.convertToType(data['deviceId'], 'String');
      if (Reflect.has(data, 'operateType'))
        obj.operateType = ApiClient.convertToType(data['operateType'], 'String');
      if (Reflect.has(data, 'resourceId'))
        obj.resourceId = ApiClient.convertToType(data['resourceId'], 'String');
      if (Reflect.has(data, 'resourceType'))
        obj.resourceType = ApiClient.convertToType(data['resourceType'], 'String');
      if (Reflect.has(data, 'variantId'))
        obj.variantId = ApiClient.convertToType(data['variantId'], 'Number');
      if (Reflect.has(data, 'variantIndex'))
        obj.variantIndex = ApiClient.convertToType(data['variantIndex'], 'String');
    }
    return obj;
  }
}

/**
 * 设备Id
 * @member {String} deviceId
 */
VariantIndexForm.prototype.deviceId = undefined;

/**
 * add/del（新增变量指标或 删除变量指标）
 * @member {String} operateType
 */
VariantIndexForm.prototype.operateType = undefined;

/**
 * 模板/项目Id
 * @member {String} resourceId
 */
VariantIndexForm.prototype.resourceId = undefined;

/**
 * project/template
 * @member {String} resourceType
 */
VariantIndexForm.prototype.resourceType = undefined;

/**
 * 变量Id
 * @member {Number} variantId
 */
VariantIndexForm.prototype.variantId = undefined;

/**
 * 变量指标
 * @member {String} variantIndex
 */
VariantIndexForm.prototype.variantIndex = undefined;


