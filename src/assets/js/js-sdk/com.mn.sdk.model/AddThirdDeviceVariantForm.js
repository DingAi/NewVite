/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The AddThirdDeviceVariantForm model module.
 * @module com.mn.sdk.model/AddThirdDeviceVariantForm
 * @version 1.0
 */
export class AddThirdDeviceVariantForm {
  /**
   * Constructs a new <code>AddThirdDeviceVariantForm</code>.
   * 增加第三方设备变量form
   * @alias module:com.mn.sdk.model/AddThirdDeviceVariantForm
   * @class
   * @param addDataType {String} 数据类型
   * @param addEnableLinear {String} 是否启用线性换算
   * @param addGroupId {String} 变量分组id
   * @param addInputMax {String} 输入最大值
   * @param addInputMin {String} 输入最小值
   * @param addJoinName {String} 对接名称
   * @param addOutDataType {String} 输出数据类型
   * @param addOutMax {String} 输出最大值
   * @param addOutMin {String} 输出最小值
   * @param addSaveType {String} 存储类型
   * @param addSaveValue {String} 
   * @param addVariantLevel {String} 安全配置级别
   * @param addVariantName {String} 变量名称
   * @param addVariantUnit {String} 单位
   * @param addWriteable {String} 读写类型
   * @param thirdDeviceId {String} 第三方设备id
   */
  constructor(addDataType, addEnableLinear, addGroupId, addInputMax, addInputMin, addJoinName, addOutDataType, addOutMax, addOutMin, addSaveType, addSaveValue, addVariantLevel, addVariantName, addVariantUnit, addWriteable, thirdDeviceId) {
    this.addDataType = addDataType;
    this.addEnableLinear = addEnableLinear;
    this.addGroupId = addGroupId;
    this.addInputMax = addInputMax;
    this.addInputMin = addInputMin;
    this.addJoinName = addJoinName;
    this.addOutDataType = addOutDataType;
    this.addOutMax = addOutMax;
    this.addOutMin = addOutMin;
    this.addSaveType = addSaveType;
    this.addSaveValue = addSaveValue;
    this.addVariantLevel = addVariantLevel;
    this.addVariantName = addVariantName;
    this.addVariantUnit = addVariantUnit;
    this.addWriteable = addWriteable;
    this.thirdDeviceId = thirdDeviceId;
  }


    static constructFromList(list) {
        let array = [new AddThirdDeviceVariantForm()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(AddThirdDeviceVariantForm.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>AddThirdDeviceVariantForm</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/AddThirdDeviceVariantForm} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/AddThirdDeviceVariantForm} The populated <code>AddThirdDeviceVariantForm</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AddThirdDeviceVariantForm();
      if (Reflect.has(data, 'addDataType'))
        obj.addDataType = ApiClient.convertToType(data['addDataType'], 'String');
      if (Reflect.has(data, 'addEnableLinear'))
        obj.addEnableLinear = ApiClient.convertToType(data['addEnableLinear'], 'String');
      if (Reflect.has(data, 'addGroupId'))
        obj.addGroupId = ApiClient.convertToType(data['addGroupId'], 'String');
      if (Reflect.has(data, 'addInputMax'))
        obj.addInputMax = ApiClient.convertToType(data['addInputMax'], 'String');
      if (Reflect.has(data, 'addInputMin'))
        obj.addInputMin = ApiClient.convertToType(data['addInputMin'], 'String');
      if (Reflect.has(data, 'addJoinName'))
        obj.addJoinName = ApiClient.convertToType(data['addJoinName'], 'String');
      if (Reflect.has(data, 'addOutDataType'))
        obj.addOutDataType = ApiClient.convertToType(data['addOutDataType'], 'String');
      if (Reflect.has(data, 'addOutMax'))
        obj.addOutMax = ApiClient.convertToType(data['addOutMax'], 'String');
      if (Reflect.has(data, 'addOutMin'))
        obj.addOutMin = ApiClient.convertToType(data['addOutMin'], 'String');
      if (Reflect.has(data, 'addSaveType'))
        obj.addSaveType = ApiClient.convertToType(data['addSaveType'], 'String');
      if (Reflect.has(data, 'addSaveValue'))
        obj.addSaveValue = ApiClient.convertToType(data['addSaveValue'], 'String');
      if (Reflect.has(data, 'addVariantLevel'))
        obj.addVariantLevel = ApiClient.convertToType(data['addVariantLevel'], 'String');
      if (Reflect.has(data, 'addVariantName'))
        obj.addVariantName = ApiClient.convertToType(data['addVariantName'], 'String');
      if (Reflect.has(data, 'addVariantUnit'))
        obj.addVariantUnit = ApiClient.convertToType(data['addVariantUnit'], 'String');
      if (Reflect.has(data, 'addWriteable'))
        obj.addWriteable = ApiClient.convertToType(data['addWriteable'], 'String');
      if (Reflect.has(data, 'thirdDeviceId'))
        obj.thirdDeviceId = ApiClient.convertToType(data['thirdDeviceId'], 'String');
    }
    return obj;
  }
}

/**
 * 数据类型
 * @member {String} addDataType
 */
AddThirdDeviceVariantForm.prototype.addDataType = undefined;

/**
 * 是否启用线性换算
 * @member {String} addEnableLinear
 */
AddThirdDeviceVariantForm.prototype.addEnableLinear = undefined;

/**
 * 变量分组id
 * @member {String} addGroupId
 */
AddThirdDeviceVariantForm.prototype.addGroupId = undefined;

/**
 * 输入最大值
 * @member {String} addInputMax
 */
AddThirdDeviceVariantForm.prototype.addInputMax = undefined;

/**
 * 输入最小值
 * @member {String} addInputMin
 */
AddThirdDeviceVariantForm.prototype.addInputMin = undefined;

/**
 * 对接名称
 * @member {String} addJoinName
 */
AddThirdDeviceVariantForm.prototype.addJoinName = undefined;

/**
 * 输出数据类型
 * @member {String} addOutDataType
 */
AddThirdDeviceVariantForm.prototype.addOutDataType = undefined;

/**
 * 输出最大值
 * @member {String} addOutMax
 */
AddThirdDeviceVariantForm.prototype.addOutMax = undefined;

/**
 * 输出最小值
 * @member {String} addOutMin
 */
AddThirdDeviceVariantForm.prototype.addOutMin = undefined;

/**
 * 存储类型
 * @member {String} addSaveType
 */
AddThirdDeviceVariantForm.prototype.addSaveType = undefined;

/**
 * @member {String} addSaveValue
 */
AddThirdDeviceVariantForm.prototype.addSaveValue = undefined;

/**
 * 安全配置级别
 * @member {String} addVariantLevel
 */
AddThirdDeviceVariantForm.prototype.addVariantLevel = undefined;

/**
 * 变量名称
 * @member {String} addVariantName
 */
AddThirdDeviceVariantForm.prototype.addVariantName = undefined;

/**
 * 单位
 * @member {String} addVariantUnit
 */
AddThirdDeviceVariantForm.prototype.addVariantUnit = undefined;

/**
 * 读写类型
 * @member {String} addWriteable
 */
AddThirdDeviceVariantForm.prototype.addWriteable = undefined;

/**
 * 第三方设备id
 * @member {String} thirdDeviceId
 */
AddThirdDeviceVariantForm.prototype.thirdDeviceId = undefined;


