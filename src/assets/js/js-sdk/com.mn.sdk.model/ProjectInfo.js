/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ProjectInfo model module.
 * @module com.mn.sdk.model/ProjectInfo
 * @version 1.0
 */
export class ProjectInfo {
  /**
   * Constructs a new <code>ProjectInfo</code>.
   * @alias module:com.mn.sdk.model/ProjectInfo
   * @class
   * @param deviceFrom {String} 设备来源； 0：内部的设备，1：第三方的设备
   * @param locationType {Number} 定位方式（1：手动，2：基站定位，3：GPS定位，0：关闭）
   * @param projectId {String} 项目ID
   * @param projectType {Number} 项目类型 0：自由项目，1：引用模板项目
   * @param templateId {String} 模板Id,自由项目为空
   * @param templateName {String} 模板名称,自由项目为空
   */
  constructor(deviceFrom, locationType, projectId, projectType, templateId, templateName) {
    this.deviceFrom = deviceFrom;
    this.locationType = locationType;
    this.projectId = projectId;
    this.projectType = projectType;
    this.templateId = templateId;
    this.templateName = templateName;
  }


    static constructFromList(list) {
        let array = [new ProjectInfo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(ProjectInfo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>ProjectInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/ProjectInfo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/ProjectInfo} The populated <code>ProjectInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ProjectInfo();
      if (Reflect.has(data, 'deviceFrom'))
        obj.deviceFrom = ApiClient.convertToType(data['deviceFrom'], 'String');
      if (Reflect.has(data, 'locationType'))
        obj.locationType = ApiClient.convertToType(data['locationType'], 'Number');
      if (Reflect.has(data, 'projectId'))
        obj.projectId = ApiClient.convertToType(data['projectId'], 'String');
      if (Reflect.has(data, 'projectType'))
        obj.projectType = ApiClient.convertToType(data['projectType'], 'Number');
      if (Reflect.has(data, 'templateId'))
        obj.templateId = ApiClient.convertToType(data['templateId'], 'String');
      if (Reflect.has(data, 'templateName'))
        obj.templateName = ApiClient.convertToType(data['templateName'], 'String');
    }
    return obj;
  }
}

/**
 * 设备来源； 0：内部的设备，1：第三方的设备
 * @member {String} deviceFrom
 */
ProjectInfo.prototype.deviceFrom = undefined;

/**
 * 定位方式（1：手动，2：基站定位，3：GPS定位，0：关闭）
 * @member {Number} locationType
 */
ProjectInfo.prototype.locationType = undefined;

/**
 * 项目ID
 * @member {String} projectId
 */
ProjectInfo.prototype.projectId = undefined;

/**
 * 项目类型 0：自由项目，1：引用模板项目
 * @member {Number} projectType
 */
ProjectInfo.prototype.projectType = undefined;

/**
 * 模板Id,自由项目为空
 * @member {String} templateId
 */
ProjectInfo.prototype.templateId = undefined;

/**
 * 模板名称,自由项目为空
 * @member {String} templateName
 */
ProjectInfo.prototype.templateName = undefined;


