/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The LoginAppUser model module.
 * @module com.mn.sdk.model/LoginAppUser
 * @version 1.0
 */
export class LoginAppUser {
  /**
   * Constructs a new <code>LoginAppUser</code>.
   * 系统用户
   * @alias module:com.mn.sdk.model/LoginAppUser
   * @class
   * @param accountNonExpired {Boolean} 
   * @param accountNonLocked {Boolean} 
   * @param address {String} 地址
   * @param avatar {String} 头像地址
   * @param companyId {String} 企业标识
   * @param createdBy {String} 创建人
   * @param createdTime {Date} 创建时间
   * @param credentialsNonExpired {Boolean} 
   * @param departmentId {String} 部门标识
   * @param email {String} 邮箱
   * @param enabled {Boolean} 是否启用(1是 0否)
   * @param id {String} 主键id
   * @param lock {Boolean} 账号是否锁定(1:锁定 0:未锁定)
   * @param nickname {String} 昵称
   * @param officePhone {String} 办公号码
   * @param password {String} 密码
   * @param permission {Array.<String>} 
   * @param phone {String} 手机号
   * @param phoneCode {String} 
   * @param remark {String} 备注
   * @param resource {Array.<String>} 
   * @param sex {Number} 性别(0:男 1:女 2:未知)
   * @param sid {String} 二次开发访问密钥
   * @param source {Number} 用户来源(0:注册 1:企业手动添加 2:超管审核添加 3:系统自动添加)
   * @param type {Number} 类型 0超级管理员(super),1超级企业管理员2企业管理员,3企业用户,4部门管理员 5部门用户
   * @param updatedTime {Date} 更新时间
   * @param userId {String} 
   * @param username {String} 用户名
   */
  constructor(accountNonExpired, accountNonLocked, address, avatar, companyId, createdBy, createdTime, credentialsNonExpired, departmentId, email, enabled, id, lock, nickname, officePhone, password, permission, phone, phoneCode, remark, resource, sex, sid, source, type, updatedTime, userId, username) {
    this.accountNonExpired = accountNonExpired;
    this.accountNonLocked = accountNonLocked;
    this.address = address;
    this.avatar = avatar;
    this.companyId = companyId;
    this.createdBy = createdBy;
    this.createdTime = createdTime;
    this.credentialsNonExpired = credentialsNonExpired;
    this.departmentId = departmentId;
    this.email = email;
    this.enabled = enabled;
    this.id = id;
    this.lock = lock;
    this.nickname = nickname;
    this.officePhone = officePhone;
    this.password = password;
    this.permission = permission;
    this.phone = phone;
    this.phoneCode = phoneCode;
    this.remark = remark;
    this.resource = resource;
    this.sex = sex;
    this.sid = sid;
    this.source = source;
    this.type = type;
    this.updatedTime = updatedTime;
    this.userId = userId;
    this.username = username;
  }


    static constructFromList(list) {
        let array = [new LoginAppUser()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(LoginAppUser.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>LoginAppUser</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/LoginAppUser} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/LoginAppUser} The populated <code>LoginAppUser</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new LoginAppUser();
      if (Reflect.has(data, 'accountNonExpired'))
        obj.accountNonExpired = ApiClient.convertToType(data['accountNonExpired'], 'Boolean');
      if (Reflect.has(data, 'accountNonLocked'))
        obj.accountNonLocked = ApiClient.convertToType(data['accountNonLocked'], 'Boolean');
      if (Reflect.has(data, 'address'))
        obj.address = ApiClient.convertToType(data['address'], 'String');
      if (Reflect.has(data, 'avatar'))
        obj.avatar = ApiClient.convertToType(data['avatar'], 'String');
      if (Reflect.has(data, 'companyId'))
        obj.companyId = ApiClient.convertToType(data['companyId'], 'String');
      if (Reflect.has(data, 'createdBy'))
        obj.createdBy = ApiClient.convertToType(data['createdBy'], 'String');
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'Date');
      if (Reflect.has(data, 'credentialsNonExpired'))
        obj.credentialsNonExpired = ApiClient.convertToType(data['credentialsNonExpired'], 'Boolean');
      if (Reflect.has(data, 'departmentId'))
        obj.departmentId = ApiClient.convertToType(data['departmentId'], 'String');
      if (Reflect.has(data, 'email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (Reflect.has(data, 'enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'lock'))
        obj.lock = ApiClient.convertToType(data['lock'], 'Boolean');
      if (Reflect.has(data, 'nickname'))
        obj.nickname = ApiClient.convertToType(data['nickname'], 'String');
      if (Reflect.has(data, 'officePhone'))
        obj.officePhone = ApiClient.convertToType(data['officePhone'], 'String');
      if (Reflect.has(data, 'password'))
        obj.password = ApiClient.convertToType(data['password'], 'String');
      if (Reflect.has(data, 'permission'))
        obj.permission = ApiClient.convertToType(data['permission'], ['String']);
      if (Reflect.has(data, 'phone'))
        obj.phone = ApiClient.convertToType(data['phone'], 'String');
      if (Reflect.has(data, 'phoneCode'))
        obj.phoneCode = ApiClient.convertToType(data['phoneCode'], 'String');
      if (Reflect.has(data, 'remark'))
        obj.remark = ApiClient.convertToType(data['remark'], 'String');
      if (Reflect.has(data, 'resource'))
        obj.resource = ApiClient.convertToType(data['resource'], ['String']);
      if (Reflect.has(data, 'sex'))
        obj.sex = ApiClient.convertToType(data['sex'], 'Number');
      if (Reflect.has(data, 'sid'))
        obj.sid = ApiClient.convertToType(data['sid'], 'String');
      if (Reflect.has(data, 'source'))
        obj.source = ApiClient.convertToType(data['source'], 'Number');
      if (Reflect.has(data, 'type'))
        obj.type = ApiClient.convertToType(data['type'], 'Number');
      if (Reflect.has(data, 'updatedTime'))
        obj.updatedTime = ApiClient.convertToType(data['updatedTime'], 'Date');
      if (Reflect.has(data, 'userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'String');
      if (Reflect.has(data, 'username'))
        obj.username = ApiClient.convertToType(data['username'], 'String');
    }
    return obj;
  }
}

/**
 * @member {Boolean} accountNonExpired
 */
LoginAppUser.prototype.accountNonExpired = undefined;

/**
 * @member {Boolean} accountNonLocked
 */
LoginAppUser.prototype.accountNonLocked = undefined;

/**
 * 地址
 * @member {String} address
 */
LoginAppUser.prototype.address = undefined;

/**
 * 头像地址
 * @member {String} avatar
 */
LoginAppUser.prototype.avatar = undefined;

/**
 * 企业标识
 * @member {String} companyId
 */
LoginAppUser.prototype.companyId = undefined;

/**
 * 创建人
 * @member {String} createdBy
 */
LoginAppUser.prototype.createdBy = undefined;

/**
 * 创建时间
 * @member {Date} createdTime
 */
LoginAppUser.prototype.createdTime = undefined;

/**
 * @member {Boolean} credentialsNonExpired
 */
LoginAppUser.prototype.credentialsNonExpired = undefined;

/**
 * 部门标识
 * @member {String} departmentId
 */
LoginAppUser.prototype.departmentId = undefined;

/**
 * 邮箱
 * @member {String} email
 */
LoginAppUser.prototype.email = undefined;

/**
 * 是否启用(1是 0否)
 * @member {Boolean} enabled
 */
LoginAppUser.prototype.enabled = undefined;

/**
 * 主键id
 * @member {String} id
 */
LoginAppUser.prototype.id = undefined;

/**
 * 账号是否锁定(1:锁定 0:未锁定)
 * @member {Boolean} lock
 */
LoginAppUser.prototype.lock = undefined;

/**
 * 昵称
 * @member {String} nickname
 */
LoginAppUser.prototype.nickname = undefined;

/**
 * 办公号码
 * @member {String} officePhone
 */
LoginAppUser.prototype.officePhone = undefined;

/**
 * 密码
 * @member {String} password
 */
LoginAppUser.prototype.password = undefined;

/**
 * @member {Array.<String>} permission
 */
LoginAppUser.prototype.permission = undefined;

/**
 * 手机号
 * @member {String} phone
 */
LoginAppUser.prototype.phone = undefined;

/**
 * @member {String} phoneCode
 */
LoginAppUser.prototype.phoneCode = undefined;

/**
 * 备注
 * @member {String} remark
 */
LoginAppUser.prototype.remark = undefined;

/**
 * @member {Array.<String>} resource
 */
LoginAppUser.prototype.resource = undefined;

/**
 * 性别(0:男 1:女 2:未知)
 * @member {Number} sex
 */
LoginAppUser.prototype.sex = undefined;

/**
 * 二次开发访问密钥
 * @member {String} sid
 */
LoginAppUser.prototype.sid = undefined;

/**
 * 用户来源(0:注册 1:企业手动添加 2:超管审核添加 3:系统自动添加)
 * @member {Number} source
 */
LoginAppUser.prototype.source = undefined;

/**
 * 类型 0超级管理员(super),1超级企业管理员2企业管理员,3企业用户,4部门管理员 5部门用户
 * @member {Number} type
 */
LoginAppUser.prototype.type = undefined;

/**
 * 更新时间
 * @member {Date} updatedTime
 */
LoginAppUser.prototype.updatedTime = undefined;

/**
 * @member {String} userId
 */
LoginAppUser.prototype.userId = undefined;

/**
 * 用户名
 * @member {String} username
 */
LoginAppUser.prototype.username = undefined;


