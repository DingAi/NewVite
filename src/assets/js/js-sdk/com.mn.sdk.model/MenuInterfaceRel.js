/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The MenuInterfaceRel model module.
 * @module com.mn.sdk.model/MenuInterfaceRel
 * @version 1.0
 */
export class MenuInterfaceRel {
  /**
   * Constructs a new <code>MenuInterfaceRel</code>.
   * 菜单接口关联
   * @alias module:com.mn.sdk.model/MenuInterfaceRel
   * @class
   * @param createdTime {Date} 创建时间
   * @param disabled {Boolean} 
   * @param explicitGrant {Boolean} 是否参与显式的授权（即是否在角色管理的权限树中显示），1是，0否
   * @param interfaceId {String} 接口Id
   * @param interfaceName {String} 
   * @param interfacePath {String} 
   * @param interfacePathMethod {String} 
   * @param menuId {String} 菜单Id
   * @param menuOrInterface {String} 
   * @param updatedTime {Date} 修改时间
   */
  constructor(createdTime, disabled, explicitGrant, interfaceId, interfaceName, interfacePath, interfacePathMethod, menuId, menuOrInterface, updatedTime) {
    this.createdTime = createdTime;
    this.disabled = disabled;
    this.explicitGrant = explicitGrant;
    this.interfaceId = interfaceId;
    this.interfaceName = interfaceName;
    this.interfacePath = interfacePath;
    this.interfacePathMethod = interfacePathMethod;
    this.menuId = menuId;
    this.menuOrInterface = menuOrInterface;
    this.updatedTime = updatedTime;
  }


    static constructFromList(list) {
        let array = [new MenuInterfaceRel()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(MenuInterfaceRel.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>MenuInterfaceRel</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/MenuInterfaceRel} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/MenuInterfaceRel} The populated <code>MenuInterfaceRel</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MenuInterfaceRel();
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'Date');
      if (Reflect.has(data, 'disabled'))
        obj.disabled = ApiClient.convertToType(data['disabled'], 'Boolean');
      if (Reflect.has(data, 'explicitGrant'))
        obj.explicitGrant = ApiClient.convertToType(data['explicitGrant'], 'Boolean');
      if (Reflect.has(data, 'interfaceId'))
        obj.interfaceId = ApiClient.convertToType(data['interfaceId'], 'String');
      if (Reflect.has(data, 'interfaceName'))
        obj.interfaceName = ApiClient.convertToType(data['interfaceName'], 'String');
      if (Reflect.has(data, 'interfacePath'))
        obj.interfacePath = ApiClient.convertToType(data['interfacePath'], 'String');
      if (Reflect.has(data, 'interfacePathMethod'))
        obj.interfacePathMethod = ApiClient.convertToType(data['interfacePathMethod'], 'String');
      if (Reflect.has(data, 'menuId'))
        obj.menuId = ApiClient.convertToType(data['menuId'], 'String');
      if (Reflect.has(data, 'menuOrInterface'))
        obj.menuOrInterface = ApiClient.convertToType(data['menuOrInterface'], 'String');
      if (Reflect.has(data, 'updatedTime'))
        obj.updatedTime = ApiClient.convertToType(data['updatedTime'], 'Date');
    }
    return obj;
  }
}

/**
 * 创建时间
 * @member {Date} createdTime
 */
MenuInterfaceRel.prototype.createdTime = undefined;

/**
 * @member {Boolean} disabled
 */
MenuInterfaceRel.prototype.disabled = undefined;

/**
 * 是否参与显式的授权（即是否在角色管理的权限树中显示），1是，0否
 * @member {Boolean} explicitGrant
 */
MenuInterfaceRel.prototype.explicitGrant = undefined;

/**
 * 接口Id
 * @member {String} interfaceId
 */
MenuInterfaceRel.prototype.interfaceId = undefined;

/**
 * @member {String} interfaceName
 */
MenuInterfaceRel.prototype.interfaceName = undefined;

/**
 * @member {String} interfacePath
 */
MenuInterfaceRel.prototype.interfacePath = undefined;

/**
 * @member {String} interfacePathMethod
 */
MenuInterfaceRel.prototype.interfacePathMethod = undefined;

/**
 * 菜单Id
 * @member {String} menuId
 */
MenuInterfaceRel.prototype.menuId = undefined;

/**
 * @member {String} menuOrInterface
 */
MenuInterfaceRel.prototype.menuOrInterface = undefined;

/**
 * 修改时间
 * @member {Date} updatedTime
 */
MenuInterfaceRel.prototype.updatedTime = undefined;


