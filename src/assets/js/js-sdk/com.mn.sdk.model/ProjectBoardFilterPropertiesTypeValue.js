/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ProjectBoardFilterPropertiesTypeValue model module.
 * @module com.mn.sdk.model/ProjectBoardFilterPropertiesTypeValue
 * @version 1.0
 */
export class ProjectBoardFilterPropertiesTypeValue {
  /**
   * Constructs a new <code>ProjectBoardFilterPropertiesTypeValue</code>.
   * 过滤分组类型和值
   * @alias module:com.mn.sdk.model/ProjectBoardFilterPropertiesTypeValue
   * @class
   * @param propertiesId {String} 属性类型的id
   * @param type {String} 过滤分组类型（类型：['0: 省', '1: 市', '2: 区', '3: 客户', '4: 年', '5:月', '6:属性']
   * @param value {String} 过滤分组类值 值为类型 （类型为 属性或客户 值=对应的Id）
   */
  constructor(propertiesId, type, value) {
    this.propertiesId = propertiesId;
    this.type = type;
    this.value = value;
  }


    static constructFromList(list) {
        let array = [new ProjectBoardFilterPropertiesTypeValue()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(ProjectBoardFilterPropertiesTypeValue.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>ProjectBoardFilterPropertiesTypeValue</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/ProjectBoardFilterPropertiesTypeValue} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/ProjectBoardFilterPropertiesTypeValue} The populated <code>ProjectBoardFilterPropertiesTypeValue</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ProjectBoardFilterPropertiesTypeValue();
      if (Reflect.has(data, 'propertiesId'))
        obj.propertiesId = ApiClient.convertToType(data['propertiesId'], 'String');
      if (Reflect.has(data, 'type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (Reflect.has(data, 'value'))
        obj.value = ApiClient.convertToType(data['value'], 'String');
    }
    return obj;
  }
}

/**
 * 属性类型的id
 * @member {String} propertiesId
 */
ProjectBoardFilterPropertiesTypeValue.prototype.propertiesId = undefined;

/**
 * 过滤分组类型（类型：['0: 省', '1: 市', '2: 区', '3: 客户', '4: 年', '5:月', '6:属性']
 * @member {String} type
 */
ProjectBoardFilterPropertiesTypeValue.prototype.type = undefined;

/**
 * 过滤分组类值 值为类型 （类型为 属性或客户 值=对应的Id）
 * @member {String} value
 */
ProjectBoardFilterPropertiesTypeValue.prototype.value = undefined;


