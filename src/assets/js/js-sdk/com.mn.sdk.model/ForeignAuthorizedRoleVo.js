/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ForeignAuthorizedRoleVo model module.
 * @module com.mn.sdk.model/ForeignAuthorizedRoleVo
 * @version 1.0
 */
export class ForeignAuthorizedRoleVo {
  /**
   * Constructs a new <code>ForeignAuthorizedRoleVo</code>.
   * 用于客户授权项目的角色列表
   * @alias module:com.mn.sdk.model/ForeignAuthorizedRoleVo
   * @class
   * @param id {String} 角色id
   * @param levelCheck {String} 当前绑定的变量类别
   * @param levelCheckIds {String} 角色有查看变量的类别
   * @param levelControl {String} 当前绑定的控制类别
   * @param levelControlIds {String} 角色控制类别的id集合
   * @param roleName {String} 角色id
   */
  constructor(id, levelCheck, levelCheckIds, levelControl, levelControlIds, roleName) {
    this.id = id;
    this.levelCheck = levelCheck;
    this.levelCheckIds = levelCheckIds;
    this.levelControl = levelControl;
    this.levelControlIds = levelControlIds;
    this.roleName = roleName;
  }


    static constructFromList(list) {
        let array = [new ForeignAuthorizedRoleVo()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(ForeignAuthorizedRoleVo.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>ForeignAuthorizedRoleVo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/ForeignAuthorizedRoleVo} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/ForeignAuthorizedRoleVo} The populated <code>ForeignAuthorizedRoleVo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ForeignAuthorizedRoleVo();
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'levelCheck'))
        obj.levelCheck = ApiClient.convertToType(data['levelCheck'], 'String');
      if (Reflect.has(data, 'levelCheckIds'))
        obj.levelCheckIds = ApiClient.convertToType(data['levelCheckIds'], 'String');
      if (Reflect.has(data, 'levelControl'))
        obj.levelControl = ApiClient.convertToType(data['levelControl'], 'String');
      if (Reflect.has(data, 'levelControlIds'))
        obj.levelControlIds = ApiClient.convertToType(data['levelControlIds'], 'String');
      if (Reflect.has(data, 'roleName'))
        obj.roleName = ApiClient.convertToType(data['roleName'], 'String');
    }
    return obj;
  }
}

/**
 * 角色id
 * @member {String} id
 */
ForeignAuthorizedRoleVo.prototype.id = undefined;

/**
 * 当前绑定的变量类别
 * @member {String} levelCheck
 */
ForeignAuthorizedRoleVo.prototype.levelCheck = undefined;

/**
 * 角色有查看变量的类别
 * @member {String} levelCheckIds
 */
ForeignAuthorizedRoleVo.prototype.levelCheckIds = undefined;

/**
 * 当前绑定的控制类别
 * @member {String} levelControl
 */
ForeignAuthorizedRoleVo.prototype.levelControl = undefined;

/**
 * 角色控制类别的id集合
 * @member {String} levelControlIds
 */
ForeignAuthorizedRoleVo.prototype.levelControlIds = undefined;

/**
 * 角色id
 * @member {String} roleName
 */
ForeignAuthorizedRoleVo.prototype.roleName = undefined;


