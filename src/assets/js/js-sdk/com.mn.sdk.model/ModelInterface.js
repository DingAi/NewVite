/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient';

/**
 * The ModelInterface model module.
 * @module com.mn.sdk.model/ModelInterface
 * @version 1.0
 */
export class ModelInterface {
  /**
   * Constructs a new <code>ModelInterface</code>.
   * 接口
   * @alias module:com.mn.sdk.model/ModelInterface
   * @class
   * @param createdTime {Date} 创建时间
   * @param description {String} 接口描述
   * @param id {String} 主键
   * @param name {String} 接口名称
   * @param path {String} 接口路径
   * @param pathMethod {String} 接口类型：get/post
   * @param tag {String} 接口所属标签，用于分类
   * @param updatedTime {Date} 修改时间
   * @param version {String} 该接口对应平台版本
   */
  constructor(createdTime, description, id, name, path, pathMethod, tag, updatedTime, version) {
    this.createdTime = createdTime;
    this.description = description;
    this.id = id;
    this.name = name;
    this.path = path;
    this.pathMethod = pathMethod;
    this.tag = tag;
    this.updatedTime = updatedTime;
    this.version = version;
  }


    static constructFromList(list) {
        let array = [new ModelInterface()];
        array.splice(0, array.length);

        if (!(list instanceof Array)) {
            return array;
        }

        for (const obj of list) {
            array.push(ModelInterface.constructFromObject(obj));
        }

        return array;
    }


  /**
   * Constructs a <code>ModelInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.mn.sdk.model/ModelInterface} obj Optional instance to populate.
   * @return {module:com.mn.sdk.model/ModelInterface} The populated <code>ModelInterface</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ModelInterface();
      if (Reflect.has(data, 'createdTime'))
        obj.createdTime = ApiClient.convertToType(data['createdTime'], 'Date');
      if (Reflect.has(data, 'description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (Reflect.has(data, 'id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (Reflect.has(data, 'name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (Reflect.has(data, 'path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (Reflect.has(data, 'pathMethod'))
        obj.pathMethod = ApiClient.convertToType(data['pathMethod'], 'String');
      if (Reflect.has(data, 'tag'))
        obj.tag = ApiClient.convertToType(data['tag'], 'String');
      if (Reflect.has(data, 'updatedTime'))
        obj.updatedTime = ApiClient.convertToType(data['updatedTime'], 'Date');
      if (Reflect.has(data, 'version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
    }
    return obj;
  }
}

/**
 * 创建时间
 * @member {Date} createdTime
 */
ModelInterface.prototype.createdTime = undefined;

/**
 * 接口描述
 * @member {String} description
 */
ModelInterface.prototype.description = undefined;

/**
 * 主键
 * @member {String} id
 */
ModelInterface.prototype.id = undefined;

/**
 * 接口名称
 * @member {String} name
 */
ModelInterface.prototype.name = undefined;

/**
 * 接口路径
 * @member {String} path
 */
ModelInterface.prototype.path = undefined;

/**
 * 接口类型：get/post
 * @member {String} pathMethod
 */
ModelInterface.prototype.pathMethod = undefined;

/**
 * 接口所属标签，用于分类
 * @member {String} tag
 */
ModelInterface.prototype.tag = undefined;

/**
 * 修改时间
 * @member {Date} updatedTime
 */
ModelInterface.prototype.updatedTime = undefined;

/**
 * 该接口对应平台版本
 * @member {String} version
 */
ModelInterface.prototype.version = undefined;


