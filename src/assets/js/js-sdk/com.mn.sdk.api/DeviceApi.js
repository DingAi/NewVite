/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {BindDeviceForm} from '../com.mn.sdk.model/BindDeviceForm';
import {QueryDeviceListParam} from '../com.mn.sdk.model/QueryDeviceListParam';
import {QueryPlcListParam} from '../com.mn.sdk.model/QueryPlcListParam';
import {Result} from '../com.mn.sdk.model/Result';
import {ResultListDeviceInfoVo} from '../com.mn.sdk.model/ResultListDeviceInfoVo';
import {ResultListDeviceStatusInfoVo} from '../com.mn.sdk.model/ResultListDeviceStatusInfoVo';
import {ResultListDeviceVo} from '../com.mn.sdk.model/ResultListDeviceVo';
import {ResultListPlc} from '../com.mn.sdk.model/ResultListPlc';
import {ResultListSim} from '../com.mn.sdk.model/ResultListSim';

/**
* Device service.
* @module com.mn.sdk.api/DeviceApi
* @version 1.0
*/
export class DeviceApi {

    /**
    * Constructs a new DeviceApi. 
    * @alias module:com.mn.sdk.api/DeviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 绑定/或更换设备序列号
     * 绑定/或更换设备序列号
     * @param {module:com.mn.sdk.model/BindDeviceForm} bindDeviceForm bindDeviceForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    bindDeviceWithHttpInfo(bindDeviceForm) {
      let postBody = bindDeviceForm;

      // verify the required parameter 'bindDeviceForm' is set
      if (bindDeviceForm === undefined || bindDeviceForm === null) {
        throw new Error("Missing the required parameter 'bindDeviceForm' when calling bindDevice");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/bindDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 绑定/或更换设备序列号
     * 绑定/或更换设备序列号
     * @param {module:com.mn.sdk.model/BindDeviceForm} bindDeviceForm bindDeviceForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    bindDevice(bindDeviceForm) {
      return this.bindDeviceWithHttpInfo(bindDeviceForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 数据同步
     * 数据同步
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    dataSynchronizationWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling dataSynchronization");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/dataSynchronization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 数据同步
     * 数据同步
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    dataSynchronization(deviceId) {
      return this.dataSynchronizationWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询设备详细信息
     * 获取多个项目设备(不可查模板)的详细信息
     * @param {Array.<module:com.mn.sdk.model/String>} deviceIds 多个设备id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListDeviceInfoVo} and HTTP response
     */
    getDeviceInfoListWithHttpInfo(deviceIds) {
        let postBody = {};
        postBody["deviceIds"] = deviceIds;

      // verify the required parameter 'deviceIds' is set
      if (deviceIds === undefined || deviceIds === null) {
        throw new Error("Missing the required parameter 'deviceIds' when calling getDeviceInfoList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListDeviceInfoVo;

      return this.apiClient.callApi(
        '/api-business/device/getDeviceInfoList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询设备详细信息
     * 获取多个项目设备(不可查模板)的详细信息
     * @param {Array.<module:com.mn.sdk.model/String>} deviceIds 多个设备id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListDeviceInfoVo}
     */
    getDeviceInfoList(deviceIds) {
      return this.getDeviceInfoListWithHttpInfo(deviceIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询设备列表
     * 获取企业、用户、项目的采集器列表
     * @param {module:com.mn.sdk.model/QueryDeviceListParam} queryDeviceListParam queryDeviceListParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListDeviceVo} and HTTP response
     */
    getDeviceListWithHttpInfo(queryDeviceListParam) {
      let postBody = queryDeviceListParam;

      // verify the required parameter 'queryDeviceListParam' is set
      if (queryDeviceListParam === undefined || queryDeviceListParam === null) {
        throw new Error("Missing the required parameter 'queryDeviceListParam' when calling getDeviceList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListDeviceVo;

      return this.apiClient.callApi(
        '/api-business/device/getDeviceList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询设备列表
     * 获取企业、用户、项目的采集器列表
     * @param {module:com.mn.sdk.model/QueryDeviceListParam} queryDeviceListParam queryDeviceListParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListDeviceVo}
     */
    getDeviceList(queryDeviceListParam) {
      return this.getDeviceListWithHttpInfo(queryDeviceListParam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询设备状态信息
     * 获取设备的状态信息，包裹plc的状态
     * @param {Array.<module:com.mn.sdk.model/String>} deviceIds 多个设备id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListDeviceStatusInfoVo} and HTTP response
     */
    getDeviceStatusInfoListWithHttpInfo(deviceIds) {
        let postBody = {};
        postBody["deviceIds"] = deviceIds;

      // verify the required parameter 'deviceIds' is set
      if (deviceIds === undefined || deviceIds === null) {
        throw new Error("Missing the required parameter 'deviceIds' when calling getDeviceStatusInfoList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListDeviceStatusInfoVo;

      return this.apiClient.callApi(
        '/api-business/device/getDeviceStatusInfoList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询设备状态信息
     * 获取设备的状态信息，包裹plc的状态
     * @param {Array.<module:com.mn.sdk.model/String>} deviceIds 多个设备id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListDeviceStatusInfoVo}
     */
    getDeviceStatusInfoList(deviceIds) {
      return this.getDeviceStatusInfoListWithHttpInfo(deviceIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询设备列表
     * 获取企业、用户、项目的采集器列表
     * @param {module:com.mn.sdk.model/QueryPlcListParam} param param
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListPlc} and HTTP response
     */
    getPlcListWithHttpInfo(param) {
      let postBody = param;

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling getPlcList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListPlc;

      return this.apiClient.callApi(
        '/api-business/device/getPlcList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询设备列表
     * 获取企业、用户、项目的采集器列表
     * @param {module:com.mn.sdk.model/QueryPlcListParam} param param
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListPlc}
     */
    getPlcList(param) {
      return this.getPlcListWithHttpInfo(param)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 根据项目id
     * 根据项目id
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目id
     * @param {String} keyword keyword
     * @param {String} status 0：停机，1：正常,2：注销,3：其它 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListSim} and HTTP response
     */
    getSimCardFlowInfoListByProjectIdsWithHttpInfo(projectIds, keyword, status) {
        let postBody = {};
        postBody["keyword"] = keyword;
postBody["projectIds"] = projectIds;
postBody["status"] = status;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling getSimCardFlowInfoListByProjectIds");
      }

      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling getSimCardFlowInfoListByProjectIds");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling getSimCardFlowInfoListByProjectIds");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListSim;

      return this.apiClient.callApi(
        '/api-business/device/getSimCardFlowInfoListByProjectIds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 根据项目id
     * 根据项目id
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目id
     * @param {String} keyword keyword
     * @param {String} status 0：停机，1：正常,2：注销,3：其它 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListSim}
     */
    getSimCardFlowInfoListByProjectIds(projectIds, keyword, status) {
      return this.getSimCardFlowInfoListByProjectIdsWithHttpInfo(projectIds, keyword, status)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 远程重启
     * 远程重启
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    remoteRestartWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling remoteRestart");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/remoteRestart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 远程重启
     * 远程重启
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    remoteRestart(deviceId) {
      return this.remoteRestartWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 恢复采集
     * 恢复采集
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    restoreCollectWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling restoreCollect");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/restoreCollect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 恢复采集
     * 恢复采集
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    restoreCollect(deviceId) {
      return this.restoreCollectWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 恢复上传
     * 恢复上传
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    restoreUploadWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling restoreUpload");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/restoreUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 恢复上传
     * 恢复上传
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    restoreUpload(deviceId) {
      return this.restoreUploadWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 停止采集
     * 停止上传
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    stopCollectWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling stopCollect");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/stopCollect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 停止采集
     * 停止上传
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    stopCollect(deviceId) {
      return this.stopCollectWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 停止上传
     * 停止上传
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    stopUploadWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling stopUpload");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/stopUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 停止上传
     * 停止上传
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    stopUpload(deviceId) {
      return this.stopUploadWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 解绑device
     * 解绑device
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    unbindDeviceWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unbindDevice");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-business/device/unbindDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 解绑device
     * 解绑device
     * @param {String} deviceId 设备ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    unbindDevice(deviceId) {
      return this.unbindDeviceWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
