/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {ResultListProjectBoardTreeNodeVo} from '../com.mn.sdk.model/ResultListProjectBoardTreeNodeVo';
import {ResultListPropertiesBoardTreeConditionVo} from '../com.mn.sdk.model/ResultListPropertiesBoardTreeConditionVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {UpdateProjectBoardTreeNodeForm} from '../com.mn.sdk.model/UpdateProjectBoardTreeNodeForm';

/**
* ProjectBoardTree service.
* @module com.mn.sdk.api/ProjectBoardTreeApi
* @version 1.0
*/
export class ProjectBoardTreeApi {

    /**
    * Constructs a new ProjectBoardTreeApi. 
    * @alias module:com.mn.sdk.api/ProjectBoardTreeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 查询项目看板树
     * 根据看板Id 查询看板树信息
     * @param {String} boardId 项目看板ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardTreeNodeVo} and HTTP response
     */
    getBoardTreeNodeListWithHttpInfo(boardId) {
        let postBody = {};
        postBody["boardId"] = boardId;

      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getBoardTreeNodeList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardTreeNodeVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardTree/getTreeNodeByBoardId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询项目看板树
     * 根据看板Id 查询看板树信息
     * @param {String} boardId 项目看板ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardTreeNodeVo}
     */
    getBoardTreeNodeList(boardId) {
      return this.getBoardTreeNodeListWithHttpInfo(boardId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询默认树结构 分类条件
     * 查询默认树结构 分类条件
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListPropertiesBoardTreeConditionVo} and HTTP response
     */
    getProjectBoardTreeConditionListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListPropertiesBoardTreeConditionVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardTree/getProjectBoardTreeCondition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询默认树结构 分类条件
     * 查询默认树结构 分类条件
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListPropertiesBoardTreeConditionVo}
     */
    getProjectBoardTreeConditionList() {
      return this.getProjectBoardTreeConditionListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 保存項目看板树分类
     * 根据Form 保存看板树
     * @param {module:com.mn.sdk.model/UpdateProjectBoardTreeNodeForm} updateProjectBoardTreeNodeForm updateProjectBoardTreeNodeForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectBoardTreeNodeWithHttpInfo(updateProjectBoardTreeNodeForm) {
      let postBody = updateProjectBoardTreeNodeForm;

      // verify the required parameter 'updateProjectBoardTreeNodeForm' is set
      if (updateProjectBoardTreeNodeForm === undefined || updateProjectBoardTreeNodeForm === null) {
        throw new Error("Missing the required parameter 'updateProjectBoardTreeNodeForm' when calling updateProjectBoardTreeNode");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardTree/updateProjectBoardTreeNode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 保存項目看板树分类
     * 根据Form 保存看板树
     * @param {module:com.mn.sdk.model/UpdateProjectBoardTreeNodeForm} updateProjectBoardTreeNodeForm updateProjectBoardTreeNodeForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectBoardTreeNode(updateProjectBoardTreeNodeForm) {
      return this.updateProjectBoardTreeNodeWithHttpInfo(updateProjectBoardTreeNodeForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
