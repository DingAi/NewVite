/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {Result} from '../com.mn.sdk.model/Result';
import {ResultArea} from '../com.mn.sdk.model/ResultArea';
import {ResultDataDictionary} from '../com.mn.sdk.model/ResultDataDictionary';
import {ResultListArea} from '../com.mn.sdk.model/ResultListArea';
import {ResultListDataDictionary} from '../com.mn.sdk.model/ResultListDataDictionary';

/**
* Other service.
* @module com.mn.sdk.api/OtherApi
* @version 1.0
*/
export class OtherApi {

    /**
    * Constructs a new OtherApi. 
    * @alias module:com.mn.sdk.api/OtherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 获取百度地图apikey
     * 获取百度地图apikey
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/Result} and HTTP response
     */
    getAPIkeyWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;

      return this.apiClient.callApi(
        '/api-organization/other/getAPIkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取百度地图apikey
     * 获取百度地图apikey
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/Result}
     */
    getAPIkey() {
      return this.getAPIkeyWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取区域
     * 根据区域Code获取区域
     * @param {String} code 区域Code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultArea} and HTTP response
     */
    getAreaByCodeWithHttpInfo(code) {
        let postBody = {};
        postBody["code"] = code;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getAreaByCode");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultArea;

      return this.apiClient.callApi(
        '/api-organization/other/getAreaByCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取区域
     * 根据区域Code获取区域
     * @param {String} code 区域Code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultArea}
     */
    getAreaByCode(code) {
      return this.getAreaByCodeWithHttpInfo(code)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取区域集合
     * 根据父级区域Code获取区域集合
     * @param {String} parentCode 父级区域Code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListArea} and HTTP response
     */
    getAreaListWithHttpInfo(parentCode) {
        let postBody = {};
        postBody["parentCode"] = parentCode;

      // verify the required parameter 'parentCode' is set
      if (parentCode === undefined || parentCode === null) {
        throw new Error("Missing the required parameter 'parentCode' when calling getAreaList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListArea;

      return this.apiClient.callApi(
        '/api-organization/other/getAreaList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取区域集合
     * 根据父级区域Code获取区域集合
     * @param {String} parentCode 父级区域Code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListArea}
     */
    getAreaList(parentCode) {
      return this.getAreaListWithHttpInfo(parentCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询字典
     * 根据分组和指定id查询字典
     * @param {String} groupCode 分组code
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultDataDictionary} and HTTP response
     */
    getDictionaryWithHttpInfo(groupCode, id) {
        let postBody = {};
        postBody["groupCode"] = groupCode;
postBody["id"] = id;

      // verify the required parameter 'groupCode' is set
      if (groupCode === undefined || groupCode === null) {
        throw new Error("Missing the required parameter 'groupCode' when calling getDictionary");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDictionary");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultDataDictionary;

      return this.apiClient.callApi(
        '/api-organization/other/getDictionary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询字典
     * 根据分组和指定id查询字典
     * @param {String} groupCode 分组code
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultDataDictionary}
     */
    getDictionary(groupCode, id) {
      return this.getDictionaryWithHttpInfo(groupCode, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询字典集合
     * 根据分组查询字典集合
     * @param {String} groupCode 分组code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListDataDictionary} and HTTP response
     */
    getDictionaryListWithHttpInfo(groupCode) {
        let postBody = {};
        postBody["groupCode"] = groupCode;

      // verify the required parameter 'groupCode' is set
      if (groupCode === undefined || groupCode === null) {
        throw new Error("Missing the required parameter 'groupCode' when calling getDictionaryList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListDataDictionary;

      return this.apiClient.callApi(
        '/api-organization/other/getDictionaryList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询字典集合
     * 根据分组查询字典集合
     * @param {String} groupCode 分组code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListDataDictionary}
     */
    getDictionaryList(groupCode) {
      return this.getDictionaryListWithHttpInfo(groupCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
