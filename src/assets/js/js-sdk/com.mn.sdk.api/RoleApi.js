/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {ResultListRole} from '../com.mn.sdk.model/ResultListRole';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {ResultRole} from '../com.mn.sdk.model/ResultRole';
import {UpdateRoleForm} from '../com.mn.sdk.model/UpdateRoleForm';

/**
* Role service.
* @module com.mn.sdk.api/RoleApi
* @version 1.0
*/
export class RoleApi {

    /**
    * Constructs a new RoleApi. 
    * @alias module:com.mn.sdk.api/RoleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加角色
     * 添加角色
     * @param {String} name name
     * @param {Number} type type
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addRoleWithHttpInfo(name, type) {
        let postBody = {};
        postBody["name"] = name;
postBody["type"] = type;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addRole");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling addRole");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/role/addRole', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加角色
     * 添加角色
     * @param {String} name name
     * @param {Number} type type
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addRole(name, type) {
      return this.addRoleWithHttpInfo(name, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除角色
     * 删除角色
     * @param {String} roleId 角色ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteRoleWithHttpInfo(roleId) {
        let postBody = {};
        postBody["roleId"] = roleId;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deleteRole");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/role/deleteRole', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除角色
     * 删除角色
     * @param {String} roleId 角色ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteRole(roleId) {
      return this.deleteRoleWithHttpInfo(roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询角色
     * 根据id查询角色
     * @param {String} roleId 角色ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultRole} and HTTP response
     */
    getRoleWithHttpInfo(roleId) {
        let postBody = {};
        postBody["roleId"] = roleId;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRole");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultRole;

      return this.apiClient.callApi(
        '/api-organization/role/getRole', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询角色
     * 根据id查询角色
     * @param {String} roleId 角色ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultRole}
     */
    getRole(roleId) {
      return this.getRoleWithHttpInfo(roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询角色列表
     * 根据角色类型查询角色列表
     * @param {Number} roleType 角色类型(0系统角色,1项目角色,2企业管理,3部门管理,4所有用户通用,5super角色,6超级管理员,7个人企业)
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListRole} and HTTP response
     */
    getRoleListWithHttpInfo(roleType) {
        let postBody = {};
        postBody["roleType"] = roleType;

      // verify the required parameter 'roleType' is set
      if (roleType === undefined || roleType === null) {
        throw new Error("Missing the required parameter 'roleType' when calling getRoleList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListRole;

      return this.apiClient.callApi(
        '/api-organization/role/getRoleList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询角色列表
     * 根据角色类型查询角色列表
     * @param {Number} roleType 角色类型(0系统角色,1项目角色,2企业管理,3部门管理,4所有用户通用,5super角色,6超级管理员,7个人企业)
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListRole}
     */
    getRoleList(roleType) {
      return this.getRoleListWithHttpInfo(roleType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *  修改角色
     *  修改角色
     * @param {module:com.mn.sdk.model/UpdateRoleForm} updateRoleForm updateRoleForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateRoleWithHttpInfo(updateRoleForm) {
      let postBody = updateRoleForm;

      // verify the required parameter 'updateRoleForm' is set
      if (updateRoleForm === undefined || updateRoleForm === null) {
        throw new Error("Missing the required parameter 'updateRoleForm' when calling updateRole");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/role/updateRole', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *  修改角色
     *  修改角色
     * @param {module:com.mn.sdk.model/UpdateRoleForm} updateRoleForm updateRoleForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateRole(updateRoleForm) {
      return this.updateRoleWithHttpInfo(updateRoleForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
