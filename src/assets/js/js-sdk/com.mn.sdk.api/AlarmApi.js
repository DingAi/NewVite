/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";

import {ResultAlarmConfig} from '../com.mn.sdk.model/ResultAlarmConfig';
import {ResultIPageHistoryAlarmVo} from '../com.mn.sdk.model/ResultIPageHistoryAlarmVo';
import {ResultIPageRealTimeAlarmVo} from '../com.mn.sdk.model/ResultIPageRealTimeAlarmVo';
import {ResultListAlarmConfig} from '../com.mn.sdk.model/ResultListAlarmConfig';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';

/**
* Alarm service.
* @module com.mn.sdk.api/AlarmApi
* @version 1.0
*/
export class AlarmApi {

    /**
    * Constructs a new AlarmApi. 
    * @alias module:com.mn.sdk.api/AlarmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 确认报警
     * 根据传入的用户以及多个报警Id 确认报警信息
     * @param {Array.<module:com.mn.sdk.model/String>} ids N个报警Id
     * @param {String} confirmScheme 确认报警方案
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    confirmAlarmWithHttpInfo(ids, confirmScheme) {
        let postBody = {};
        postBody["confirmScheme"] = confirmScheme;
postBody["ids"] = ids;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling confirmAlarm");
      }

      // verify the required parameter 'confirmScheme' is set
      if (confirmScheme === undefined || confirmScheme === null) {
        throw new Error("Missing the required parameter 'confirmScheme' when calling confirmAlarm");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/alarm/confirmAlarm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 确认报警
     * 根据传入的用户以及多个报警Id 确认报警信息
     * @param {Array.<module:com.mn.sdk.model/String>} ids N个报警Id
     * @param {String} confirmScheme 确认报警方案
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    confirmAlarm(ids, confirmScheme) {
      return this.confirmAlarmWithHttpInfo(ids, confirmScheme)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除历史报警
     * 根据传入的历史报警Id 删除对应的历史报警信息
     * @param {Array.<module:com.mn.sdk.model/String>} ids N个历史报警Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteHistoryAlarmWithHttpInfo(ids) {
        let postBody = {};
        postBody["ids"] = ids;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling deleteHistoryAlarm");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/alarm/deleteHistoryAlarm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除历史报警
     * 根据传入的历史报警Id 删除对应的历史报警信息
     * @param {Array.<module:com.mn.sdk.model/String>} ids N个历史报警Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteHistoryAlarm(ids) {
      return this.deleteHistoryAlarmWithHttpInfo(ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取报警配置
     * 根据传入的设备Id以及报警Id 返回对应的单个报警配置信息
     * @param {String} alarmId 报警Id
     * @param {String} deviceId 设备Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultAlarmConfig} and HTTP response
     */
    getAlarmConfigWithHttpInfo(alarmId, deviceId) {
        let postBody = {};
        postBody["alarmId"] = alarmId;
postBody["deviceId"] = deviceId;

      // verify the required parameter 'alarmId' is set
      if (alarmId === undefined || alarmId === null) {
        throw new Error("Missing the required parameter 'alarmId' when calling getAlarmConfig");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getAlarmConfig");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultAlarmConfig;

      return this.apiClient.callApi(
        '/api-business/alarm/getAlarmConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取报警配置
     * 根据传入的设备Id以及报警Id 返回对应的单个报警配置信息
     * @param {String} alarmId 报警Id
     * @param {String} deviceId 设备Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultAlarmConfig}
     */
    getAlarmConfig(alarmId, deviceId) {
      return this.getAlarmConfigWithHttpInfo(alarmId, deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取报警配置列表
     * 根据传入的设备Id 返回对应的报警配置列表
     * @param {String} deviceId 设备Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListAlarmConfig} and HTTP response
     */
    getAlarmConfigListWithHttpInfo(deviceId) {
        let postBody = {};
        postBody["deviceId"] = deviceId;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getAlarmConfigList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListAlarmConfig;

      return this.apiClient.callApi(
        '/api-business/alarm/getAlarmConfigList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取报警配置列表
     * 根据传入的设备Id 返回对应的报警配置列表
     * @param {String} deviceId 设备Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListAlarmConfig}
     */
    getAlarmConfigList(deviceId) {
      return this.getAlarmConfigListWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询历史报警信息
     * 根据param 查询出对应的历史报警信息
     * @param {module:com.mn.sdk.model/AlarmQueryParam} alarmQueryParam alarmQueryParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultIPageHistoryAlarmVo} and HTTP response
     */
    getHistoryAlarmDataWithHttpInfo(alarmQueryParam) {
      let postBody = alarmQueryParam;

      // verify the required parameter 'alarmQueryParam' is set
      if (alarmQueryParam === undefined || alarmQueryParam === null) {
        throw new Error("Missing the required parameter 'alarmQueryParam' when calling getHistoryAlarmData");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultIPageHistoryAlarmVo;

      return this.apiClient.callApi(
        '/api-business/alarm/getHistoryAlarmData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询历史报警信息
     * 根据param 查询出对应的历史报警信息
     * @param {module:com.mn.sdk.model/AlarmQueryParam} alarmQueryParam alarmQueryParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultIPageHistoryAlarmVo}
     */
    getHistoryAlarmData(alarmQueryParam) {
      return this.getHistoryAlarmDataWithHttpInfo(alarmQueryParam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取实时报警信息
     * 通过Form参数 分页查询实时报警
     * @param {module:com.mn.sdk.model/AlarmQueryParam} alarmQueryParam alarmQueryParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultIPageRealTimeAlarmVo} and HTTP response
     */
    getRealtimeAlarmDataWithHttpInfo(alarmQueryParam) {
      let postBody = alarmQueryParam;

      // verify the required parameter 'alarmQueryParam' is set
      if (alarmQueryParam === undefined || alarmQueryParam === null) {
        throw new Error("Missing the required parameter 'alarmQueryParam' when calling getRealtimeAlarmData");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultIPageRealTimeAlarmVo;

      return this.apiClient.callApi(
        '/api-business/alarm/getRealtimeAlarmData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取实时报警信息
     * 通过Form参数 分页查询实时报警
     * @param {module:com.mn.sdk.model/AlarmQueryParam} alarmQueryParam alarmQueryParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultIPageRealTimeAlarmVo}
     */
    getRealtimeAlarmData(alarmQueryParam) {
      return this.getRealtimeAlarmDataWithHttpInfo(alarmQueryParam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
