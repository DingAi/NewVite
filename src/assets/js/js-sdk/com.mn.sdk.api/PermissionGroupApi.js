/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AddAuthForm} from '../com.mn.sdk.model/AddAuthForm';
import {DeleteAuthForm} from '../com.mn.sdk.model/DeleteAuthForm';
import {ResultListPermissionGroup} from '../com.mn.sdk.model/ResultListPermissionGroup';
import {ResultListPermissionVo} from '../com.mn.sdk.model/ResultListPermissionVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';

/**
* PermissionGroup service.
* @module com.mn.sdk.api/PermissionGroupApi
* @version 1.0
*/
export class PermissionGroupApi {

    /**
    * Constructs a new PermissionGroupApi. 
    * @alias module:com.mn.sdk.api/PermissionGroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加权限组
     * 添加权限组
     * @param {String} name 权限组名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addPermissionGroupWithHttpInfo(name) {
        let postBody = {};
        postBody["name"] = name;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addPermissionGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/addPermissionGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加权限组
     * 添加权限组
     * @param {String} name 权限组名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addPermissionGroup(name) {
      return this.addPermissionGroupWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 授权权限组
     * 授权权限组
     * @param {module:com.mn.sdk.model/AddAuthForm} addAuthForm addAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    authPermissionGroupWithHttpInfo(addAuthForm) {
      let postBody = addAuthForm;

      // verify the required parameter 'addAuthForm' is set
      if (addAuthForm === undefined || addAuthForm === null) {
        throw new Error("Missing the required parameter 'addAuthForm' when calling authPermissionGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/authPermissionGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 授权权限组
     * 授权权限组
     * @param {module:com.mn.sdk.model/AddAuthForm} addAuthForm addAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    authPermissionGroup(addAuthForm) {
      return this.authPermissionGroupWithHttpInfo(addAuthForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 授权项目
     * 授权项目
     * @param {module:com.mn.sdk.model/AddAuthForm} addAuthForm addAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    authProjectWithHttpInfo(addAuthForm) {
      let postBody = addAuthForm;

      // verify the required parameter 'addAuthForm' is set
      if (addAuthForm === undefined || addAuthForm === null) {
        throw new Error("Missing the required parameter 'addAuthForm' when calling authProject");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/authProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 授权项目
     * 授权项目
     * @param {module:com.mn.sdk.model/AddAuthForm} addAuthForm addAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    authProject(addAuthForm) {
      return this.authProjectWithHttpInfo(addAuthForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除授权权限组
     * 删除授权权限组
     * @param {module:com.mn.sdk.model/DeleteAuthForm} deleteAuthForm deleteAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteAuthPermissionGroupWithHttpInfo(deleteAuthForm) {
      let postBody = deleteAuthForm;

      // verify the required parameter 'deleteAuthForm' is set
      if (deleteAuthForm === undefined || deleteAuthForm === null) {
        throw new Error("Missing the required parameter 'deleteAuthForm' when calling deleteAuthPermissionGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/deleteAuthPermissionGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除授权权限组
     * 删除授权权限组
     * @param {module:com.mn.sdk.model/DeleteAuthForm} deleteAuthForm deleteAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteAuthPermissionGroup(deleteAuthForm) {
      return this.deleteAuthPermissionGroupWithHttpInfo(deleteAuthForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除授权项目
     * 删除授权项目
     * @param {module:com.mn.sdk.model/DeleteAuthForm} deleteAuthForm deleteAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteAuthProjectWithHttpInfo(deleteAuthForm) {
      let postBody = deleteAuthForm;

      // verify the required parameter 'deleteAuthForm' is set
      if (deleteAuthForm === undefined || deleteAuthForm === null) {
        throw new Error("Missing the required parameter 'deleteAuthForm' when calling deleteAuthProject");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/deleteAuthProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除授权项目
     * 删除授权项目
     * @param {module:com.mn.sdk.model/DeleteAuthForm} deleteAuthForm deleteAuthForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteAuthProject(deleteAuthForm) {
      return this.deleteAuthProjectWithHttpInfo(deleteAuthForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除权限组
     * 删除权限组
     * @param {String} groupId 权限组ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deletePermissionGroupWithHttpInfo(groupId) {
        let postBody = {};
        postBody["groupId"] = groupId;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deletePermissionGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/deletePermissionGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除权限组
     * 删除权限组
     * @param {String} groupId 权限组ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deletePermissionGroup(groupId) {
      return this.deletePermissionGroupWithHttpInfo(groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户的授权权限组
     * 获取用户的授权权限组
     * @param {String} userId 用户id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListPermissionVo} and HTTP response
     */
    getAuthPermissionGroupWithHttpInfo(userId) {
        let postBody = {};
        postBody["userId"] = userId;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAuthPermissionGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListPermissionVo;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/getAuthPermissionGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取用户的授权权限组
     * 获取用户的授权权限组
     * @param {String} userId 用户id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListPermissionVo}
     */
    getAuthPermissionGroup(userId) {
      return this.getAuthPermissionGroupWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户的授权项目
     * 获取用户的授权项目
     * @param {String} userId 用户id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListPermissionVo} and HTTP response
     */
    getAuthProjectWithHttpInfo(userId) {
        let postBody = {};
        postBody["userId"] = userId;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAuthProject");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListPermissionVo;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/getAuthProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取用户的授权项目
     * 获取用户的授权项目
     * @param {String} userId 用户id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListPermissionVo}
     */
    getAuthProject(userId) {
      return this.getAuthProjectWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取权限组列表
     * 获取当前用户企业下所有权限组
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListPermissionGroup} and HTTP response
     */
    getPermissionGroupListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListPermissionGroup;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/getPermissionGroupList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取权限组列表
     * 获取当前用户企业下所有权限组
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListPermissionGroup}
     */
    getPermissionGroupList() {
      return this.getPermissionGroupListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改权限组
     * 修改权限组名称
     * @param {String} groupId 权限组ID
     * @param {String} name 权限组名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updatePermissionGroupWithHttpInfo(groupId, name) {
        let postBody = {};
        postBody["groupId"] = groupId;
postBody["name"] = name;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updatePermissionGroup");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updatePermissionGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/permissiongroup/updatePermissionGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改权限组
     * 修改权限组名称
     * @param {String} groupId 权限组ID
     * @param {String} name 权限组名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updatePermissionGroup(groupId, name) {
      return this.updatePermissionGroupWithHttpInfo(groupId, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
