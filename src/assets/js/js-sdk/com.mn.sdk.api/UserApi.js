/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {PersonalPasswordForm} from '../com.mn.sdk.model/PersonalPasswordForm';
import {PersonalPhoneForm} from '../com.mn.sdk.model/PersonalPhoneForm';
import {PersonalUserForm} from '../com.mn.sdk.model/PersonalUserForm';
import {ResultListUserVo} from '../com.mn.sdk.model/ResultListUserVo';
import {ResultLoginUserVo} from '../com.mn.sdk.model/ResultLoginUserVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {UpdateUserForm} from '../com.mn.sdk.model/UpdateUserForm';
import {UserForm} from '../com.mn.sdk.model/UserForm';

/**
* User service.
* @module com.mn.sdk.api/UserApi
* @version 1.0
*/
export class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:com.mn.sdk.api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 新增用户
     * 新增用户
     * @param {module:com.mn.sdk.model/UserForm} userForm userForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addUserWithHttpInfo(userForm) {
      let postBody = userForm;

      // verify the required parameter 'userForm' is set
      if (userForm === undefined || userForm === null) {
        throw new Error("Missing the required parameter 'userForm' when calling addUser");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/user/addUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 新增用户
     * 新增用户
     * @param {module:com.mn.sdk.model/UserForm} userForm userForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addUser(userForm) {
      return this.addUserWithHttpInfo(userForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除用户
     * 根据id删除用户
     * @param {String} userId 用户ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteUserWithHttpInfo(userId) {
        let postBody = {};
        postBody["userId"] = userId;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/user/deleteUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除用户
     * 根据id删除用户
     * @param {String} userId 用户ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteUser(userId) {
      return this.deleteUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取当前登录用户详细信息
     * 获取当前登录用户详细信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultLoginUserVo} and HTTP response
     */
    getLoginUserWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultLoginUserVo;

      return this.apiClient.callApi(
        '/api-organization/user/getLoginUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取当前登录用户详细信息
     * 获取当前登录用户详细信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultLoginUserVo}
     */
    getLoginUser() {
      return this.getLoginUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户信息集合
     * 根据id集合获取用户信息集合
     * @param {Array.<module:com.mn.sdk.model/String>} userIds 用户ID集合
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListUserVo} and HTTP response
     */
    getUserInfoListWithHttpInfo(userIds) {
        let postBody = {};
        postBody["userIds"] = userIds;

      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling getUserInfoList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListUserVo;

      return this.apiClient.callApi(
        '/api-organization/user/getUserInfoList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取用户信息集合
     * 根据id集合获取用户信息集合
     * @param {Array.<module:com.mn.sdk.model/String>} userIds 用户ID集合
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListUserVo}
     */
    getUserInfoList(userIds) {
      return this.getUserInfoListWithHttpInfo(userIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取指定部门下的用户列表
     * 获取当前登录用户的企业,再查询指定部门下的用户集合
     * @param {String} deptId 部门ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListUserVo} and HTTP response
     */
    getUserListByDeptIdWithHttpInfo(deptId) {
        let postBody = {};
        postBody["deptId"] = deptId;

      // verify the required parameter 'deptId' is set
      if (deptId === undefined || deptId === null) {
        throw new Error("Missing the required parameter 'deptId' when calling getUserListByDeptId");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListUserVo;

      return this.apiClient.callApi(
        '/api-organization/user/getUserListByDeptId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取指定部门下的用户列表
     * 获取当前登录用户的企业,再查询指定部门下的用户集合
     * @param {String} deptId 部门ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListUserVo}
     */
    getUserListByDeptId(deptId) {
      return this.getUserListByDeptIdWithHttpInfo(deptId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改邮箱
     * 修改当前用户的邮箱
     * @param {String} email 邮箱
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateEmailWithHttpInfo(email) {
        let postBody = {};
        postBody["email"] = email;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling updateEmail");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/user/updateEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改邮箱
     * 修改当前用户的邮箱
     * @param {String} email 邮箱
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateEmail(email) {
      return this.updateEmailWithHttpInfo(email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改密码
     * 修改当前用户的密码
     * @param {module:com.mn.sdk.model/PersonalPasswordForm} personalPasswordForm personalPasswordForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updatePasswordWithHttpInfo(personalPasswordForm) {
      let postBody = personalPasswordForm;

      // verify the required parameter 'personalPasswordForm' is set
      if (personalPasswordForm === undefined || personalPasswordForm === null) {
        throw new Error("Missing the required parameter 'personalPasswordForm' when calling updatePassword");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/user/updatePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改密码
     * 修改当前用户的密码
     * @param {module:com.mn.sdk.model/PersonalPasswordForm} personalPasswordForm personalPasswordForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updatePassword(personalPasswordForm) {
      return this.updatePasswordWithHttpInfo(personalPasswordForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改当前用户手机号
     * 根据手机号和验证码修改当前用户的手机号
     * @param {module:com.mn.sdk.model/PersonalPhoneForm} phoneForm phoneForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updatePhoneWithHttpInfo(phoneForm) {
      let postBody = phoneForm;

      // verify the required parameter 'phoneForm' is set
      if (phoneForm === undefined || phoneForm === null) {
        throw new Error("Missing the required parameter 'phoneForm' when calling updatePhone");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/user/updatePhone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改当前用户手机号
     * 根据手机号和验证码修改当前用户的手机号
     * @param {module:com.mn.sdk.model/PersonalPhoneForm} phoneForm phoneForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updatePhone(phoneForm) {
      return this.updatePhoneWithHttpInfo(phoneForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改当前用户基本信息
     * 修改当前用户基本信息
     * @param {module:com.mn.sdk.model/PersonalUserForm} userForm userForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateUserBaseInfoWithHttpInfo(userForm) {
      let postBody = userForm;

      // verify the required parameter 'userForm' is set
      if (userForm === undefined || userForm === null) {
        throw new Error("Missing the required parameter 'userForm' when calling updateUserBaseInfo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/user/updateUserBaseInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改当前用户基本信息
     * 修改当前用户基本信息
     * @param {module:com.mn.sdk.model/PersonalUserForm} userForm userForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateUserBaseInfo(userForm) {
      return this.updateUserBaseInfoWithHttpInfo(userForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改用户全部信息
     * 修改用户信息
     * @param {module:com.mn.sdk.model/UpdateUserForm} updateUserForm updateUserForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateUserInfoWithHttpInfo(updateUserForm) {
      let postBody = updateUserForm;

      // verify the required parameter 'updateUserForm' is set
      if (updateUserForm === undefined || updateUserForm === null) {
        throw new Error("Missing the required parameter 'updateUserForm' when calling updateUserInfo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/user/updateUserInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改用户全部信息
     * 修改用户信息
     * @param {module:com.mn.sdk.model/UpdateUserForm} updateUserForm updateUserForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateUserInfo(updateUserForm) {
      return this.updateUserInfoWithHttpInfo(updateUserForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
