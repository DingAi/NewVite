/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {ResultListString} from '../com.mn.sdk.model/ResultListString';
import {ResultListTemplateVo} from '../com.mn.sdk.model/ResultListTemplateVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {ResultString} from '../com.mn.sdk.model/ResultString';
import {UpdateTemplateForm} from '../com.mn.sdk.model/UpdateTemplateForm';

/**
* Template service.
* @module com.mn.sdk.api/TemplateApi
* @version 1.0
*/
export class TemplateApi {

    /**
    * Constructs a new TemplateApi. 
    * @alias module:com.mn.sdk.api/TemplateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 创建模板
     * 只可选自由项目进行创建 模板将会复制一份与之相同的变量信息等
     * @param {String} id 项目Id
     * @param {String} name 模板名
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addTemplateWithHttpInfo(id, name) {
        let postBody = {};
        postBody["id"] = id;
postBody["name"] = name;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTemplate");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addTemplate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/template/addTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 创建模板
     * 只可选自由项目进行创建 模板将会复制一份与之相同的变量信息等
     * @param {String} id 项目Id
     * @param {String} name 模板名
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addTemplate(id, name) {
      return this.addTemplateWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 复制模板
     * 根据传入的模板Id 复制一份相同的模板信息
     * @param {String} id 模板Id
     * @param {String} name 模板名
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    copyTemplateWithHttpInfo(id, name) {
        let postBody = {};
        postBody["id"] = id;
postBody["name"] = name;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling copyTemplate");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling copyTemplate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/template/copyTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 复制模板
     * 根据传入的模板Id 复制一份相同的模板信息
     * @param {String} id 模板Id
     * @param {String} name 模板名
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    copyTemplate(id, name) {
      return this.copyTemplateWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除模板
     * 根据传入的模板Id 删除对应的模板信息
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteTemplateWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTemplate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/template/deleteTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除模板
     * 根据传入的模板Id 删除对应的模板信息
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteTemplate(id) {
      return this.deleteTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取关联关系
     * 根据模板Id 获取与之关联的项目ID
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListString} and HTTP response
     */
    getProjectByTemplateIdWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectByTemplateId");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListString;

      return this.apiClient.callApi(
        '/api-business/template/getProjectByTemplateId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取关联关系
     * 根据模板Id 获取与之关联的项目ID
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListString}
     */
    getProjectByTemplateId(id) {
      return this.getProjectByTemplateIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取模板组态编辑主页url
     * 获取模板组态编辑主页url
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultString} and HTTP response
     */
    getTemplateConfigurationEditUrlWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTemplateConfigurationEditUrl");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultString;

      return this.apiClient.callApi(
        '/api-business/template/getTemplateConfigurationEditUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取模板组态编辑主页url
     * 获取模板组态编辑主页url
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultString}
     */
    getTemplateConfigurationEditUrl(id) {
      return this.getTemplateConfigurationEditUrlWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询模板列表
     * 获取当前登录用户下的所有模板列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListTemplateVo} and HTTP response
     */
    getTemplateListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListTemplateVo;

      return this.apiClient.callApi(
        '/api-business/template/getTemplateList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询模板列表
     * 获取当前登录用户下的所有模板列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListTemplateVo}
     */
    getTemplateList() {
      return this.getTemplateListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取模板组态主页url
     * 获取模板组态主页
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultString} and HTTP response
     */
    getTemplateMainConfigurationRuntimeUrlWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTemplateMainConfigurationRuntimeUrl");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultString;

      return this.apiClient.callApi(
        '/api-business/template/getTemplateMainConfigurationRuntimeUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取模板组态主页url
     * 获取模板组态主页
     * @param {String} id 模板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultString}
     */
    getTemplateMainConfigurationRuntimeUrl(id) {
      return this.getTemplateMainConfigurationRuntimeUrlWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改模板
     * 根据传入的 修改模板Form类 修改对应的模板信息
     * @param {module:com.mn.sdk.model/UpdateTemplateForm} updateTemplateForm updateTemplateForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateTemplateWithHttpInfo(updateTemplateForm) {
      let postBody = updateTemplateForm;

      // verify the required parameter 'updateTemplateForm' is set
      if (updateTemplateForm === undefined || updateTemplateForm === null) {
        throw new Error("Missing the required parameter 'updateTemplateForm' when calling updateTemplate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/template/updateTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改模板
     * 根据传入的 修改模板Form类 修改对应的模板信息
     * @param {module:com.mn.sdk.model/UpdateTemplateForm} updateTemplateForm updateTemplateForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateTemplate(updateTemplateForm) {
      return this.updateTemplateWithHttpInfo(updateTemplateForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
