/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AddProjectBoardGroupNodeForm} from '../com.mn.sdk.model/AddProjectBoardGroupNodeForm';
import {ProjectBoardGroupNodeForm} from '../com.mn.sdk.model/ProjectBoardGroupNodeForm';
import {ProjectBoardGroupRelParam} from '../com.mn.sdk.model/ProjectBoardGroupRelParam';
import {ResultListProjectBoardGroupNodeVo} from '../com.mn.sdk.model/ResultListProjectBoardGroupNodeVo';
import {ResultListProjectBoardGroupRelevanceVo} from '../com.mn.sdk.model/ResultListProjectBoardGroupRelevanceVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {ResultProjectBoardGroupRelVo} from '../com.mn.sdk.model/ResultProjectBoardGroupRelVo';

/**
* ProjectBoardGroup service.
* @module com.mn.sdk.api/ProjectBoardGroupApi
* @version 1.0
*/
export class ProjectBoardGroupApi {

    /**
    * Constructs a new ProjectBoardGroupApi. 
    * @alias module:com.mn.sdk.api/ProjectBoardGroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加项目看板分组节点
     * 根据Form参数 添加分组节点
     * @param {module:com.mn.sdk.model/AddProjectBoardGroupNodeForm} addProjectBoardGroupNodeForm addProjectBoardGroupNodeForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectGroupNodeWithHttpInfo(addProjectBoardGroupNodeForm) {
      let postBody = addProjectBoardGroupNodeForm;

      // verify the required parameter 'addProjectBoardGroupNodeForm' is set
      if (addProjectBoardGroupNodeForm === undefined || addProjectBoardGroupNodeForm === null) {
        throw new Error("Missing the required parameter 'addProjectBoardGroupNodeForm' when calling addProjectGroupNode");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/addProjectBoardGroupNode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加项目看板分组节点
     * 根据Form参数 添加分组节点
     * @param {module:com.mn.sdk.model/AddProjectBoardGroupNodeForm} addProjectBoardGroupNodeForm addProjectBoardGroupNodeForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProjectGroupNode(addProjectBoardGroupNodeForm) {
      return this.addProjectGroupNodeWithHttpInfo(addProjectBoardGroupNodeForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 分组节点绑定项目
     * 通过传入的节点Id 与N个项目Id 进行节点与项目的绑定
     * @param {module:com.mn.sdk.model/ProjectBoardGroupRelParam} projectBoardGroupRelParam projectBoardGroupRelParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectGroupRelWithHttpInfo(projectBoardGroupRelParam) {
      let postBody = projectBoardGroupRelParam;

      // verify the required parameter 'projectBoardGroupRelParam' is set
      if (projectBoardGroupRelParam === undefined || projectBoardGroupRelParam === null) {
        throw new Error("Missing the required parameter 'projectBoardGroupRelParam' when calling addProjectGroupRel");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/addProjectGroupRel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 分组节点绑定项目
     * 通过传入的节点Id 与N个项目Id 进行节点与项目的绑定
     * @param {module:com.mn.sdk.model/ProjectBoardGroupRelParam} projectBoardGroupRelParam projectBoardGroupRelParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProjectGroupRel(projectBoardGroupRelParam) {
      return this.addProjectGroupRelWithHttpInfo(projectBoardGroupRelParam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除项目看板分组节点
     * 根据传入的节点Id 删除该节点以及对应的关联关系
     * @param {String} id 看板分组Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteProjectGroupNodeWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectGroupNode");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/deleteProjectBoardGroupNode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除项目看板分组节点
     * 根据传入的节点Id 删除该节点以及对应的关联关系
     * @param {String} id 看板分组Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteProjectGroupNode(id) {
      return this.deleteProjectGroupNodeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 分组节点取消绑定项目
     * 根据节点Id 与N个项目Id 取消该节点与该项目的关联关系
     * @param {module:com.mn.sdk.model/ProjectBoardGroupRelParam} projectBoardGroupRelParam projectBoardGroupRelParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteProjectGroupRelWithHttpInfo(projectBoardGroupRelParam) {
      let postBody = projectBoardGroupRelParam;

      // verify the required parameter 'projectBoardGroupRelParam' is set
      if (projectBoardGroupRelParam === undefined || projectBoardGroupRelParam === null) {
        throw new Error("Missing the required parameter 'projectBoardGroupRelParam' when calling deleteProjectGroupRel");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/deleteProjectGroupRel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 分组节点取消绑定项目
     * 根据节点Id 与N个项目Id 取消该节点与该项目的关联关系
     * @param {module:com.mn.sdk.model/ProjectBoardGroupRelParam} projectBoardGroupRelParam projectBoardGroupRelParam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteProjectGroupRel(projectBoardGroupRelParam) {
      return this.deleteProjectGroupRelWithHttpInfo(projectBoardGroupRelParam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取节点关联的项目信息
     * 根据节点Id 查询对应的项目关联关系信息 
     * @param {String} id 看板分组节点Id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultProjectBoardGroupRelVo} and HTTP response
     */
    getBindGroupProjectListWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBindGroupProjectList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultProjectBoardGroupRelVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/getBindGroupProjectList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取节点关联的项目信息
     * 根据节点Id 查询对应的项目关联关系信息 
     * @param {String} id 看板分组节点Id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultProjectBoardGroupRelVo}
     */
    getBindGroupProjectList(id) {
      return this.getBindGroupProjectListWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取看板分组信息
     * 根据传入的看板Id 查询看板分组 
     * @param {String} boardId 项目看板Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardGroupNodeVo} and HTTP response
     */
    getProjectBoardTheRootNodeListWithHttpInfo(boardId) {
        let postBody = {};
        postBody["boardId"] = boardId;

      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getProjectBoardTheRootNodeList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardGroupNodeVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/getProjectBoardTheRootNode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取看板分组信息
     * 根据传入的看板Id 查询看板分组 
     * @param {String} boardId 项目看板Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardGroupNodeVo}
     */
    getProjectBoardTheRootNodeList(boardId) {
      return this.getProjectBoardTheRootNodeListWithHttpInfo(boardId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取指定节点信息
     * 根据分组节点Id 查询该节点的所有子节点信息
     * @param {String} id 项目看板分组节点Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardGroupNodeVo} and HTTP response
     */
    getProjectGroupNodeListWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectGroupNodeList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardGroupNodeVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/getProjectBoardGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取指定节点信息
     * 根据分组节点Id 查询该节点的所有子节点信息
     * @param {String} id 项目看板分组节点Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardGroupNodeVo}
     */
    getProjectGroupNodeList(id) {
      return this.getProjectGroupNodeListWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取可关联的项目
     * 根据传入的 看板分组Id 获取该节点可关联的项目信息 
     * @param {String} groupBoardId 看板分组Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardGroupRelevanceVo} and HTTP response
     */
    getUnbindGroupProjectListWithHttpInfo(groupBoardId) {
        let postBody = {};
        postBody["groupBoardId"] = groupBoardId;

      // verify the required parameter 'groupBoardId' is set
      if (groupBoardId === undefined || groupBoardId === null) {
        throw new Error("Missing the required parameter 'groupBoardId' when calling getUnbindGroupProjectList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardGroupRelevanceVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/getUnbindGroupProjectList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取可关联的项目
     * 根据传入的 看板分组Id 获取该节点可关联的项目信息 
     * @param {String} groupBoardId 看板分组Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardGroupRelevanceVo}
     */
    getUnbindGroupProjectList(groupBoardId) {
      return this.getUnbindGroupProjectListWithHttpInfo(groupBoardId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目分组节点
     * 根据Form参数 修改项目分组节点信息
     * @param {module:com.mn.sdk.model/ProjectBoardGroupNodeForm} projectBoardGroupNodeForm projectBoardGroupNodeForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectGroupWithHttpInfo(projectBoardGroupNodeForm) {
      let postBody = projectBoardGroupNodeForm;

      // verify the required parameter 'projectBoardGroupNodeForm' is set
      if (projectBoardGroupNodeForm === undefined || projectBoardGroupNodeForm === null) {
        throw new Error("Missing the required parameter 'projectBoardGroupNodeForm' when calling updateProjectGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardGroup/updateProjectGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目分组节点
     * 根据Form参数 修改项目分组节点信息
     * @param {module:com.mn.sdk.model/ProjectBoardGroupNodeForm} projectBoardGroupNodeForm projectBoardGroupNodeForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectGroup(projectBoardGroupNodeForm) {
      return this.updateProjectGroupWithHttpInfo(projectBoardGroupNodeForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
