/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AddProjectPropertiesEnum} from '../com.mn.sdk.model/AddProjectPropertiesEnum';
import {AddProjectPropertiesForm} from '../com.mn.sdk.model/AddProjectPropertiesForm';
import {ResultListProjectPropertiesActionVo} from '../com.mn.sdk.model/ResultListProjectPropertiesActionVo';
import {ResultListProjectPropertiesVo} from '../com.mn.sdk.model/ResultListProjectPropertiesVo';
import {ResultListPropertiesEnumVo} from '../com.mn.sdk.model/ResultListPropertiesEnumVo';
import {ResultListPropertiesValueVo} from '../com.mn.sdk.model/ResultListPropertiesValueVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {UpdateEnumPropertiesForm} from '../com.mn.sdk.model/UpdateEnumPropertiesForm';
import {UpdateProjectPropertiesForm} from '../com.mn.sdk.model/UpdateProjectPropertiesForm';

/**
* ProjectProperties service.
* @module com.mn.sdk.api/ProjectPropertiesApi
* @version 1.0
*/
export class ProjectPropertiesApi {

    /**
    * Constructs a new ProjectPropertiesApi. 
    * @alias module:com.mn.sdk.api/ProjectPropertiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加项目属性
     * 新增项目属性 根据Form参数类 添加
     * @param {module:com.mn.sdk.model/AddProjectPropertiesForm} addProjectPropertiesForm addProjectPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectPropertiesWithHttpInfo(addProjectPropertiesForm) {
      let postBody = addProjectPropertiesForm;

      // verify the required parameter 'addProjectPropertiesForm' is set
      if (addProjectPropertiesForm === undefined || addProjectPropertiesForm === null) {
        throw new Error("Missing the required parameter 'addProjectPropertiesForm' when calling addProjectProperties");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/addProjectProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加项目属性
     * 新增项目属性 根据Form参数类 添加
     * @param {module:com.mn.sdk.model/AddProjectPropertiesForm} addProjectPropertiesForm addProjectPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProjectProperties(addProjectPropertiesForm) {
      return this.addProjectPropertiesWithHttpInfo(addProjectPropertiesForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 添加枚举属性
     * 根据传入的Form类 新增枚举属性
     * @param {Array.<module:com.mn.sdk.model/AddProjectPropertiesEnum>} addProjectPropertiesEnums addProjectPropertiesEnums
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectPropertiesEnumWithHttpInfo(addProjectPropertiesEnums) {
      let postBody = addProjectPropertiesEnums;

      // verify the required parameter 'addProjectPropertiesEnums' is set
      if (addProjectPropertiesEnums === undefined || addProjectPropertiesEnums === null) {
        throw new Error("Missing the required parameter 'addProjectPropertiesEnums' when calling addProjectPropertiesEnum");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/addProjectPropertiesEnum', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加枚举属性
     * 根据传入的Form类 新增枚举属性
     * @param {Array.<module:com.mn.sdk.model/AddProjectPropertiesEnum>} addProjectPropertiesEnums addProjectPropertiesEnums
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProjectPropertiesEnum(addProjectPropertiesEnums) {
      return this.addProjectPropertiesEnumWithHttpInfo(addProjectPropertiesEnums)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 属性关联项目
     * 项目属性关联项目 一个项目属性可同时关联多个项目 
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds N个项目Id
     * @param {String} propertiesId 属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectPropertiesRelWithHttpInfo(projectIds, propertiesId) {
        let postBody = {};
        postBody["projectIds"] = projectIds;
postBody["propertiesId"] = propertiesId;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling addProjectPropertiesRel");
      }

      // verify the required parameter 'propertiesId' is set
      if (propertiesId === undefined || propertiesId === null) {
        throw new Error("Missing the required parameter 'propertiesId' when calling addProjectPropertiesRel");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/addProjectPropertiesRel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 属性关联项目
     * 项目属性关联项目 一个项目属性可同时关联多个项目 
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds N个项目Id
     * @param {String} propertiesId 属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProjectPropertiesRel(projectIds, propertiesId) {
      return this.addProjectPropertiesRelWithHttpInfo(projectIds, propertiesId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 复制项目属性
     * 复制项目属性 将该属性的 枚举或关联关系复制
     * @param {String} id 被复制属性id
     * @param {String} name 新建属性名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    copyProjectPropertiesWithHttpInfo(id, name) {
        let postBody = {};
        postBody["id"] = id;
postBody["name"] = name;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling copyProjectProperties");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling copyProjectProperties");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/copyProjectProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 复制项目属性
     * 复制项目属性 将该属性的 枚举或关联关系复制
     * @param {String} id 被复制属性id
     * @param {String} name 新建属性名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    copyProjectProperties(id, name) {
      return this.copyProjectPropertiesWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除项目属性
     * 删除项目属性 根据传入的属性Id 删除
     * @param {String} id 属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteProjectPropertiesWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectProperties");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/deleteProjectProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除项目属性
     * 删除项目属性 根据传入的属性Id 删除
     * @param {String} id 属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteProjectProperties(id) {
      return this.deleteProjectPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 属性取消关联项目
     * 取消与项目的关联关系
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds N个项目Id
     * @param {String} propertiesId 属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteProjectPropertiesRelWithHttpInfo(projectIds, propertiesId) {
        let postBody = {};
        postBody["projectIds"] = projectIds;
postBody["propertiesId"] = propertiesId;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling deleteProjectPropertiesRel");
      }

      // verify the required parameter 'propertiesId' is set
      if (propertiesId === undefined || propertiesId === null) {
        throw new Error("Missing the required parameter 'propertiesId' when calling deleteProjectPropertiesRel");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/deleteProjectPropertiesRel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 属性取消关联项目
     * 取消与项目的关联关系
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds N个项目Id
     * @param {String} propertiesId 属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteProjectPropertiesRel(projectIds, propertiesId) {
      return this.deleteProjectPropertiesRelWithHttpInfo(projectIds, propertiesId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除枚举属性
     * 根据传入的 枚举属性Id 删除对应的枚举属性
     * @param {String} propertiesEnumId 枚举属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deletePropertiesEnumWithHttpInfo(propertiesEnumId) {
        let postBody = {};
        postBody["propertiesEnumId"] = propertiesEnumId;

      // verify the required parameter 'propertiesEnumId' is set
      if (propertiesEnumId === undefined || propertiesEnumId === null) {
        throw new Error("Missing the required parameter 'propertiesEnumId' when calling deletePropertiesEnum");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/deletePropertiesEnum', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除枚举属性
     * 根据传入的 枚举属性Id 删除对应的枚举属性
     * @param {String} propertiesEnumId 枚举属性Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deletePropertiesEnum(propertiesEnumId) {
      return this.deletePropertiesEnumWithHttpInfo(propertiesEnumId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 导出属性
     * 导出属性 格式:Excel
     * @param {String} keyWord 属性名条件（模糊查询）
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportPropertiesExcelWithHttpInfo(keyWord) {
        let postBody = {};
        postBody["keyWord"] = keyWord;

      // verify the required parameter 'keyWord' is set
      if (keyWord === undefined || keyWord === null) {
        throw new Error("Missing the required parameter 'keyWord' when calling exportPropertiesExcel");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/exportPropertiesExcel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 导出属性
     * 导出属性 格式:Excel
     * @param {String} keyWord 属性名条件（模糊查询）
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportPropertiesExcel(keyWord) {
      return this.exportPropertiesExcelWithHttpInfo(keyWord)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询属性
     * 查询项目属性 根据当前登录用户企业下的所有项目属性信息
     * @param {String} resourceType 查询类型 [0：枚举,1：文本、2：日期，3：数值],
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectPropertiesVo} and HTTP response
     */
    getProjectPropertiesListWithHttpInfo(resourceType) {
        let postBody = {};
        postBody["resourceType"] = resourceType;

      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getProjectPropertiesList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectPropertiesVo;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/getProjectProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询属性
     * 查询项目属性 根据当前登录用户企业下的所有项目属性信息
     * @param {String} resourceType 查询类型 [0：枚举,1：文本、2：日期，3：数值],
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectPropertiesVo}
     */
    getProjectPropertiesList(resourceType) {
      return this.getProjectPropertiesListWithHttpInfo(resourceType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询项目属性关联项目的信息
     * 根据属性值Id 获取对应的关联的项目信息
     * @param {String} propertiesId 属性值Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectPropertiesActionVo} and HTTP response
     */
    getProjectPropertiesRelListWithHttpInfo(propertiesId) {
        let postBody = {};
        postBody["propertiesId"] = propertiesId;

      // verify the required parameter 'propertiesId' is set
      if (propertiesId === undefined || propertiesId === null) {
        throw new Error("Missing the required parameter 'propertiesId' when calling getProjectPropertiesRelList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectPropertiesActionVo;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/getProjectPropertiesRel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询项目属性关联项目的信息
     * 根据属性值Id 获取对应的关联的项目信息
     * @param {String} propertiesId 属性值Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectPropertiesActionVo}
     */
    getProjectPropertiesRelList(propertiesId) {
      return this.getProjectPropertiesRelListWithHttpInfo(propertiesId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询枚举属性
     * 根据属性Id 或枚举属性Id 查询对应的 枚举
     * @param {String} resourceId 属性Id/枚举Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListPropertiesEnumVo} and HTTP response
     */
    getPropertiesEnumListWithHttpInfo(resourceId) {
        let postBody = {};
        postBody["resourceId"] = resourceId;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getPropertiesEnumList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListPropertiesEnumVo;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/getPropertiesEnumList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询枚举属性
     * 根据属性Id 或枚举属性Id 查询对应的 枚举
     * @param {String} resourceId 属性Id/枚举Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListPropertiesEnumVo}
     */
    getPropertiesEnumList(resourceId) {
      return this.getPropertiesEnumListWithHttpInfo(resourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询属性值信息
     * 根据属性Id 以及查询类型 获取对应的属性值
     * @param {String} propertiesId 属性ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListPropertiesValueVo} and HTTP response
     */
    getPropertiesValueListWithHttpInfo(propertiesId) {
        let postBody = {};
        postBody["propertiesId"] = propertiesId;

      // verify the required parameter 'propertiesId' is set
      if (propertiesId === undefined || propertiesId === null) {
        throw new Error("Missing the required parameter 'propertiesId' when calling getPropertiesValueList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListPropertiesValueVo;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/getPropertiesValue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询属性值信息
     * 根据属性Id 以及查询类型 获取对应的属性值
     * @param {String} propertiesId 属性ID
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListPropertiesValueVo}
     */
    getPropertiesValueList(propertiesId) {
      return this.getPropertiesValueListWithHttpInfo(propertiesId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改枚举属性
     * 根据传入的Form的 修改对应的枚举属性
     * @param {module:com.mn.sdk.model/UpdateEnumPropertiesForm} updateEnumPropertiesForm updateEnumPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateEnumPropertiesWithHttpInfo(updateEnumPropertiesForm) {
      let postBody = updateEnumPropertiesForm;

      // verify the required parameter 'updateEnumPropertiesForm' is set
      if (updateEnumPropertiesForm === undefined || updateEnumPropertiesForm === null) {
        throw new Error("Missing the required parameter 'updateEnumPropertiesForm' when calling updateEnumProperties");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/updateEnumProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改枚举属性
     * 根据传入的Form的 修改对应的枚举属性
     * @param {module:com.mn.sdk.model/UpdateEnumPropertiesForm} updateEnumPropertiesForm updateEnumPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateEnumProperties(updateEnumPropertiesForm) {
      return this.updateEnumPropertiesWithHttpInfo(updateEnumPropertiesForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目属性
     * 修改项目属性 根据Form参数类
     * @param {module:com.mn.sdk.model/UpdateProjectPropertiesForm} updateProjectPropertiesForm updateProjectPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectPropertiesWithHttpInfo(updateProjectPropertiesForm) {
      let postBody = updateProjectPropertiesForm;

      // verify the required parameter 'updateProjectPropertiesForm' is set
      if (updateProjectPropertiesForm === undefined || updateProjectPropertiesForm === null) {
        throw new Error("Missing the required parameter 'updateProjectPropertiesForm' when calling updateProjectProperties");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectProperties/updateProjectProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目属性
     * 修改项目属性 根据Form参数类
     * @param {module:com.mn.sdk.model/UpdateProjectPropertiesForm} updateProjectPropertiesForm updateProjectPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectProperties(updateProjectPropertiesForm) {
      return this.updateProjectPropertiesWithHttpInfo(updateProjectPropertiesForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
