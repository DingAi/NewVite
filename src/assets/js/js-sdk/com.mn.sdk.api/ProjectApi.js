/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AddProjectForm} from '../com.mn.sdk.model/AddProjectForm';
import {ProjectForm} from '../com.mn.sdk.model/ProjectForm';
import {ProjectLonLatForm} from '../com.mn.sdk.model/ProjectLonLatForm';
import {QueryProjectListParam} from '../com.mn.sdk.model/QueryProjectListParam';
import {QueryProjectParam} from '../com.mn.sdk.model/QueryProjectParam';
import {ResultListAppMainMenu} from '../com.mn.sdk.model/ResultListAppMainMenu';
import {ResultListAttentionStatusVo} from '../com.mn.sdk.model/ResultListAttentionStatusVo';
import {ResultListClientProjectInfoVo} from '../com.mn.sdk.model/ResultListClientProjectInfoVo';
import {ResultListConfigurationRuntimeUrlVo} from '../com.mn.sdk.model/ResultListConfigurationRuntimeUrlVo';
import {ResultListProjectPropertiesValueVo} from '../com.mn.sdk.model/ResultListProjectPropertiesValueVo';
import {ResultListProjectVo} from '../com.mn.sdk.model/ResultListProjectVo';
import {ResultListReportBoardVo} from '../com.mn.sdk.model/ResultListReportBoardVo';
import {ResultListString} from '../com.mn.sdk.model/ResultListString';
import {ResultListTreeNodeVo} from '../com.mn.sdk.model/ResultListTreeNodeVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {ResultString} from '../com.mn.sdk.model/ResultString';
import {UpdateProjectPropertiesValueForm} from '../com.mn.sdk.model/UpdateProjectPropertiesValueForm';

/**
* Project service.
* @module com.mn.sdk.api/ProjectApi
* @version 1.0
*/
export class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:com.mn.sdk.api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加项目
     * 添加项目
     * @param {module:com.mn.sdk.model/AddProjectForm} addProjectForm addProjectForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectWithHttpInfo(addProjectForm) {
      let postBody = addProjectForm;

      // verify the required parameter 'addProjectForm' is set
      if (addProjectForm === undefined || addProjectForm === null) {
        throw new Error("Missing the required parameter 'addProjectForm' when calling addProject");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/addProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加项目
     * 添加项目
     * @param {module:com.mn.sdk.model/AddProjectForm} addProjectForm addProjectForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProject(addProjectForm) {
      return this.addProjectWithHttpInfo(addProjectForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除项目
     * 删除项目
     * @param {String} projectId 项目的id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteProjectWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/deleteProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除项目
     * 删除项目
     * @param {String} projectId 项目的id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteProject(projectId) {
      return this.deleteProjectWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取当前用户拥有权限的项目列表
     * 获取当前用户拥有权限的项目列表
     * @param {module:com.mn.sdk.model/QueryProjectListParam} param param
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectVo} and HTTP response
     */
    getAuthProjectListWithHttpInfo(param) {
      let postBody = param;

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling getAuthProjectList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectVo;

      return this.apiClient.callApi(
        '/api-organization/project/getAuthProjectList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取当前用户拥有权限的项目列表
     * 获取当前用户拥有权限的项目列表
     * @param {{keyword: string}} param param
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectVo}
     */
    getAuthProjectList(param) {
      return this.getAuthProjectListWithHttpInfo(param)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 根据用户id获取用户拥有权限的项目
     * 根据用户id获取用户拥有权限的项目
     * @param {String} userId 用户id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectVo} and HTTP response
     */
    getAuthProjectListByUserIdWithHttpInfo(userId) {
        let postBody = {};
        postBody["userId"] = userId;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAuthProjectListByUserId");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectVo;

      return this.apiClient.callApi(
        '/api-organization/project/getAuthProjectListByUserId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 根据用户id获取用户拥有权限的项目
     * 根据用户id获取用户拥有权限的项目
     * @param {String} userId 用户id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectVo}
     */
    getAuthProjectListByUserId(userId) {
      return this.getAuthProjectListByUserIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取项目菜单的权限码
     * 获取项目菜单的权限码
     * @param {String} projectId projectId
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListString} and HTTP response
     */
    getPermissionCodeListByProjectIdWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getPermissionCodeListByProjectId");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListString;

      return this.apiClient.callApi(
        '/api-organization/project/getPermissionCodeListByProjectId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取项目菜单的权限码
     * 获取项目菜单的权限码
     * @param {String} projectId projectId
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListString}
     */
    getPermissionCodeListByProjectId(projectId) {
      return this.getPermissionCodeListByProjectIdWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取app项目主页配置
     * 获取app项目主页配置
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListAppMainMenu} and HTTP response
     */
    getProjectAppMainMenuWithHttpInfo(projectIds) {
        let postBody = {};
        postBody["projectIds"] = projectIds;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling getProjectAppMainMenu");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListAppMainMenu;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectAppMainMenu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取app项目主页配置
     * 获取app项目主页配置
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListAppMainMenu}
     */
    getProjectAppMainMenu(projectIds) {
      return this.getProjectAppMainMenuWithHttpInfo(projectIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取项目关注状态
     * 获取项目关注状态
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds projectIds
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListAttentionStatusVo} and HTTP response
     */
    getProjectAttentionStatusListWithHttpInfo(projectIds) {
        let postBody = {};
        postBody["projectIds"] = projectIds;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling getProjectAttentionStatusList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListAttentionStatusVo;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectAttentionStatusList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取项目关注状态
     * 获取项目关注状态
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds projectIds
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListAttentionStatusVo}
     */
    getProjectAttentionStatusList(projectIds) {
      return this.getProjectAttentionStatusListWithHttpInfo(projectIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取客户被授权的项目列表
     * 通过客户企业id获取客户被授权的项目列表
     * @param {String} clientId 客户企业id
     * @param {String} keyword 模糊搜索项目名称/角色名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListClientProjectInfoVo} and HTTP response
     */
    getProjectAuthInfoListByClientIdWithHttpInfo(clientId, keyword) {
        let postBody = {};
        postBody["clientId"] = clientId;
postBody["keyword"] = keyword;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getProjectAuthInfoListByClientId");
      }

      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling getProjectAuthInfoListByClientId");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListClientProjectInfoVo;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectAuthInfoListByClientId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取客户被授权的项目列表
     * 通过客户企业id获取客户被授权的项目列表
     * @param {String} clientId 客户企业id
     * @param {String} keyword 模糊搜索项目名称/角色名称
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListClientProjectInfoVo}
     */
    getProjectAuthInfoListByClientId(clientId, keyword) {
      return this.getProjectAuthInfoListByClientIdWithHttpInfo(clientId, keyword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取组态编辑URL
     * 获取项目的组态编辑URL
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    getProjectConfigurationEditUrlWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectConfigurationEditUrl");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectConfigurationEditUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取组态编辑URL
     * 获取项目的组态编辑URL
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    getProjectConfigurationEditUrl(projectId) {
      return this.getProjectConfigurationEditUrlWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取项目组态组态运行URL
     * 获取项目的组态运行URL
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目ids
     * @param {String} type 获取组态的类型，0：项目主页，1，移动端，2：集中监控
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListConfigurationRuntimeUrlVo} and HTTP response
     */
    getProjectConfigurationRuntimeUrlListWithHttpInfo(projectIds, type) {
        let postBody = {};
        postBody["projectIds"] = projectIds;
postBody["type"] = type;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling getProjectConfigurationRuntimeUrlList");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getProjectConfigurationRuntimeUrlList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListConfigurationRuntimeUrlVo;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectConfigurationRuntimeUrlList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取项目组态组态运行URL
     * 获取项目的组态运行URL
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目ids
     * @param {String} type 获取组态的类型，0：项目主页，1，移动端，2：集中监控
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListConfigurationRuntimeUrlVo}
     */
    getProjectConfigurationRuntimeUrlList(projectIds, type) {
      return this.getProjectConfigurationRuntimeUrlListWithHttpInfo(projectIds, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 根据项目id获取项目列表
     * 根据项目id获取项目列表
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectVo} and HTTP response
     */
    getProjectListByIdsWithHttpInfo(projectIds) {
        let postBody = {};
        postBody["projectIds"] = projectIds;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling getProjectListByIds");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectVo;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectListByIds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 根据项目id获取项目列表
     * 根据项目id获取项目列表
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectVo}
     */
    getProjectListByIds(projectIds) {
      return this.getProjectListByIdsWithHttpInfo(projectIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取项目和项目属性值属性以及属性值之间的关系
     * 获取项目和项目属性值属性以及属性值之间的关系
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectPropertiesValueVo} and HTTP response
     */
    getProjectPropertiesValueListWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectPropertiesValueList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectPropertiesValueVo;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectPropertiesValueList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取项目和项目属性值属性以及属性值之间的关系
     * 获取项目和项目属性值属性以及属性值之间的关系
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectPropertiesValueVo}
     */
    getProjectPropertiesValueList(projectId) {
      return this.getProjectPropertiesValueListWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取报表列表
     * 获取项目的报表列表
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultString} and HTTP response
     */
    getProjectReportEditUrlWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectReportEditUrl");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultString;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectReportEditUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取报表列表
     * 获取项目的报表列表
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultString}
     */
    getProjectReportEditUrl(projectId) {
      return this.getProjectReportEditUrlWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取报表列表
     * 获取项目的报表列表
     * @param {String} projectId 项目id
     * @param {String} type 0:电脑端，1:移动端
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListReportBoardVo} and HTTP response
     */
    getProjectReportListWithHttpInfo(projectId, type) {
        let postBody = {};
        postBody["projectId"] = projectId;
postBody["type"] = type;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectReportList");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getProjectReportList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListReportBoardVo;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectReportList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取报表列表
     * 获取项目的报表列表
     * @param {String} projectId 项目id
     * @param {String} type 0:电脑端，1:移动端
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListReportBoardVo}
     */
    getProjectReportList(projectId, type) {
      return this.getProjectReportListWithHttpInfo(projectId, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户对项目变量的操作级别列表
     * 获取用户对项目变量的操作级别列表
     * @param {String} projectId projectId
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListString} and HTTP response
     */
    getProjectRoleLevelListWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectRoleLevelList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListString;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectRoleLevelList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取用户对项目变量的操作级别列表
     * 获取用户对项目变量的操作级别列表
     * @param {String} projectId projectId
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListString}
     */
    getProjectRoleLevelList(projectId) {
      return this.getProjectRoleLevelListWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 根据看板id获取项目树结构数据
     * 根据看板id获取项目树结构数据
     * @param {module:com.mn.sdk.model/QueryProjectParam} param param
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListTreeNodeVo} and HTTP response
     */
    getProjectTreeListWithHttpInfo(param) {
      let postBody = param;

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling getProjectTreeList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListTreeNodeVo;

      return this.apiClient.callApi(
        '/api-organization/project/getProjectTreeList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 根据看板id获取项目树结构数据
     * 根据看板id获取项目树结构数据
     * @param {module:com.mn.sdk.model/QueryProjectParam} param param
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListTreeNodeVo}
     */
    getProjectTreeList(param) {
      return this.getProjectTreeListWithHttpInfo(param)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目关注状态
     * 修改项目关注状态
     * @param {String} value 0:取消关注，1：关注
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds projectIds
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateAttentionStatusWithHttpInfo(value, projectIds) {
        let postBody = {};
        postBody["projectIds"] = projectIds;
postBody["value"] = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling updateAttentionStatus");
      }

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling updateAttentionStatus");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/updateAttentionStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目关注状态
     * 修改项目关注状态
     * @param {String} value 0:取消关注，1：关注
     * @param {Array.<module:com.mn.sdk.model/String>} projectIds projectIds
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateAttentionStatus(value, projectIds) {
      return this.updateAttentionStatusWithHttpInfo(value, projectIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目信息
     * 修改项目信息(名称、备注、排序)
     * @param {module:com.mn.sdk.model/ProjectForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectWithHttpInfo(form) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling updateProject");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/updateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目信息
     * 修改项目信息(名称、备注、排序)
     * @param {module:com.mn.sdk.model/ProjectForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProject(form) {
      return this.updateProjectWithHttpInfo(form)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改app项目主页配置
     * 修改app项目主页配置
     * @param {String} mainMenu app主页,0：组态，1：详情，2：报表：3：视频，4：创建保修
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectAppMainMenuWithHttpInfo(mainMenu, projectId) {
        let postBody = {};
        postBody["mainMenu"] = mainMenu;
postBody["projectId"] = projectId;

      // verify the required parameter 'mainMenu' is set
      if (mainMenu === undefined || mainMenu === null) {
        throw new Error("Missing the required parameter 'mainMenu' when calling updateProjectAppMainMenu");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProjectAppMainMenu");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/updateProjectAppMainMenu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改app项目主页配置
     * 修改app项目主页配置
     * @param {String} mainMenu app主页,0：组态，1：详情，2：报表：3：视频，4：创建保修
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectAppMainMenu(mainMenu, projectId) {
      return this.updateProjectAppMainMenuWithHttpInfo(mainMenu, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目经纬度
     * 修改项目经纬度
     * @param {module:com.mn.sdk.model/ProjectLonLatForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectLonLatWithHttpInfo(form) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling updateProjectLonLat");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/updateProjectLonLat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目经纬度
     * 修改项目经纬度
     * @param {module:com.mn.sdk.model/ProjectLonLatForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectLonLat(form) {
      return this.updateProjectLonLatWithHttpInfo(form)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目的权限组id
     * 修改项目的权限组id
     * @param {String} permissionGroupId 权限组id
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectPermissionGroupIdWithHttpInfo(permissionGroupId, projectId) {
        let postBody = {};
        postBody["permissionGroupId"] = permissionGroupId;
postBody["projectId"] = projectId;

      // verify the required parameter 'permissionGroupId' is set
      if (permissionGroupId === undefined || permissionGroupId === null) {
        throw new Error("Missing the required parameter 'permissionGroupId' when calling updateProjectPermissionGroupId");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProjectPermissionGroupId");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/updateProjectPermissionGroupId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目的权限组id
     * 修改项目的权限组id
     * @param {String} permissionGroupId 权限组id
     * @param {String} projectId 项目id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectPermissionGroupId(permissionGroupId, projectId) {
      return this.updateProjectPermissionGroupIdWithHttpInfo(permissionGroupId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目和项目属性值属性以及属性值之间的关系
     * 修改项目和项目属性值属性以及属性值之间的关系
     * @param {module:com.mn.sdk.model/UpdateProjectPropertiesValueForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectPropertiesValueWithHttpInfo(form) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling updateProjectPropertiesValue");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/project/updateProjectPropertiesValue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目和项目属性值属性以及属性值之间的关系
     * 修改项目和项目属性值属性以及属性值之间的关系
     * @param {module:com.mn.sdk.model/UpdateProjectPropertiesValueForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectPropertiesValue(form) {
      return this.updateProjectPropertiesValueWithHttpInfo(form)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
