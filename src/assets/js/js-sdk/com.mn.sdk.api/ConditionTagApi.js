/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {ResultListConditionTagVo} from '../com.mn.sdk.model/ResultListConditionTagVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';

/**
* ConditionTag service.
* @module com.mn.sdk.api/ConditionTagApi
* @version 1.0
*/
export class ConditionTagApi {

    /**
    * Constructs a new ConditionTagApi. 
    * @alias module:com.mn.sdk.api/ConditionTagApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加条件储存标签
     * 根据传入的信息 添加对应的 条件储存标签
     * @param {String} name 标签名
     * @param {Number} sort 排序号
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addConditionTagWithHttpInfo(name, sort) {
        let postBody = {};
        postBody["name"] = name;
postBody["sort"] = sort;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addConditionTag");
      }

      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling addConditionTag");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/conditionTag/addConditionTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加条件储存标签
     * 根据传入的信息 添加对应的 条件储存标签
     * @param {String} name 标签名
     * @param {Number} sort 排序号
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addConditionTag(name, sort) {
      return this.addConditionTagWithHttpInfo(name, sort)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 条件储存绑定标签
     * 根据传入的信息 添加对应的 条件储存与标签关联关系
     * @param {String} resourceId 项目/模板Id
     * @param {String} resourceType project/template
     * @param {String} storageId 条件储存Id
     * @param {String} tagId 标签Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addConditionTagRelWithHttpInfo(resourceId, resourceType, storageId, tagId) {
        let postBody = {};
        postBody["resourceId"] = resourceId;
postBody["resourceType"] = resourceType;
postBody["storageId"] = storageId;
postBody["tagId"] = tagId;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling addConditionTagRel");
      }

      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling addConditionTagRel");
      }

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling addConditionTagRel");
      }

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling addConditionTagRel");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/conditionTag/addConditionTagRel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 条件储存绑定标签
     * 根据传入的信息 添加对应的 条件储存与标签关联关系
     * @param {String} resourceId 项目/模板Id
     * @param {String} resourceType project/template
     * @param {String} storageId 条件储存Id
     * @param {String} tagId 标签Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addConditionTagRel(resourceId, resourceType, storageId, tagId) {
      return this.addConditionTagRelWithHttpInfo(resourceId, resourceType, storageId, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除条件储存标签
     * 根据传入的 条件储存标签Id 删除对应的条件储存信息
     * @param {String} id 标签Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteConditionTagWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteConditionTag");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/conditionTag/deleteConditionTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除条件储存标签
     * 根据传入的 条件储存标签Id 删除对应的条件储存信息
     * @param {String} id 标签Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteConditionTag(id) {
      return this.deleteConditionTagWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除条件储存关联关系
     * 根据传入的 条件储存标签Id 与项目/模板Id 删除对应的关联关系信息
     * @param {String} resourceId 项目/模板Id
     * @param {String} resourceType project/template
     * @param {String} storageId 条件储存Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteConditionTagRelWithHttpInfo(resourceId, resourceType, storageId) {
        let postBody = {};
        postBody["resourceId"] = resourceId;
postBody["resourceType"] = resourceType;
postBody["storageId"] = storageId;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteConditionTagRel");
      }

      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling deleteConditionTagRel");
      }

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling deleteConditionTagRel");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/conditionTag/deleteConditionTagRel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除条件储存关联关系
     * 根据传入的 条件储存标签Id 与项目/模板Id 删除对应的关联关系信息
     * @param {String} resourceId 项目/模板Id
     * @param {String} resourceType project/template
     * @param {String} storageId 条件储存Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteConditionTagRel(resourceId, resourceType, storageId) {
      return this.deleteConditionTagRelWithHttpInfo(resourceId, resourceType, storageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取条件储存标签信息
     * 根据传入的查询参数信息 查询对应的(所有|或可用)条件储存信息
     * @param {String} resourceId 与resourceType 与之对应
     * @param {String} resourceType 需要查询模板 传入template 需要企业传入all  需要项目 传入project
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListConditionTagVo} and HTTP response
     */
    getConditionTagListWithHttpInfo(resourceId, resourceType) {
        let postBody = {};
        postBody["resourceId"] = resourceId;
postBody["resourceType"] = resourceType;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getConditionTagList");
      }

      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getConditionTagList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListConditionTagVo;

      return this.apiClient.callApi(
        '/api-business/conditionTag/getConditionTagList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取条件储存标签信息
     * 根据传入的查询参数信息 查询对应的(所有|或可用)条件储存信息
     * @param {String} resourceId 与resourceType 与之对应
     * @param {String} resourceType 需要查询模板 传入template 需要企业传入all  需要项目 传入project
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListConditionTagVo}
     */
    getConditionTagList(resourceId, resourceType) {
      return this.getConditionTagListWithHttpInfo(resourceId, resourceType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改添加储存标签
     * 根据传入的 储存条件修改 对应的条件储存标签信息
     * @param {String} id 标签Id
     * @param {String} name 标签名
     * @param {Number} sort 排序号
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateConditionTagWithHttpInfo(id, name, sort) {
        let postBody = {};
        postBody["id"] = id;
postBody["name"] = name;
postBody["sort"] = sort;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateConditionTag");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateConditionTag");
      }

      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling updateConditionTag");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/conditionTag/updateConditionTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改添加储存标签
     * 根据传入的 储存条件修改 对应的条件储存标签信息
     * @param {String} id 标签Id
     * @param {String} name 标签名
     * @param {Number} sort 排序号
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateConditionTag(id, name, sort) {
      return this.updateConditionTagWithHttpInfo(id, name, sort)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
