/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AddProjectBoardForm} from '../com.mn.sdk.model/AddProjectBoardForm';
import {ResultListProjectBoardVo} from '../com.mn.sdk.model/ResultListProjectBoardVo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {UpdateProjectBoardForm} from '../com.mn.sdk.model/UpdateProjectBoardForm';
import {UpdateSystemProjectBoardForm} from '../com.mn.sdk.model/UpdateSystemProjectBoardForm';

/**
* ProjectBoard service.
* @module com.mn.sdk.api/ProjectBoardApi
* @version 1.0
*/
export class ProjectBoardApi {

    /**
    * Constructs a new ProjectBoardApi. 
    * @alias module:com.mn.sdk.api/ProjectBoardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 新增看板
     * 根据传入的Form 添加看板信息
     * @param {module:com.mn.sdk.model/AddProjectBoardForm} addProjectBoardForm addProjectBoardForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectBoardWithHttpInfo(addProjectBoardForm) {
      let postBody = addProjectBoardForm;

      // verify the required parameter 'addProjectBoardForm' is set
      if (addProjectBoardForm === undefined || addProjectBoardForm === null) {
        throw new Error("Missing the required parameter 'addProjectBoardForm' when calling addProjectBoard");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoard/addProjectBoard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 新增看板
     * 根据传入的Form 添加看板信息
     * @param {module:com.mn.sdk.model/AddProjectBoardForm} addProjectBoardForm addProjectBoardForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProjectBoard(addProjectBoardForm) {
      return this.addProjectBoardWithHttpInfo(addProjectBoardForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除项目看板
     * 根据传入的看板Id 删除该看板下的所有信息
     * @param {String} id 看板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteProjectBoardWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectBoard");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoard/deleteProjectBoard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除项目看板
     * 根据传入的看板Id 删除该看板下的所有信息
     * @param {String} id 看板Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteProjectBoard(id) {
      return this.deleteProjectBoardWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询所有项目看板列表
     * 查询所有看板信息 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardVo} and HTTP response
     */
    getAllProjectBoardListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoard/getAllProjectBoardList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询所有项目看板列表
     * 查询所有看板信息 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardVo}
     */
    getAllProjectBoardList() {
      return this.getAllProjectBoardListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 查询可用项目看板列表
     * 查询当前登录用户可见的的项目看板列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardVo} and HTTP response
     */
    getVisibleProjectBoardListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoard/getVisibleProjectBoardList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 查询可用项目看板列表
     * 查询当前登录用户可见的的项目看板列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardVo}
     */
    getVisibleProjectBoardList() {
      return this.getVisibleProjectBoardListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目看板
     * 只可修改 该看板的[名称, 是否使用, 排序号, 备注]
     * @param {module:com.mn.sdk.model/UpdateProjectBoardForm} updateProjectBoardForm updateProjectBoardForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectBoardWithHttpInfo(updateProjectBoardForm) {
      let postBody = updateProjectBoardForm;

      // verify the required parameter 'updateProjectBoardForm' is set
      if (updateProjectBoardForm === undefined || updateProjectBoardForm === null) {
        throw new Error("Missing the required parameter 'updateProjectBoardForm' when calling updateProjectBoard");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoard/updateProjectBoard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目看板
     * 只可修改 该看板的[名称, 是否使用, 排序号, 备注]
     * @param {module:com.mn.sdk.model/UpdateProjectBoardForm} updateProjectBoardForm updateProjectBoardForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectBoard(updateProjectBoardForm) {
      return this.updateProjectBoardWithHttpInfo(updateProjectBoardForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改系统项目看板 是否展示
     * 只可修改 系统看板的[ 是否使用,移动端是否显示, 排序号]
     * @param {module:com.mn.sdk.model/UpdateSystemProjectBoardForm} updateSystemProjectBoardForm updateSystemProjectBoardForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateSystemProjectBoardEnableWithHttpInfo(updateSystemProjectBoardForm) {
      let postBody = updateSystemProjectBoardForm;

      // verify the required parameter 'updateSystemProjectBoardForm' is set
      if (updateSystemProjectBoardForm === undefined || updateSystemProjectBoardForm === null) {
        throw new Error("Missing the required parameter 'updateSystemProjectBoardForm' when calling updateSystemProjectBoardEnable");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoard/updateSystemProjectBoardEnable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改系统项目看板 是否展示
     * 只可修改 系统看板的[ 是否使用,移动端是否显示, 排序号]
     * @param {module:com.mn.sdk.model/UpdateSystemProjectBoardForm} updateSystemProjectBoardForm updateSystemProjectBoardForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateSystemProjectBoardEnable(updateSystemProjectBoardForm) {
      return this.updateSystemProjectBoardEnableWithHttpInfo(updateSystemProjectBoardForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
