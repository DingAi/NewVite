/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AddLiveVideoForm} from '../com.mn.sdk.model/AddLiveVideoForm';
import {ResultListLiveVideo} from '../com.mn.sdk.model/ResultListLiveVideo';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {ResultSurveillanceVideoVo} from '../com.mn.sdk.model/ResultSurveillanceVideoVo';
import {UpdateLiveVideoForm} from '../com.mn.sdk.model/UpdateLiveVideoForm';
import {UpdateSurveillanceVideoForm} from '../com.mn.sdk.model/UpdateSurveillanceVideoForm';

/**
* Video service.
* @module com.mn.sdk.api/VideoApi
* @version 1.0
*/
export class VideoApi {

    /**
    * Constructs a new VideoApi. 
    * @alias module:com.mn.sdk.api/VideoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加项目的直播视频
     * 添加项目的直播视频
     * @param {module:com.mn.sdk.model/AddLiveVideoForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addLiveVideoWithHttpInfo(form) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling addLiveVideo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/video/addLiveVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加项目的直播视频
     * 添加项目的直播视频
     * @param {module:com.mn.sdk.model/AddLiveVideoForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addLiveVideo(form) {
      return this.addLiveVideoWithHttpInfo(form)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除项目的变量历史数据
     * 删除项目的变量历史数据
     * @param {String} id 视频id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteLiveVideoWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLiveVideo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/video/deleteLiveVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除项目的变量历史数据
     * 删除项目的变量历史数据
     * @param {String} id 视频id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteLiveVideo(id) {
      return this.deleteLiveVideoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除项目的监控视频
     * 删除项目的监控视频
     * @param {String} projectId 视频id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteSurveillanceVideoWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteSurveillanceVideo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/video/deleteSurveillanceVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除项目的监控视频
     * 删除项目的监控视频
     * @param {String} projectId 视频id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteSurveillanceVideo(projectId) {
      return this.deleteSurveillanceVideoWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取项目的变量历史数据
     * 删除项目的变量历史数据
     * @param {String} projectId 项目Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListLiveVideo} and HTTP response
     */
    getLiveVideoListWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getLiveVideoList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListLiveVideo;

      return this.apiClient.callApi(
        '/api-business/video/getLiveVideoList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取项目的变量历史数据
     * 删除项目的变量历史数据
     * @param {String} projectId 项目Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListLiveVideo}
     */
    getLiveVideoList(projectId) {
      return this.getLiveVideoListWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取项目的监控视频
     * 获取项目的监控视频
     * @param {String} projectId 视频id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultSurveillanceVideoVo} and HTTP response
     */
    getSurveillanceVideoWithHttpInfo(projectId) {
        let postBody = {};
        postBody["projectId"] = projectId;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getSurveillanceVideo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultSurveillanceVideoVo;

      return this.apiClient.callApi(
        '/api-business/video/getSurveillanceVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取项目的监控视频
     * 获取项目的监控视频
     * @param {String} projectId 视频id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultSurveillanceVideoVo}
     */
    getSurveillanceVideo(projectId) {
      return this.getSurveillanceVideoWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目的直播视频
     * 修改项目的直播视频
     * @param {module:com.mn.sdk.model/UpdateLiveVideoForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateLiveVideoWithHttpInfo(form) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling updateLiveVideo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/video/updateLiveVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目的直播视频
     * 修改项目的直播视频
     * @param {module:com.mn.sdk.model/UpdateLiveVideoForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateLiveVideo(form) {
      return this.updateLiveVideoWithHttpInfo(form)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改项目的监控视频
     * 修改项目的监控视频
     * @param {module:com.mn.sdk.model/UpdateSurveillanceVideoForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateSurveillanceVideoWithHttpInfo(form) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling updateSurveillanceVideo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-business/video/updateSurveillanceVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改项目的监控视频
     * 修改项目的监控视频
     * @param {module:com.mn.sdk.model/UpdateSurveillanceVideoForm} form form
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateSurveillanceVideo(form) {
      return this.updateSurveillanceVideoWithHttpInfo(form)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
