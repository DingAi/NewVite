/*
 * 系统接口
 * 系统接口文档
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 4.0.0
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AddProjectBoardFilterGroupForm} from '../com.mn.sdk.model/AddProjectBoardFilterGroupForm';
import {ResultListProjectBoardFilterGroupPropertiesValueVo} from '../com.mn.sdk.model/ResultListProjectBoardFilterGroupPropertiesValueVo';
import {ResultListProjectBoardFilterGroupPropertiesVo} from '../com.mn.sdk.model/ResultListProjectBoardFilterGroupPropertiesVo';
import {ResultListProjectBoardFilterGroupVo} from '../com.mn.sdk.model/ResultListProjectBoardFilterGroupVo';
import {ResultListProjectBoardFilterPropertiesTypeValue} from '../com.mn.sdk.model/ResultListProjectBoardFilterPropertiesTypeValue';
import {ResultObject} from '../com.mn.sdk.model/ResultObject';
import {UpdateProjectBoardFilterGroupForm} from '../com.mn.sdk.model/UpdateProjectBoardFilterGroupForm';
import {UpdateProjectBoardFilterPropertiesForm} from '../com.mn.sdk.model/UpdateProjectBoardFilterPropertiesForm';

/**
* ProjectBoardFilterGroup service.
* @module com.mn.sdk.api/ProjectBoardFilterGroupApi
* @version 1.0
*/
export class ProjectBoardFilterGroupApi {

    /**
    * Constructs a new ProjectBoardFilterGroupApi. 
    * @alias module:com.mn.sdk.api/ProjectBoardFilterGroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加看板过滤分组
     * 根据Form 添加看板过滤分组
     * @param {module:com.mn.sdk.model/AddProjectBoardFilterGroupForm} addProjectBoardFilterGroupForm addProjectBoardFilterGroupForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    addProjectBoardFilterGroupWithHttpInfo(addProjectBoardFilterGroupForm) {
      let postBody = addProjectBoardFilterGroupForm;

      // verify the required parameter 'addProjectBoardFilterGroupForm' is set
      if (addProjectBoardFilterGroupForm === undefined || addProjectBoardFilterGroupForm === null) {
        throw new Error("Missing the required parameter 'addProjectBoardFilterGroupForm' when calling addProjectBoardFilterGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/addProjectBoardFilterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 添加看板过滤分组
     * 根据Form 添加看板过滤分组
     * @param {module:com.mn.sdk.model/AddProjectBoardFilterGroupForm} addProjectBoardFilterGroupForm addProjectBoardFilterGroupForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    addProjectBoardFilterGroup(addProjectBoardFilterGroupForm) {
      return this.addProjectBoardFilterGroupWithHttpInfo(addProjectBoardFilterGroupForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除看板过滤分组
     * 根据过滤分组Id 删除对应的过滤分组 以及关联关系
     * @param {String} id 过滤分组Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    deleteProjectBoardFilterGroupWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectBoardFilterGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/deleteProjectBoardFilterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除看板过滤分组
     * 根据过滤分组Id 删除对应的过滤分组 以及关联关系
     * @param {String} id 过滤分组Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    deleteProjectBoardFilterGroup(id) {
      return this.deleteProjectBoardFilterGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取看板过滤分组信息
     * 根据过滤看板Id 查询该看板下的所有过滤分组信息
     * @param {String} boardId 看板Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterGroupVo} and HTTP response
     */
    getProjectBoardFilterGroupListWithHttpInfo(boardId) {
        let postBody = {};
        postBody["boardId"] = boardId;

      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getProjectBoardFilterGroupList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardFilterGroupVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/getProjectBoardFilterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取看板过滤分组信息
     * 根据过滤看板Id 查询该看板下的所有过滤分组信息
     * @param {String} boardId 看板Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterGroupVo}
     */
    getProjectBoardFilterGroupList(boardId) {
      return this.getProjectBoardFilterGroupListWithHttpInfo(boardId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取看板过滤分组条件值
     * 根据过滤分组Id 获取对应的过滤分组 筛选条件内容
     * @param {String} id 过滤分组Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterPropertiesTypeValue} and HTTP response
     */
    getProjectBoardFilterGroupPropertiesListWithHttpInfo(id) {
        let postBody = {};
        postBody["id"] = id;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectBoardFilterGroupPropertiesList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardFilterPropertiesTypeValue;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/getProjectBoardFilterGroupPropertiesList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取看板过滤分组条件值
     * 根据过滤分组Id 获取对应的过滤分组 筛选条件内容
     * @param {String} id 过滤分组Id
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterPropertiesTypeValue}
     */
    getProjectBoardFilterGroupPropertiesList(id) {
      return this.getProjectBoardFilterGroupPropertiesListWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取默认过滤分组筛选条件
     * 获取默认过滤分组筛选条件内容（地区，客户，日期，属性）
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterGroupPropertiesVo} and HTTP response
     */
    getProjectBoardFilterListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardFilterGroupPropertiesVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/getProjectBoardFilterList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取默认过滤分组筛选条件
     * 获取默认过滤分组筛选条件内容（地区，客户，日期，属性）
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterGroupPropertiesVo}
     */
    getProjectBoardFilterList() {
      return this.getProjectBoardFilterListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取筛选条件的值
     * 根据传入的type编号  获取该type对应的 筛选条件值
     * @param {String} propertiesId 属性Id
     * @param {String} type 筛选条件类型  0:地区,1:客户,2:年月,3:属性
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterGroupPropertiesValueVo} and HTTP response
     */
    getProjectBoardFilterValueListWithHttpInfo(propertiesId, type) {
        let postBody = {};
        postBody["propertiesId"] = propertiesId;
postBody["type"] = type;

      // verify the required parameter 'propertiesId' is set
      if (propertiesId === undefined || propertiesId === null) {
        throw new Error("Missing the required parameter 'propertiesId' when calling getProjectBoardFilterValueList");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getProjectBoardFilterValueList");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultListProjectBoardFilterGroupPropertiesValueVo;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/getProjectBoardFilterValueList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取筛选条件的值
     * 根据传入的type编号  获取该type对应的 筛选条件值
     * @param {String} propertiesId 属性Id
     * @param {String} type 筛选条件类型  0:地区,1:客户,2:年月,3:属性
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultListProjectBoardFilterGroupPropertiesValueVo}
     */
    getProjectBoardFilterValueList(propertiesId, type) {
      return this.getProjectBoardFilterValueListWithHttpInfo(propertiesId, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改看板过滤分组
     * 根据Form 修改过滤分组 只可修改['名称', '备注', '排序号']
     * @param {module:com.mn.sdk.model/UpdateProjectBoardFilterGroupForm} updateProjectBoardFilterGroupForm updateProjectBoardFilterGroupForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectBoardFilterGroupWithHttpInfo(updateProjectBoardFilterGroupForm) {
      let postBody = updateProjectBoardFilterGroupForm;

      // verify the required parameter 'updateProjectBoardFilterGroupForm' is set
      if (updateProjectBoardFilterGroupForm === undefined || updateProjectBoardFilterGroupForm === null) {
        throw new Error("Missing the required parameter 'updateProjectBoardFilterGroupForm' when calling updateProjectBoardFilterGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/updateProjectBoardFilterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改看板过滤分组
     * 根据Form 修改过滤分组 只可修改['名称', '备注', '排序号']
     * @param {module:com.mn.sdk.model/UpdateProjectBoardFilterGroupForm} updateProjectBoardFilterGroupForm updateProjectBoardFilterGroupForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectBoardFilterGroup(updateProjectBoardFilterGroupForm) {
      return this.updateProjectBoardFilterGroupWithHttpInfo(updateProjectBoardFilterGroupForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 保存过滤分组筛选值
     * 根据Form 保存对应的 过滤分组筛选值
     * @param {module:com.mn.sdk.model/UpdateProjectBoardFilterPropertiesForm} updateProjectBoardFilterPropertiesForm updateProjectBoardFilterPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.mn.sdk.model/ResultObject} and HTTP response
     */
    updateProjectBoardFilterGroupPropertiesWithHttpInfo(updateProjectBoardFilterPropertiesForm) {
      let postBody = updateProjectBoardFilterPropertiesForm;

      // verify the required parameter 'updateProjectBoardFilterPropertiesForm' is set
      if (updateProjectBoardFilterPropertiesForm === undefined || updateProjectBoardFilterPropertiesForm === null) {
        throw new Error("Missing the required parameter 'updateProjectBoardFilterPropertiesForm' when calling updateProjectBoardFilterGroupProperties");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResultObject;

      return this.apiClient.callApi(
        '/api-organization/projectBoardFilterGroup/updateProjectBoardFilterGroupProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 保存过滤分组筛选值
     * 根据Form 保存对应的 过滤分组筛选值
     * @param {module:com.mn.sdk.model/UpdateProjectBoardFilterPropertiesForm} updateProjectBoardFilterPropertiesForm updateProjectBoardFilterPropertiesForm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.mn.sdk.model/ResultObject}
     */
    updateProjectBoardFilterGroupProperties(updateProjectBoardFilterPropertiesForm) {
      return this.updateProjectBoardFilterGroupPropertiesWithHttpInfo(updateProjectBoardFilterPropertiesForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
