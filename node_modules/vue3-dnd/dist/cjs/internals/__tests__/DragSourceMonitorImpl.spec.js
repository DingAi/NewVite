"use strict";
var _dragSourceMonitorImpl = require("../DragSourceMonitorImpl");
var _dndCore = require("dnd-core");
var _reactDndTestBackend = require("react-dnd-test-backend");
var _vitest = require("vitest");
(0, _vitest).describe("The DragSourceMonitorImpl", function() {
    (0, _vitest).it("can be constructed", function() {
        var manager = (0, _dndCore).createDragDropManager(_reactDndTestBackend.TestBackend);
        var monitor = new _dragSourceMonitorImpl.DragSourceMonitorImpl(manager);
        (0, _vitest).expect(monitor).toBeDefined();
    });
    (0, _vitest).it("uses the monitor for canDrag", function() {
        var canDragSource = _vitest.vi.fn();
        var manager = (0, _dndCore).createDragDropManager(_reactDndTestBackend.TestBackend);
        manager.getMonitor().canDragSource = canDragSource;
        var monitor = new _dragSourceMonitorImpl.DragSourceMonitorImpl(manager);
        monitor.canDragSource("123");
        (0, _vitest).expect(canDragSource.mock.calls).toHaveLength(1);
        (0, _vitest).expect(canDragSource.mock.calls[0]).toEqual([
            "123"
        ]);
    });
    (0, _vitest).it("throws if canDrag is used in a loop", function() {
        var manager = (0, _dndCore).createDragDropManager(_reactDndTestBackend.TestBackend);
        var monitor = new _dragSourceMonitorImpl.DragSourceMonitorImpl(manager);
        manager.getMonitor().canDragSource = function(a) {
            return monitor.canDrag(a);
        };
        (0, _vitest).expect(function() {
            return monitor.canDragSource("123");
        }).toThrow("You may not call monitor.canDrag() inside your canDrag() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
    });
    (0, _vitest).it("thunks to monitor methods", function() {
        var manager = (0, _dndCore).createDragDropManager(_reactDndTestBackend.TestBackend);
        var monitor = new _dragSourceMonitorImpl.DragSourceMonitorImpl(manager);
        var THUNK_METHODS = [
            "getTargetIds",
            "isSourcePublic",
            "getSourceId",
            "getItemType",
            "getItem",
            "getDropResult",
            "didDrop",
            "getInitialClientOffset",
            "getInitialSourceClientOffset",
            "getSourceClientOffset",
            "getClientOffset",
            "getDifferenceFromInitialOffset", 
        ];
        THUNK_METHODS.forEach(function(method) {
            var mock = _vitest.vi.fn();
            manager.getMonitor()[method] = mock;
            monitor[method]();
            (0, _vitest).expect(mock.mock.calls).toHaveLength(1);
        });
    });
});
