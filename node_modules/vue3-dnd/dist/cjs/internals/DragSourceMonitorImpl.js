"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DragSourceMonitorImpl = void 0;
var _invariant = require("@react-dnd/invariant");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var isCallingCanDrag = false;
var isCallingIsDragging = false;
var DragSourceMonitorImpl = /*#__PURE__*/ function() {
    "use strict";
    function DragSourceMonitorImpl(manager) {
        _classCallCheck(this, DragSourceMonitorImpl);
        this.sourceId = null;
        this.internalMonitor = manager.getMonitor();
    }
    var _proto = DragSourceMonitorImpl.prototype;
    _proto.receiveHandlerId = function receiveHandlerId(sourceId) {
        this.sourceId = sourceId;
    };
    _proto.getHandlerId = function getHandlerId() {
        return this.sourceId;
    };
    _proto.canDrag = function canDrag() {
        (0, _invariant).invariant(!isCallingCanDrag, "You may not call monitor.canDrag() inside your canDrag() implementation. " + "Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
        try {
            isCallingCanDrag = true;
            return this.internalMonitor.canDragSource(this.sourceId);
        } finally{
            isCallingCanDrag = false;
        }
    };
    _proto.isDragging = function isDragging() {
        if (!this.sourceId) {
            return false;
        }
        (0, _invariant).invariant(!isCallingIsDragging, "You may not call monitor.isDragging() inside your isDragging() implementation. " + "Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
        try {
            isCallingIsDragging = true;
            return this.internalMonitor.isDraggingSource(this.sourceId);
        } finally{
            isCallingIsDragging = false;
        }
    };
    _proto.subscribeToStateChange = function subscribeToStateChange(listener, options) {
        return this.internalMonitor.subscribeToStateChange(listener, options);
    };
    _proto.isDraggingSource = function isDraggingSource(sourceId) {
        return this.internalMonitor.isDraggingSource(sourceId);
    };
    _proto.isOverTarget = function isOverTarget(targetId, options) {
        return this.internalMonitor.isOverTarget(targetId, options);
    };
    _proto.getTargetIds = function getTargetIds() {
        return this.internalMonitor.getTargetIds();
    };
    _proto.isSourcePublic = function isSourcePublic() {
        return this.internalMonitor.isSourcePublic();
    };
    _proto.getSourceId = function getSourceId() {
        return this.internalMonitor.getSourceId();
    };
    _proto.subscribeToOffsetChange = function subscribeToOffsetChange(listener) {
        return this.internalMonitor.subscribeToOffsetChange(listener);
    };
    _proto.canDragSource = function canDragSource(sourceId) {
        return this.internalMonitor.canDragSource(sourceId);
    };
    _proto.canDropOnTarget = function canDropOnTarget(targetId) {
        return this.internalMonitor.canDropOnTarget(targetId);
    };
    _proto.getItemType = function getItemType() {
        return this.internalMonitor.getItemType();
    };
    _proto.getItem = function getItem() {
        return this.internalMonitor.getItem();
    };
    _proto.getDropResult = function getDropResult() {
        return this.internalMonitor.getDropResult();
    };
    _proto.didDrop = function didDrop() {
        return this.internalMonitor.didDrop();
    };
    _proto.getInitialClientOffset = function getInitialClientOffset() {
        return this.internalMonitor.getInitialClientOffset();
    };
    _proto.getInitialSourceClientOffset = function getInitialSourceClientOffset() {
        return this.internalMonitor.getInitialSourceClientOffset();
    };
    _proto.getSourceClientOffset = function getSourceClientOffset() {
        return this.internalMonitor.getSourceClientOffset();
    };
    _proto.getClientOffset = function getClientOffset() {
        return this.internalMonitor.getClientOffset();
    };
    _proto.getDifferenceFromInitialOffset = function getDifferenceFromInitialOffset() {
        return this.internalMonitor.getDifferenceFromInitialOffset();
    };
    return DragSourceMonitorImpl;
}();
exports.DragSourceMonitorImpl = DragSourceMonitorImpl;
