"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useDragLayer = useDragLayer;
var _useDragDropManagerJs = require("./useDragDropManager.js");
var _useCollectorJs = require("./useCollector.js");
var _vueDemi = require("vue-demi");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function useDragLayer(collect) {
    var dragDropManager = (0, _useDragDropManagerJs).useDragDropManager();
    var monitor = (0, _vueDemi).computed(function() {
        return (0, _vueDemi).unref(dragDropManager).getMonitor();
    });
    var ref = _slicedToArray((0, _useCollectorJs).useCollector(monitor, collect), 2), collected = ref[0], updateCollected = ref[1];
    (0, _vueDemi).watchEffect(function(onCleanup) {
        onCleanup(monitor.value.subscribeToOffsetChange(updateCollected));
    });
    (0, _vueDemi).watchEffect(function(onCleanup) {
        onCleanup(monitor.value.subscribeToStateChange(updateCollected));
    });
    return collected;
}
