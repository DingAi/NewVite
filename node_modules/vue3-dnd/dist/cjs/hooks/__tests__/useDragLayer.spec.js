"use strict";
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _vue = require("@testing-library/vue");
var _useDrag = require("../useDrag");
var _useDragLayer = require("../useDragLayer");
var _ = require("../..");
var _reactDndTestBackend = require("react-dnd-test-backend");
var _vueDemi = require("vue-demi");
var _vitest = require("vitest");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function fireDrag(source) {
    return _fireDrag.apply(this, arguments);
}
function _fireDrag() {
    _fireDrag = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(source) {
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return _vue.fireEvent.dragStart(source);
                case 2:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _fireDrag.apply(this, arguments);
}
var DragLayer = (0, _vueDemi).defineComponent(function() {
    var collected = (0, _useDragLayer).useDragLayer(function(monitor) {
        return {
            item: monitor.getItem(),
            itemType: monitor.getItemType(),
            isDragging: monitor.isDragging()
        };
    });
    return function() {
        var renderItem = function renderItem() {
            return collected.value.item == null ? null : (0, _vueDemi).h("div", {
                role: "drag-layer"
            });
        };
        if (!collected.value.isDragging) {
            return null;
        }
        return (0, _vueDemi).h("div", [
            (0, _vueDemi).h("div", [
                renderItem()
            ])
        ]);
    };
});
var Box = (0, _vueDemi).defineComponent(function() {
    var ref = _slicedToArray((0, _useDrag).useDrag({
        type: "box"
    }), 2), drag = ref[1];
    // @ts-ignore
    return function() {
        return (0, _vueDemi).h("div", {
            role: "box",
            ref: drag
        });
    };
});
(0, _vitest).describe("useDragLayer()", function() {
    (0, _vitest).afterEach(_vue.cleanup);
    (0, _vitest).it("can be used to retrieve information from the dnd monitor", _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var Example, WrappedProvider, rendered, box, dragLayer;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    Example = (0, _vueDemi).defineComponent(function() {
                        return function() {
                            return (0, _vueDemi).h("div", [
                                (0, _vueDemi).h(Box),
                                (0, _vueDemi).h(DragLayer)
                            ]);
                        };
                    });
                    WrappedProvider = function WrappedProvider(c) {
                        return (0, _vueDemi).h(_.DndProvider, {
                            backend: _reactDndTestBackend.TestBackend
                        }, [
                            (0, _vueDemi).h(c)
                        ]);
                    };
                    rendered = (0, _vue).render(WrappedProvider(Example));
                    _ctx.next = 5;
                    return rendered.findByRole("box");
                case 5:
                    box = _ctx.sent;
                    dragLayer = rendered.queryByRole("drag-layer");
                    (0, _vitest).expect(box).toBeDefined();
                    (0, _vitest).expect(dragLayer).toEqual(null);
                    fireDrag(box);
                    dragLayer = rendered.queryByRole("drag-layer");
                    (0, _vitest).expect(dragLayer).toBeDefined();
                case 12:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    })));
});
