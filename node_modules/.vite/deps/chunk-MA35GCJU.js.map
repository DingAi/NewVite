{
  "version": 3,
  "sources": ["../../zrender/lib/canvas/Layer.js", "../../zrender/lib/canvas/Painter.js", "../../echarts/lib/renderer/installCanvasRenderer.js", "../../echarts/lib/component/dataset/install.js"],
  "sourcesContent": ["import { __extends } from \"tslib\";\nimport * as util from '../core/util.js';\nimport { devicePixelRatio } from '../config.js';\nimport Eventful from '../core/Eventful.js';\nimport { getCanvasGradient } from './helper.js';\nimport { createCanvasPattern } from './graphic.js';\nimport BoundingRect from '../core/BoundingRect.js';\nimport { REDRAW_BIT } from '../graphic/constants.js';\nimport { platformApi } from '../core/platform.js';\nfunction createDom(id, painter, dpr) {\n    var newDom = platformApi.createCanvas();\n    var width = painter.getWidth();\n    var height = painter.getHeight();\n    var newDomStyle = newDom.style;\n    if (newDomStyle) {\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = '0';\n        newDomStyle.top = '0';\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.setAttribute('data-zr-dom-id', id);\n    }\n    newDom.width = width * dpr;\n    newDom.height = height * dpr;\n    return newDom;\n}\n;\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, painter, dpr) {\n        var _this = _super.call(this) || this;\n        _this.motionBlur = false;\n        _this.lastFrameAlpha = 0.7;\n        _this.dpr = 1;\n        _this.virtual = false;\n        _this.config = {};\n        _this.incremental = false;\n        _this.zlevel = 0;\n        _this.maxRepaintRectCount = 5;\n        _this.__dirty = true;\n        _this.__firstTimePaint = true;\n        _this.__used = false;\n        _this.__drawIndex = 0;\n        _this.__startIndex = 0;\n        _this.__endIndex = 0;\n        _this.__prevStartIndex = null;\n        _this.__prevEndIndex = null;\n        var dom;\n        dpr = dpr || devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, painter, dpr);\n        }\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        _this.id = id;\n        _this.dom = dom;\n        var domStyle = dom.style;\n        if (domStyle) {\n            util.disableUserSelect(dom);\n            dom.onselectstart = function () { return false; };\n            domStyle.padding = '0';\n            domStyle.margin = '0';\n            domStyle.borderWidth = '0';\n        }\n        _this.painter = painter;\n        _this.dpr = dpr;\n        return _this;\n    }\n    Layer.prototype.getElementCount = function () {\n        return this.__endIndex - this.__startIndex;\n    };\n    Layer.prototype.afterBrush = function () {\n        this.__prevStartIndex = this.__startIndex;\n        this.__prevEndIndex = this.__endIndex;\n    };\n    Layer.prototype.initContext = function () {\n        this.ctx = this.dom.getContext('2d');\n        this.ctx.dpr = this.dpr;\n    };\n    Layer.prototype.setUnpainted = function () {\n        this.__firstTimePaint = true;\n    };\n    Layer.prototype.createBackBuffer = function () {\n        var dpr = this.dpr;\n        this.domBack = createDom('back-' + this.id, this.painter, dpr);\n        this.ctxBack = this.domBack.getContext('2d');\n        if (dpr !== 1) {\n            this.ctxBack.scale(dpr, dpr);\n        }\n    };\n    Layer.prototype.createRepaintRects = function (displayList, prevList, viewWidth, viewHeight) {\n        if (this.__firstTimePaint) {\n            this.__firstTimePaint = false;\n            return null;\n        }\n        var mergedRepaintRects = [];\n        var maxRepaintRectCount = this.maxRepaintRectCount;\n        var full = false;\n        var pendingRect = new BoundingRect(0, 0, 0, 0);\n        function addRectToMergePool(rect) {\n            if (!rect.isFinite() || rect.isZero()) {\n                return;\n            }\n            if (mergedRepaintRects.length === 0) {\n                var boundingRect = new BoundingRect(0, 0, 0, 0);\n                boundingRect.copy(rect);\n                mergedRepaintRects.push(boundingRect);\n            }\n            else {\n                var isMerged = false;\n                var minDeltaArea = Infinity;\n                var bestRectToMergeIdx = 0;\n                for (var i = 0; i < mergedRepaintRects.length; ++i) {\n                    var mergedRect = mergedRepaintRects[i];\n                    if (mergedRect.intersect(rect)) {\n                        var pendingRect_1 = new BoundingRect(0, 0, 0, 0);\n                        pendingRect_1.copy(mergedRect);\n                        pendingRect_1.union(rect);\n                        mergedRepaintRects[i] = pendingRect_1;\n                        isMerged = true;\n                        break;\n                    }\n                    else if (full) {\n                        pendingRect.copy(rect);\n                        pendingRect.union(mergedRect);\n                        var aArea = rect.width * rect.height;\n                        var bArea = mergedRect.width * mergedRect.height;\n                        var pendingArea = pendingRect.width * pendingRect.height;\n                        var deltaArea = pendingArea - aArea - bArea;\n                        if (deltaArea < minDeltaArea) {\n                            minDeltaArea = deltaArea;\n                            bestRectToMergeIdx = i;\n                        }\n                    }\n                }\n                if (full) {\n                    mergedRepaintRects[bestRectToMergeIdx].union(rect);\n                    isMerged = true;\n                }\n                if (!isMerged) {\n                    var boundingRect = new BoundingRect(0, 0, 0, 0);\n                    boundingRect.copy(rect);\n                    mergedRepaintRects.push(boundingRect);\n                }\n                if (!full) {\n                    full = mergedRepaintRects.length >= maxRepaintRectCount;\n                }\n            }\n        }\n        for (var i = this.__startIndex; i < this.__endIndex; ++i) {\n            var el = displayList[i];\n            if (el) {\n                var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n                var prevRect = el.__isRendered && ((el.__dirty & REDRAW_BIT) || !shouldPaint)\n                    ? el.getPrevPaintRect()\n                    : null;\n                if (prevRect) {\n                    addRectToMergePool(prevRect);\n                }\n                var curRect = shouldPaint && ((el.__dirty & REDRAW_BIT) || !el.__isRendered)\n                    ? el.getPaintRect()\n                    : null;\n                if (curRect) {\n                    addRectToMergePool(curRect);\n                }\n            }\n        }\n        for (var i = this.__prevStartIndex; i < this.__prevEndIndex; ++i) {\n            var el = prevList[i];\n            var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n            if (el && (!shouldPaint || !el.__zr) && el.__isRendered) {\n                var prevRect = el.getPrevPaintRect();\n                if (prevRect) {\n                    addRectToMergePool(prevRect);\n                }\n            }\n        }\n        var hasIntersections;\n        do {\n            hasIntersections = false;\n            for (var i = 0; i < mergedRepaintRects.length;) {\n                if (mergedRepaintRects[i].isZero()) {\n                    mergedRepaintRects.splice(i, 1);\n                    continue;\n                }\n                for (var j = i + 1; j < mergedRepaintRects.length;) {\n                    if (mergedRepaintRects[i].intersect(mergedRepaintRects[j])) {\n                        hasIntersections = true;\n                        mergedRepaintRects[i].union(mergedRepaintRects[j]);\n                        mergedRepaintRects.splice(j, 1);\n                    }\n                    else {\n                        j++;\n                    }\n                }\n                i++;\n            }\n        } while (hasIntersections);\n        this._paintRects = mergedRepaintRects;\n        return mergedRepaintRects;\n    };\n    Layer.prototype.debugGetPaintRects = function () {\n        return (this._paintRects || []).slice();\n    };\n    Layer.prototype.resize = function (width, height) {\n        var dpr = this.dpr;\n        var dom = this.dom;\n        var domStyle = dom.style;\n        var domBack = this.domBack;\n        if (domStyle) {\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n        }\n        dom.width = width * dpr;\n        dom.height = height * dpr;\n        if (domBack) {\n            domBack.width = width * dpr;\n            domBack.height = height * dpr;\n            if (dpr !== 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        }\n    };\n    Layer.prototype.clear = function (clearAll, clearColor, repaintRects) {\n        var dom = this.dom;\n        var ctx = this.ctx;\n        var width = dom.width;\n        var height = dom.height;\n        clearColor = clearColor || this.clearColor;\n        var haveMotionBLur = this.motionBlur && !clearAll;\n        var lastFrameAlpha = this.lastFrameAlpha;\n        var dpr = this.dpr;\n        var self = this;\n        if (haveMotionBLur) {\n            if (!this.domBack) {\n                this.createBackBuffer();\n            }\n            this.ctxBack.globalCompositeOperation = 'copy';\n            this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);\n        }\n        var domBack = this.domBack;\n        function doClear(x, y, width, height) {\n            ctx.clearRect(x, y, width, height);\n            if (clearColor && clearColor !== 'transparent') {\n                var clearColorGradientOrPattern = void 0;\n                if (util.isGradientObject(clearColor)) {\n                    var shouldCache = clearColor.global || (clearColor.__width === width\n                        && clearColor.__height === height);\n                    clearColorGradientOrPattern = shouldCache\n                        && clearColor.__canvasGradient\n                        || getCanvasGradient(ctx, clearColor, {\n                            x: 0,\n                            y: 0,\n                            width: width,\n                            height: height\n                        });\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                    clearColor.__width = width;\n                    clearColor.__height = height;\n                }\n                else if (util.isImagePatternObject(clearColor)) {\n                    clearColor.scaleX = clearColor.scaleX || dpr;\n                    clearColor.scaleY = clearColor.scaleY || dpr;\n                    clearColorGradientOrPattern = createCanvasPattern(ctx, clearColor, {\n                        dirty: function () {\n                            self.setUnpainted();\n                            self.__painter.refresh();\n                        }\n                    });\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(x, y, width, height);\n                ctx.restore();\n            }\n            if (haveMotionBLur) {\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, x, y, width, height);\n                ctx.restore();\n            }\n        }\n        ;\n        if (!repaintRects || haveMotionBLur) {\n            doClear(0, 0, width, height);\n        }\n        else if (repaintRects.length) {\n            util.each(repaintRects, function (rect) {\n                doClear(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\n            });\n        }\n    };\n    return Layer;\n}(Eventful));\nexport default Layer;\n", "import { devicePixelRatio } from '../config.js';\nimport * as util from '../core/util.js';\nimport Layer from './Layer.js';\nimport requestAnimationFrame from '../animation/requestAnimationFrame.js';\nimport env from '../core/env.js';\nimport { brush, brushSingle } from './graphic.js';\nimport { REDRAW_BIT } from '../graphic/constants.js';\nimport { getSize } from './helper.js';\nvar HOVER_LAYER_ZLEVEL = 1e5;\nvar CANVAS_ZLEVEL = 314159;\nvar EL_AFTER_INCREMENTAL_INC = 0.01;\nvar INCREMENTAL_INC = 0.001;\nfunction isLayerValid(layer) {\n    if (!layer) {\n        return false;\n    }\n    if (layer.__builtin__) {\n        return true;\n    }\n    if (typeof (layer.resize) !== 'function'\n        || typeof (layer.refresh) !== 'function') {\n        return false;\n    }\n    return true;\n}\nfunction createRoot(width, height) {\n    var domRoot = document.createElement('div');\n    domRoot.style.cssText = [\n        'position:relative',\n        'width:' + width + 'px',\n        'height:' + height + 'px',\n        'padding:0',\n        'margin:0',\n        'border-width:0'\n    ].join(';') + ';';\n    return domRoot;\n}\nvar CanvasPainter = (function () {\n    function CanvasPainter(root, storage, opts, id) {\n        this.type = 'canvas';\n        this._zlevelList = [];\n        this._prevDisplayList = [];\n        this._layers = {};\n        this._layerConfig = {};\n        this._needsManuallyCompositing = false;\n        this.type = 'canvas';\n        var singleCanvas = !root.nodeName\n            || root.nodeName.toUpperCase() === 'CANVAS';\n        this._opts = opts = util.extend({}, opts || {});\n        this.dpr = opts.devicePixelRatio || devicePixelRatio;\n        this._singleCanvas = singleCanvas;\n        this.root = root;\n        var rootStyle = root.style;\n        if (rootStyle) {\n            util.disableUserSelect(root);\n            root.innerHTML = '';\n        }\n        this.storage = storage;\n        var zlevelList = this._zlevelList;\n        this._prevDisplayList = [];\n        var layers = this._layers;\n        if (!singleCanvas) {\n            this._width = getSize(root, 0, opts);\n            this._height = getSize(root, 1, opts);\n            var domRoot = this._domRoot = createRoot(this._width, this._height);\n            root.appendChild(domRoot);\n        }\n        else {\n            var rootCanvas = root;\n            var width = rootCanvas.width;\n            var height = rootCanvas.height;\n            if (opts.width != null) {\n                width = opts.width;\n            }\n            if (opts.height != null) {\n                height = opts.height;\n            }\n            this.dpr = opts.devicePixelRatio || 1;\n            rootCanvas.width = width * this.dpr;\n            rootCanvas.height = height * this.dpr;\n            this._width = width;\n            this._height = height;\n            var mainLayer = new Layer(rootCanvas, this, this.dpr);\n            mainLayer.__builtin__ = true;\n            mainLayer.initContext();\n            layers[CANVAS_ZLEVEL] = mainLayer;\n            mainLayer.zlevel = CANVAS_ZLEVEL;\n            zlevelList.push(CANVAS_ZLEVEL);\n            this._domRoot = root;\n        }\n    }\n    CanvasPainter.prototype.getType = function () {\n        return 'canvas';\n    };\n    CanvasPainter.prototype.isSingleCanvas = function () {\n        return this._singleCanvas;\n    };\n    CanvasPainter.prototype.getViewportRoot = function () {\n        return this._domRoot;\n    };\n    CanvasPainter.prototype.getViewportRootOffset = function () {\n        var viewportRoot = this.getViewportRoot();\n        if (viewportRoot) {\n            return {\n                offsetLeft: viewportRoot.offsetLeft || 0,\n                offsetTop: viewportRoot.offsetTop || 0\n            };\n        }\n    };\n    CanvasPainter.prototype.refresh = function (paintAll) {\n        var list = this.storage.getDisplayList(true);\n        var prevList = this._prevDisplayList;\n        var zlevelList = this._zlevelList;\n        this._redrawId = Math.random();\n        this._paintList(list, prevList, paintAll, this._redrawId);\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            var layer = this._layers[z];\n            if (!layer.__builtin__ && layer.refresh) {\n                var clearColor = i === 0 ? this._backgroundColor : null;\n                layer.refresh(clearColor);\n            }\n        }\n        if (this._opts.useDirtyRect) {\n            this._prevDisplayList = list.slice();\n        }\n        return this;\n    };\n    CanvasPainter.prototype.refreshHover = function () {\n        this._paintHoverList(this.storage.getDisplayList(false));\n    };\n    CanvasPainter.prototype._paintHoverList = function (list) {\n        var len = list.length;\n        var hoverLayer = this._hoverlayer;\n        hoverLayer && hoverLayer.clear();\n        if (!len) {\n            return;\n        }\n        var scope = {\n            inHover: true,\n            viewWidth: this._width,\n            viewHeight: this._height\n        };\n        var ctx;\n        for (var i = 0; i < len; i++) {\n            var el = list[i];\n            if (el.__inHover) {\n                if (!hoverLayer) {\n                    hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);\n                }\n                if (!ctx) {\n                    ctx = hoverLayer.ctx;\n                    ctx.save();\n                }\n                brush(ctx, el, scope, i === len - 1);\n            }\n        }\n        if (ctx) {\n            ctx.restore();\n        }\n    };\n    CanvasPainter.prototype.getHoverLayer = function () {\n        return this.getLayer(HOVER_LAYER_ZLEVEL);\n    };\n    CanvasPainter.prototype.paintOne = function (ctx, el) {\n        brushSingle(ctx, el);\n    };\n    CanvasPainter.prototype._paintList = function (list, prevList, paintAll, redrawId) {\n        if (this._redrawId !== redrawId) {\n            return;\n        }\n        paintAll = paintAll || false;\n        this._updateLayerStatus(list);\n        var _a = this._doPaintList(list, prevList, paintAll), finished = _a.finished, needsRefreshHover = _a.needsRefreshHover;\n        if (this._needsManuallyCompositing) {\n            this._compositeManually();\n        }\n        if (needsRefreshHover) {\n            this._paintHoverList(list);\n        }\n        if (!finished) {\n            var self_1 = this;\n            requestAnimationFrame(function () {\n                self_1._paintList(list, prevList, paintAll, redrawId);\n            });\n        }\n        else {\n            this.eachLayer(function (layer) {\n                layer.afterBrush && layer.afterBrush();\n            });\n        }\n    };\n    CanvasPainter.prototype._compositeManually = function () {\n        var ctx = this.getLayer(CANVAS_ZLEVEL).ctx;\n        var width = this._domRoot.width;\n        var height = this._domRoot.height;\n        ctx.clearRect(0, 0, width, height);\n        this.eachBuiltinLayer(function (layer) {\n            if (layer.virtual) {\n                ctx.drawImage(layer.dom, 0, 0, width, height);\n            }\n        });\n    };\n    CanvasPainter.prototype._doPaintList = function (list, prevList, paintAll) {\n        var _this = this;\n        var layerList = [];\n        var useDirtyRect = this._opts.useDirtyRect;\n        for (var zi = 0; zi < this._zlevelList.length; zi++) {\n            var zlevel = this._zlevelList[zi];\n            var layer = this._layers[zlevel];\n            if (layer.__builtin__\n                && layer !== this._hoverlayer\n                && (layer.__dirty || paintAll)) {\n                layerList.push(layer);\n            }\n        }\n        var finished = true;\n        var needsRefreshHover = false;\n        var _loop_1 = function (k) {\n            var layer = layerList[k];\n            var ctx = layer.ctx;\n            var repaintRects = useDirtyRect\n                && layer.createRepaintRects(list, prevList, this_1._width, this_1._height);\n            var start = paintAll ? layer.__startIndex : layer.__drawIndex;\n            var useTimer = !paintAll && layer.incremental && Date.now;\n            var startTime = useTimer && Date.now();\n            var clearColor = layer.zlevel === this_1._zlevelList[0]\n                ? this_1._backgroundColor : null;\n            if (layer.__startIndex === layer.__endIndex) {\n                layer.clear(false, clearColor, repaintRects);\n            }\n            else if (start === layer.__startIndex) {\n                var firstEl = list[start];\n                if (!firstEl.incremental || !firstEl.notClear || paintAll) {\n                    layer.clear(false, clearColor, repaintRects);\n                }\n            }\n            if (start === -1) {\n                console.error('For some unknown reason. drawIndex is -1');\n                start = layer.__startIndex;\n            }\n            var i;\n            var repaint = function (repaintRect) {\n                var scope = {\n                    inHover: false,\n                    allClipped: false,\n                    prevEl: null,\n                    viewWidth: _this._width,\n                    viewHeight: _this._height\n                };\n                for (i = start; i < layer.__endIndex; i++) {\n                    var el = list[i];\n                    if (el.__inHover) {\n                        needsRefreshHover = true;\n                    }\n                    _this._doPaintEl(el, layer, useDirtyRect, repaintRect, scope, i === layer.__endIndex - 1);\n                    if (useTimer) {\n                        var dTime = Date.now() - startTime;\n                        if (dTime > 15) {\n                            break;\n                        }\n                    }\n                }\n                if (scope.prevElClipPaths) {\n                    ctx.restore();\n                }\n            };\n            if (repaintRects) {\n                if (repaintRects.length === 0) {\n                    i = layer.__endIndex;\n                }\n                else {\n                    var dpr = this_1.dpr;\n                    for (var r = 0; r < repaintRects.length; ++r) {\n                        var rect = repaintRects[r];\n                        ctx.save();\n                        ctx.beginPath();\n                        ctx.rect(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\n                        ctx.clip();\n                        repaint(rect);\n                        ctx.restore();\n                    }\n                }\n            }\n            else {\n                ctx.save();\n                repaint();\n                ctx.restore();\n            }\n            layer.__drawIndex = i;\n            if (layer.__drawIndex < layer.__endIndex) {\n                finished = false;\n            }\n        };\n        var this_1 = this;\n        for (var k = 0; k < layerList.length; k++) {\n            _loop_1(k);\n        }\n        if (env.wxa) {\n            util.each(this._layers, function (layer) {\n                if (layer && layer.ctx && layer.ctx.draw) {\n                    layer.ctx.draw();\n                }\n            });\n        }\n        return {\n            finished: finished,\n            needsRefreshHover: needsRefreshHover\n        };\n    };\n    CanvasPainter.prototype._doPaintEl = function (el, currentLayer, useDirtyRect, repaintRect, scope, isLast) {\n        var ctx = currentLayer.ctx;\n        if (useDirtyRect) {\n            var paintRect = el.getPaintRect();\n            if (!repaintRect || paintRect && paintRect.intersect(repaintRect)) {\n                brush(ctx, el, scope, isLast);\n                el.setPrevPaintRect(paintRect);\n            }\n        }\n        else {\n            brush(ctx, el, scope, isLast);\n        }\n    };\n    CanvasPainter.prototype.getLayer = function (zlevel, virtual) {\n        if (this._singleCanvas && !this._needsManuallyCompositing) {\n            zlevel = CANVAS_ZLEVEL;\n        }\n        var layer = this._layers[zlevel];\n        if (!layer) {\n            layer = new Layer('zr_' + zlevel, this, this.dpr);\n            layer.zlevel = zlevel;\n            layer.__builtin__ = true;\n            if (this._layerConfig[zlevel]) {\n                util.merge(layer, this._layerConfig[zlevel], true);\n            }\n            else if (this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC]) {\n                util.merge(layer, this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC], true);\n            }\n            if (virtual) {\n                layer.virtual = virtual;\n            }\n            this.insertLayer(zlevel, layer);\n            layer.initContext();\n        }\n        return layer;\n    };\n    CanvasPainter.prototype.insertLayer = function (zlevel, layer) {\n        var layersMap = this._layers;\n        var zlevelList = this._zlevelList;\n        var len = zlevelList.length;\n        var domRoot = this._domRoot;\n        var prevLayer = null;\n        var i = -1;\n        if (layersMap[zlevel]) {\n            if (process.env.NODE_ENV !== 'production') {\n                util.logError('ZLevel ' + zlevel + ' has been used already');\n            }\n            return;\n        }\n        if (!isLayerValid(layer)) {\n            if (process.env.NODE_ENV !== 'production') {\n                util.logError('Layer of zlevel ' + zlevel + ' is not valid');\n            }\n            return;\n        }\n        if (len > 0 && zlevel > zlevelList[0]) {\n            for (i = 0; i < len - 1; i++) {\n                if (zlevelList[i] < zlevel\n                    && zlevelList[i + 1] > zlevel) {\n                    break;\n                }\n            }\n            prevLayer = layersMap[zlevelList[i]];\n        }\n        zlevelList.splice(i + 1, 0, zlevel);\n        layersMap[zlevel] = layer;\n        if (!layer.virtual) {\n            if (prevLayer) {\n                var prevDom = prevLayer.dom;\n                if (prevDom.nextSibling) {\n                    domRoot.insertBefore(layer.dom, prevDom.nextSibling);\n                }\n                else {\n                    domRoot.appendChild(layer.dom);\n                }\n            }\n            else {\n                if (domRoot.firstChild) {\n                    domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                }\n                else {\n                    domRoot.appendChild(layer.dom);\n                }\n            }\n        }\n        layer.__painter = this;\n    };\n    CanvasPainter.prototype.eachLayer = function (cb, context) {\n        var zlevelList = this._zlevelList;\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            cb.call(context, this._layers[z], z);\n        }\n    };\n    CanvasPainter.prototype.eachBuiltinLayer = function (cb, context) {\n        var zlevelList = this._zlevelList;\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            var layer = this._layers[z];\n            if (layer.__builtin__) {\n                cb.call(context, layer, z);\n            }\n        }\n    };\n    CanvasPainter.prototype.eachOtherLayer = function (cb, context) {\n        var zlevelList = this._zlevelList;\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            var layer = this._layers[z];\n            if (!layer.__builtin__) {\n                cb.call(context, layer, z);\n            }\n        }\n    };\n    CanvasPainter.prototype.getLayers = function () {\n        return this._layers;\n    };\n    CanvasPainter.prototype._updateLayerStatus = function (list) {\n        this.eachBuiltinLayer(function (layer, z) {\n            layer.__dirty = layer.__used = false;\n        });\n        function updatePrevLayer(idx) {\n            if (prevLayer) {\n                if (prevLayer.__endIndex !== idx) {\n                    prevLayer.__dirty = true;\n                }\n                prevLayer.__endIndex = idx;\n            }\n        }\n        if (this._singleCanvas) {\n            for (var i_1 = 1; i_1 < list.length; i_1++) {\n                var el = list[i_1];\n                if (el.zlevel !== list[i_1 - 1].zlevel || el.incremental) {\n                    this._needsManuallyCompositing = true;\n                    break;\n                }\n            }\n        }\n        var prevLayer = null;\n        var incrementalLayerCount = 0;\n        var prevZlevel;\n        var i;\n        for (i = 0; i < list.length; i++) {\n            var el = list[i];\n            var zlevel = el.zlevel;\n            var layer = void 0;\n            if (prevZlevel !== zlevel) {\n                prevZlevel = zlevel;\n                incrementalLayerCount = 0;\n            }\n            if (el.incremental) {\n                layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);\n                layer.incremental = true;\n                incrementalLayerCount = 1;\n            }\n            else {\n                layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);\n            }\n            if (!layer.__builtin__) {\n                util.logError('ZLevel ' + zlevel + ' has been used by unkown layer ' + layer.id);\n            }\n            if (layer !== prevLayer) {\n                layer.__used = true;\n                if (layer.__startIndex !== i) {\n                    layer.__dirty = true;\n                }\n                layer.__startIndex = i;\n                if (!layer.incremental) {\n                    layer.__drawIndex = i;\n                }\n                else {\n                    layer.__drawIndex = -1;\n                }\n                updatePrevLayer(i);\n                prevLayer = layer;\n            }\n            if ((el.__dirty & REDRAW_BIT) && !el.__inHover) {\n                layer.__dirty = true;\n                if (layer.incremental && layer.__drawIndex < 0) {\n                    layer.__drawIndex = i;\n                }\n            }\n        }\n        updatePrevLayer(i);\n        this.eachBuiltinLayer(function (layer, z) {\n            if (!layer.__used && layer.getElementCount() > 0) {\n                layer.__dirty = true;\n                layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;\n            }\n            if (layer.__dirty && layer.__drawIndex < 0) {\n                layer.__drawIndex = layer.__startIndex;\n            }\n        });\n    };\n    CanvasPainter.prototype.clear = function () {\n        this.eachBuiltinLayer(this._clearLayer);\n        return this;\n    };\n    CanvasPainter.prototype._clearLayer = function (layer) {\n        layer.clear();\n    };\n    CanvasPainter.prototype.setBackgroundColor = function (backgroundColor) {\n        this._backgroundColor = backgroundColor;\n        util.each(this._layers, function (layer) {\n            layer.setUnpainted();\n        });\n    };\n    CanvasPainter.prototype.configLayer = function (zlevel, config) {\n        if (config) {\n            var layerConfig = this._layerConfig;\n            if (!layerConfig[zlevel]) {\n                layerConfig[zlevel] = config;\n            }\n            else {\n                util.merge(layerConfig[zlevel], config, true);\n            }\n            for (var i = 0; i < this._zlevelList.length; i++) {\n                var _zlevel = this._zlevelList[i];\n                if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {\n                    var layer = this._layers[_zlevel];\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        }\n    };\n    CanvasPainter.prototype.delLayer = function (zlevel) {\n        var layers = this._layers;\n        var zlevelList = this._zlevelList;\n        var layer = layers[zlevel];\n        if (!layer) {\n            return;\n        }\n        layer.dom.parentNode.removeChild(layer.dom);\n        delete layers[zlevel];\n        zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n    };\n    CanvasPainter.prototype.resize = function (width, height) {\n        if (!this._domRoot.style) {\n            if (width == null || height == null) {\n                return;\n            }\n            this._width = width;\n            this._height = height;\n            this.getLayer(CANVAS_ZLEVEL).resize(width, height);\n        }\n        else {\n            var domRoot = this._domRoot;\n            domRoot.style.display = 'none';\n            var opts = this._opts;\n            var root = this.root;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n            width = getSize(root, 0, opts);\n            height = getSize(root, 1, opts);\n            domRoot.style.display = '';\n            if (this._width !== width || height !== this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                this.refresh(true);\n            }\n            this._width = width;\n            this._height = height;\n        }\n        return this;\n    };\n    CanvasPainter.prototype.clearLayer = function (zlevel) {\n        var layer = this._layers[zlevel];\n        if (layer) {\n            layer.clear();\n        }\n    };\n    CanvasPainter.prototype.dispose = function () {\n        this.root.innerHTML = '';\n        this.root =\n            this.storage =\n                this._domRoot =\n                    this._layers = null;\n    };\n    CanvasPainter.prototype.getRenderedCanvas = function (opts) {\n        opts = opts || {};\n        if (this._singleCanvas && !this._compositeManually) {\n            return this._layers[CANVAS_ZLEVEL].dom;\n        }\n        var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n        imageLayer.initContext();\n        imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);\n        var ctx = imageLayer.ctx;\n        if (opts.pixelRatio <= this.dpr) {\n            this.refresh();\n            var width_1 = imageLayer.dom.width;\n            var height_1 = imageLayer.dom.height;\n            this.eachLayer(function (layer) {\n                if (layer.__builtin__) {\n                    ctx.drawImage(layer.dom, 0, 0, width_1, height_1);\n                }\n                else if (layer.renderToCanvas) {\n                    ctx.save();\n                    layer.renderToCanvas(ctx);\n                    ctx.restore();\n                }\n            });\n        }\n        else {\n            var scope = {\n                inHover: false,\n                viewWidth: this._width,\n                viewHeight: this._height\n            };\n            var displayList = this.storage.getDisplayList(true);\n            for (var i = 0, len = displayList.length; i < len; i++) {\n                var el = displayList[i];\n                brush(ctx, el, scope, i === len - 1);\n            }\n        }\n        return imageLayer.dom;\n    };\n    CanvasPainter.prototype.getWidth = function () {\n        return this._width;\n    };\n    CanvasPainter.prototype.getHeight = function () {\n        return this._height;\n    };\n    return CanvasPainter;\n}());\nexport default CanvasPainter;\n;\n", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport CanvasPainter from 'zrender/lib/canvas/Painter.js';\nexport function install(registers) {\n  registers.registerPainter('canvas', CanvasPainter);\n}", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { __extends } from \"tslib\";\n/**\r\n * This module is imported by echarts directly.\r\n *\r\n * Notice:\r\n * Always keep this file exists for backward compatibility.\r\n * Because before 4.1.0, dataset is an optional component,\r\n * some users may import this module manually.\r\n */\n\nimport ComponentModel from '../../model/Component.js';\nimport ComponentView from '../../view/Component.js';\nimport { SERIES_LAYOUT_BY_COLUMN } from '../../util/types.js';\nimport { disableTransformOptionMerge, SourceManager } from '../../data/helper/sourceManager.js';\n\nvar DatasetModel =\n/** @class */\nfunction (_super) {\n  __extends(DatasetModel, _super);\n\n  function DatasetModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'dataset';\n    return _this;\n  }\n\n  DatasetModel.prototype.init = function (option, parentModel, ecModel) {\n    _super.prototype.init.call(this, option, parentModel, ecModel);\n\n    this._sourceManager = new SourceManager(this);\n    disableTransformOptionMerge(this);\n  };\n\n  DatasetModel.prototype.mergeOption = function (newOption, ecModel) {\n    _super.prototype.mergeOption.call(this, newOption, ecModel);\n\n    disableTransformOptionMerge(this);\n  };\n\n  DatasetModel.prototype.optionUpdated = function () {\n    this._sourceManager.dirty();\n  };\n\n  DatasetModel.prototype.getSourceManager = function () {\n    return this._sourceManager;\n  };\n\n  DatasetModel.type = 'dataset';\n  DatasetModel.defaultOption = {\n    seriesLayoutBy: SERIES_LAYOUT_BY_COLUMN\n  };\n  return DatasetModel;\n}(ComponentModel);\n\nexport { DatasetModel };\n\nvar DatasetView =\n/** @class */\nfunction (_super) {\n  __extends(DatasetView, _super);\n\n  function DatasetView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'dataset';\n    return _this;\n  }\n\n  DatasetView.type = 'dataset';\n  return DatasetView;\n}(ComponentView);\n\nexport function install(registers) {\n  registers.registerComponentModel(DatasetModel);\n  registers.registerComponentView(DatasetView);\n}"],
  "mappings": "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",
  "names": ["init_tslib_es6", "__extends", "Layer", "i", "width", "height", "CanvasPainter", "k", "layer", "install", "init_Component", "DatasetModel", "DatasetView", "Component_default"]
}
