{
  "version": 3,
  "sources": ["../../echarts-stat/dist/ecStat.js", "../../echarts-stat/index.js"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"ecStat\"] = factory();\r\n\telse\r\n\t\troot[\"ecStat\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId])\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\texports: {},\r\n/******/ \t\t\tid: moduleId,\r\n/******/ \t\t\tloaded: false\r\n/******/ \t\t};\r\n\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.loaded = true;\r\n\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n\r\n\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(0);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    return {\r\n\r\n\t        clustering: __webpack_require__(1),\r\n\t        regression: __webpack_require__(5),\r\n\t        statistics: __webpack_require__(6),\r\n\t        histogram: __webpack_require__(15),\r\n\r\n\t        transform: {\r\n\t            regression: __webpack_require__(18),\r\n\t            histogram: __webpack_require__(21),\r\n\t            clustering: __webpack_require__(22)\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var dataPreprocess = dataProcess.dataPreprocess;\r\n\t    var normalizeDimensions = dataProcess.normalizeDimensions;\r\n\t    var arrayUtil = __webpack_require__(3);\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var arraySize = arrayUtil.size;\r\n\t    var sumOfColumn = arrayUtil.sumOfColumn;\r\n\t    var arraySum = arrayUtil.sum;\r\n\t    var zeros = arrayUtil.zeros;\r\n\t    // var isArray = arrayUtil.isArray;\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var isNumber = numberUtil.isNumber;\r\n\t    var mathPow = Math.pow;\r\n\r\n\t    var OutputType = {\r\n\t        /**\r\n\t         * Data are all in one. Cluster info are added as an attribute of data.\r\n\t         * ```ts\r\n\t         * type OutputDataSingle = {\r\n\t         *     // Each index of `data` is the index of the input data.\r\n\t         *     data: OutputDataItem[];\r\n\t         *     // The index of `centroids` is the cluster index.\r\n\t         *     centroids: [ValueOnX, ValueOnY][];\r\n\t         * };\r\n\t         * type InputDataItem = (ValueOnX | ValueOnY | OtherValue)[];\r\n\t         * type OutputDataItem = (...InputDataItem | ClusterIndex | SquareDistanceToCentroid)[];\r\n\t         * ```\r\n\t         */\r\n\t        SINGLE: 'single',\r\n\t        /**\r\n\t         * Data are separated by cluster. Suitable for retrieving data form each cluster.\r\n\t         * ```ts\r\n\t         * type OutputDataMultiple = {\r\n\t         *     // Each index of `clusterAssment` is the index of the input data.\r\n\t         *     clusterAssment: [ClusterIndex, SquareDistanceToCentroid][];\r\n\t         *     // The index of `centroids` is the cluster index.\r\n\t         *     centroids: [ValueOnX, ValueOnY][];\r\n\t         *     // The index of `pointsInCluster` is the cluster index.\r\n\t         *     pointsInCluster: DataItemListInOneCluster[];\r\n\t         * }\r\n\t         * type DataItemListInOneCluster = InputDataItem[];\r\n\t         * type InputDataItem = (ValueOnX | ValueOnY | OtherValue)[];\r\n\t         * type SquareDistanceToCentroid = number;\r\n\t         * type ClusterIndex = number;\r\n\t         * type ValueOnX = number;\r\n\t         * type ValueOnY = number;\r\n\t         * type OtherValue = unknown;\r\n\t         * ```\r\n\t         */\r\n\t        MULTIPLE: 'multiple'\r\n\t    }\r\n\r\n\t    /**\r\n\t     * KMeans of clustering algorithm.\r\n\t     * @param {Array.<Array.<number>>} data two-dimension array\r\n\t     * @param {number} k the number of clusters in a dataset\r\n\t     * @return {Object}\r\n\t     */\r\n\t    function kMeans(data, k, dataMeta) {\r\n\r\n\t        // create array to assign data points to centroids, also holds SE of each point\r\n\t        var clusterAssigned = zeros(data.length, 2);\r\n\t        var centroids = createRandCent(k, calcExtents(data, dataMeta.dimensions));\r\n\t        var clusterChanged = true;\r\n\t        var minDist;\r\n\t        var minIndex;\r\n\t        var distIJ;\r\n\t        var ptsInClust;\r\n\r\n\t        while (clusterChanged) {\r\n\t            clusterChanged = false;\r\n\t            for (var i = 0; i < data.length; i++) {\r\n\t                minDist = Infinity;\r\n\t                minIndex = -1;\r\n\t                for (var j = 0; j < k; j++) {\r\n\t                    distIJ = distEuclid(data[i], centroids[j], dataMeta);\r\n\t                    if (distIJ < minDist) {\r\n\t                        minDist = distIJ;\r\n\t                        minIndex = j;\r\n\t                    }\r\n\t                }\r\n\t                if (clusterAssigned[i][0] !== minIndex) {\r\n\t                    clusterChanged = true;\r\n\t                }\r\n\t                clusterAssigned[i][0] = minIndex;\r\n\t                clusterAssigned[i][1] = minDist;\r\n\t            }\r\n\t            //recalculate centroids\r\n\t            for (var i = 0; i < k; i++) {\r\n\t                ptsInClust = [];\r\n\t                for (var j = 0; j < clusterAssigned.length; j++) {\r\n\t                    if (clusterAssigned[j][0] === i) {\r\n\t                        ptsInClust.push(data[j]);\r\n\t                    }\r\n\t                }\r\n\t                centroids[i] = meanInColumns(ptsInClust, dataMeta);\r\n\t            }\r\n\t        }\r\n\r\n\t        var clusterWithKmeans = {\r\n\t            centroids: centroids,\r\n\t            clusterAssigned: clusterAssigned\r\n\t        };\r\n\t        return clusterWithKmeans;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Calculate the average of each column in a two-dimensional array\r\n\t     * and returns the values as an array.\r\n\t     */\r\n\t    function meanInColumns(dataList, dataMeta) {\r\n\t        var meanArray = [];\r\n\t        var sum;\r\n\t        var mean;\r\n\t        for (var j = 0; j < dataMeta.dimensions.length; j++) {\r\n\t            var dimIdx = dataMeta.dimensions[j];\r\n\t            sum = 0;\r\n\t            for (var i = 0; i < dataList.length; i++) {\r\n\t                sum += dataList[i][dimIdx];\r\n\t            }\r\n\t            mean = sum / dataList.length;\r\n\t            meanArray.push(mean);\r\n\t        }\r\n\t        return meanArray;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * The combine of hierarchical clustering and k-means.\r\n\t     * @param {Array} data two-dimension array.\r\n\t     * @param {Object|number} [clusterCountOrConfig] config or clusterCountOrConfig.\r\n\t     * @param {number} clusterCountOrConfig.clusterCount Mandatory.\r\n\t     *        The number of clusters in a dataset. It has to be greater than 1.\r\n\t     * @param {boolean} [clusterCountOrConfig.stepByStep=false] Optional.\r\n\t     * @param {OutputType} [clusterCountOrConfig.outputType='multiple'] Optional.\r\n\t     *        See `OutputType`.\r\n\t     * @param {number} [clusterCountOrConfig.outputClusterIndexDimension] Mandatory.\r\n\t     *        Only work in `OutputType.SINGLE`.\r\n\t     * @param {number} [clusterCountOrConfig.outputCentroidDimensions] Optional.\r\n\t     *        If specified, the centroid will be set to those dimensions of the result data one by one.\r\n\t     *        By default not set centroid to result.\r\n\t     *        Only work in `OutputType.SINGLE`.\r\n\t     * @param {Array.<number>} [clusterCountOrConfig.dimensions] Optional.\r\n\t     *        Target dimensions to calculate the regression.\r\n\t     *        By default: use all of the data.\r\n\t     * @return {Array} See `OutputType`.\r\n\t     */\r\n\t    function hierarchicalKMeans(data, clusterCountOrConfig, stepByStep) {\r\n\t        var config = (\r\n\t            isNumber(clusterCountOrConfig)\r\n\t                ? {clusterCount: clusterCountOrConfig, stepByStep: stepByStep}\r\n\t                : clusterCountOrConfig\r\n\t        ) || {clusterCount: 2};\r\n\r\n\t        var k = config.clusterCount;\r\n\r\n\t        if (k < 2) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var dataMeta = parseDataMeta(data, config);\r\n\t        var isOutputTypeSingle = dataMeta.outputType === OutputType.SINGLE;\r\n\r\n\t        var dataSet = dataPreprocess(data, {dimensions: dataMeta.dimensions});\r\n\r\n\t        var clusterAssment = zeros(dataSet.length, 2);\r\n\t        var outputSingleData;\r\n\t        var setClusterIndex;\r\n\t        var getClusterIndex;\r\n\r\n\t        function setDistance(dataIndex, dist) {\r\n\t            clusterAssment[dataIndex][1] = dist;\r\n\t        }\r\n\t        function getDistance(dataIndex) {\r\n\t            return clusterAssment[dataIndex][1];\r\n\t        };\r\n\r\n\t        if (isOutputTypeSingle) {\r\n\t            outputSingleData = [];\r\n\t            var outputClusterIndexDimension = dataMeta.outputClusterIndexDimension;\r\n\r\n\t            setClusterIndex = function (dataIndex, clusterIndex) {\r\n\t                outputSingleData[dataIndex][outputClusterIndexDimension] = clusterIndex;\r\n\t            };\r\n\t            getClusterIndex = function (dataIndex) {\r\n\t                return outputSingleData[dataIndex][outputClusterIndexDimension];\r\n\t            };\r\n\r\n\t            for (var i = 0; i < dataSet.length; i++) {\r\n\t                outputSingleData.push(dataSet[i].slice());\r\n\t                setDistance(i, 0);\r\n\t                setClusterIndex(i, 0);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            setClusterIndex = function (dataIndex, clusterIndex) {\r\n\t                clusterAssment[dataIndex][0] = clusterIndex;\r\n\t            };\r\n\t            getClusterIndex = function (dataIndex) {\r\n\t                return clusterAssment[dataIndex][0];\r\n\t            };\r\n\t        }\r\n\r\n\t        // initial center point.\r\n\t        var centroid0 = meanInColumns(dataSet, dataMeta);\r\n\t        var centList = [centroid0];\r\n\t        for (var i = 0; i < dataSet.length; i++) {\r\n\t            var dist = distEuclid(dataSet[i], centroid0, dataMeta);\r\n\t            setDistance(i, dist);\r\n\t        }\r\n\r\n\t        var lowestSSE;\r\n\t        var ptsInClust;\r\n\t        var ptsNotClust;\r\n\t        var clusterInfo;\r\n\t        var sseSplit;\r\n\t        var sseNotSplit;\r\n\t        var index = 1;\r\n\t        var result = {\r\n\t            data: outputSingleData,\r\n\t            centroids: centList,\r\n\t            isEnd: false\r\n\t        };\r\n\t        if (!isOutputTypeSingle) {\r\n\t            // Only for backward compat.\r\n\t            result.clusterAssment = clusterAssment;\r\n\t        }\r\n\r\n\t        function oneStep() {\r\n\t            //the existing clusters are continuously divided\r\n\t            //until the number of clusters is k\r\n\t            if (index < k) {\r\n\t                lowestSSE = Infinity;\r\n\t                var centSplit;\r\n\t                var newCentroid;\r\n\t                var newClusterAss;\r\n\r\n\t                for (var j = 0; j < centList.length; j++) {\r\n\t                    ptsInClust = [];\r\n\t                    ptsNotClust = [];\r\n\t                    for (var i = 0; i < dataSet.length; i++) {\r\n\t                        if (getClusterIndex(i) === j) {\r\n\t                            ptsInClust.push(dataSet[i]);\r\n\t                        }\r\n\t                        else {\r\n\t                            ptsNotClust.push(getDistance(i));\r\n\t                        }\r\n\t                    }\r\n\t                    clusterInfo = kMeans(ptsInClust, 2, dataMeta);\r\n\t                    sseSplit = sumOfColumn(clusterInfo.clusterAssigned, 1);\r\n\t                    sseNotSplit = arraySum(ptsNotClust);\r\n\t                    if (sseSplit + sseNotSplit < lowestSSE) {\r\n\t                        lowestSSE = sseNotSplit + sseSplit;\r\n\t                        centSplit = j;\r\n\t                        newCentroid = clusterInfo.centroids;\r\n\t                        newClusterAss = clusterInfo.clusterAssigned;\r\n\t                    }\r\n\t                }\r\n\r\n\t                for (var i = 0; i < newClusterAss.length; i++) {\r\n\t                    if (newClusterAss[i][0] === 0) {\r\n\t                        newClusterAss[i][0] = centSplit;\r\n\t                    }\r\n\t                    else if (newClusterAss[i][0] === 1) {\r\n\t                        newClusterAss[i][0] = centList.length;\r\n\t                    }\r\n\t                }\r\n\r\n\t                centList[centSplit] = newCentroid[0];\r\n\t                centList.push(newCentroid[1]);\r\n\t                for (var i = 0, j = 0; i < dataSet.length && j < newClusterAss.length; i++) {\r\n\t                    if (getClusterIndex(i) === centSplit) {\r\n\t                        setClusterIndex(i, newClusterAss[j][0]);\r\n\t                        setDistance(i, newClusterAss[j++][1]);\r\n\t                    }\r\n\t                }\r\n\r\n\t                var pointInClust = [];\r\n\t                if (!isOutputTypeSingle) {\r\n\t                    for (var i = 0; i < centList.length; i++) {\r\n\t                        pointInClust[i] = [];\r\n\t                        for (var j = 0; j < dataSet.length; j++) {\r\n\t                            if (getClusterIndex(j) === i) {\r\n\t                                pointInClust[i].push(dataSet[j]);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                    result.pointsInCluster = pointInClust;\r\n\t                }\r\n\r\n\t                index++;\r\n\t            }\r\n\t            else {\r\n\t                result.isEnd = true;\r\n\t            }\r\n\t        }\r\n\r\n\t        if (!config.stepByStep) {\r\n\t            while (oneStep(), !result.isEnd);\r\n\t        }\r\n\t        else {\r\n\t            result.next = function () {\r\n\t                oneStep();\r\n\t                setCentroidToResultData(result, dataMeta);\r\n\t                return result;\r\n\t            };\r\n\t        }\r\n\t        setCentroidToResultData(result, dataMeta);\r\n\t        return result;\r\n\t    }\r\n\r\n\t    function setCentroidToResultData(result, dataMeta) {\r\n\t        var outputCentroidDimensions = dataMeta.outputCentroidDimensions;\r\n\t        if (dataMeta.outputType !== OutputType.SINGLE || outputCentroidDimensions == null) {\r\n\t            return;\r\n\t        }\r\n\t        var outputSingleData = result.data;\r\n\t        var centroids = result.centroids;\r\n\r\n\t        for (var i = 0; i < outputSingleData.length; i++) {\r\n\t            var line = outputSingleData[i];\r\n\t            var clusterIndex = line[dataMeta.outputClusterIndexDimension];\r\n\t            var centroid = centroids[clusterIndex];\r\n\t            var dimLen = Math.min(centroid.length, outputCentroidDimensions.length);\r\n\t            for (var j = 0; j < dimLen; j++) {\r\n\t                line[outputCentroidDimensions[j]] = centroid[j];\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Create random centroid of kmeans.\r\n\t     */\r\n\t    function createRandCent(k, extents) {\r\n\t        //constructs a two-dimensional array with all values 0\r\n\t        var centroids = zeros(k, extents.length);\r\n\t        //create random cluster centers, within bounds of each dimension\r\n\t        for (var j = 0; j < extents.length; j++) {\r\n\t            var extentItem = extents[j];\r\n\t            for (var i = 0; i < k; i++) {\r\n\t                centroids[i][j] = extentItem.min + extentItem.span * Math.random();\r\n\t            }\r\n\t        }\r\n\t        return centroids;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Distance method for calculating similarity\r\n\t     */\r\n\t    function distEuclid(dataItem, centroid, dataMeta) {\r\n\t        // The distance should be normalized between different dimensions,\r\n\t        // otherwise they may provide different weight in the final distance.\r\n\t        // The greater weight offers more effect in the cluster determination.\r\n\r\n\t        var powerSum = 0;\r\n\t        var dimensions = dataMeta.dimensions;\r\n\t        var extents = dataMeta.rawExtents;\r\n\t        //subtract the corresponding elements in the vectors\r\n\t        for (var i = 0; i < dimensions.length; i++) {\r\n\t            var span = extents[i].span;\r\n\t            // If span is 0, do not count.\r\n\t            if (span) {\r\n\t                var dimIdx = dimensions[i];\r\n\t                var dist = (dataItem[dimIdx] - centroid[i]) / span;\r\n\t                powerSum += mathPow(dist, 2);\r\n\t            }\r\n\t        }\r\n\r\n\t        return powerSum;\r\n\t    }\r\n\r\n\t    function parseDataMeta(dataSet, config) {\r\n\t        var size = arraySize(dataSet);\r\n\t        if (size.length < 1) {\r\n\t            throw new Error('The input data of clustering should be two-dimension array.');\r\n\t        }\r\n\t        var colCount = size[1];\r\n\t        var defaultDimensions = [];\r\n\t        for (var i = 0; i < colCount; i++) {\r\n\t            defaultDimensions.push(i);\r\n\t        }\r\n\t        var dimensions = normalizeDimensions(config.dimensions, defaultDimensions);\r\n\t        var outputType = config.outputType || OutputType.MULTIPLE;\r\n\r\n\t        var outputClusterIndexDimension = config.outputClusterIndexDimension;\r\n\t        if (outputType === OutputType.SINGLE && !numberUtil.isNumber(outputClusterIndexDimension)) {\r\n\t            throw new Error('outputClusterIndexDimension is required as a number.');\r\n\t        }\r\n\t        var extents = calcExtents(dataSet, dimensions);\r\n\r\n\t        return {\r\n\t            dimensions: dimensions,\r\n\t            rawExtents: extents,\r\n\t            outputType: outputType,\r\n\t            outputClusterIndexDimension: outputClusterIndexDimension,\r\n\t            outputCentroidDimensions: config.outputCentroidDimensions,\r\n\t        };\r\n\t    }\r\n\r\n\t    function calcExtents(dataSet, dimensions) {\r\n\t        var extents = [];\r\n\t        var dimLen = dimensions.length;\r\n\t        for (var i = 0; i < dimLen; i++) {\r\n\t            extents.push({ min: Infinity, max: -Infinity });\r\n\t        }\r\n\t        for (var i = 0; i < dataSet.length; i++) {\r\n\t            var line = dataSet[i];\r\n\t            for (var j = 0; j < dimLen; j++) {\r\n\t                var extentItem = extents[j];\r\n\t                var val = line[dimensions[j]];\r\n\t                extentItem.min > val && (extentItem.min = val);\r\n\t                extentItem.max < val && (extentItem.max = val);\r\n\t            }\r\n\t        }\r\n\t        for (var i = 0; i < dimLen; i++) {\r\n\t            extents[i].span = extents[i].max - extents[i].min;\r\n\t        }\r\n\t        return extents;\r\n\t    }\r\n\r\n\t    return {\r\n\t        OutputType: OutputType,\r\n\t        hierarchicalKMeans: hierarchicalKMeans\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var array = __webpack_require__(3);\r\n\t    var isArray = array.isArray;\r\n\t    var size = array.size;\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * @param  {Array.<number>|number} dimensions like `[2, 4]` or `4`\r\n\t     * @param  {Array.<number>} [defaultDimensions=undefined] By default `undefined`.\r\n\t     * @return {Array.<number>} number like `4` is normalized to `[4]`,\r\n\t     *         `null`/`undefined` is normalized to `defaultDimensions`.\r\n\t     */\r\n\t    function normalizeDimensions(dimensions, defaultDimensions) {\r\n\t        return typeof dimensions === 'number'\r\n\t            ? [dimensions]\r\n\t            : dimensions == null\r\n\t            ? defaultDimensions\r\n\t            : dimensions;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Data preprocessing, filter the wrong data object.\r\n\t     *  for example [12,] --- missing y value\r\n\t     *              [,12] --- missing x value\r\n\t     *              [12, b] --- incorrect y value\r\n\t     *              ['a', 12] --- incorrect x value\r\n\t     * @param  {Array.<Array>} data\r\n\t     * @param  {Object?} [opt]\r\n\t     * @param  {Array.<number>} [opt.dimensions] Optional. Like [2, 4],\r\n\t     *         means that dimension index 2 and dimension index 4 need to be number.\r\n\t     *         If null/undefined (by default), all dimensions need to be number.\r\n\t     * @param  {boolean} [opt.toOneDimensionArray] Convert to one dimension array.\r\n\t     *         Each value is from `opt.dimensions[0]` or dimension 0.\r\n\t     * @return {Array.<Array.<number>>}\r\n\t     */\r\n\t    function dataPreprocess(data, opt) {\r\n\t        opt = opt || {};\r\n\t        var dimensions = opt.dimensions;\r\n\t        var numberDimensionMap = {};\r\n\t        if (dimensions != null) {\r\n\t            for (var i = 0; i < dimensions.length; i++) {\r\n\t                numberDimensionMap[dimensions[i]] = true;\r\n\t            }\r\n\t        }\r\n\t        var targetOneDim = opt.toOneDimensionArray\r\n\t            ? (dimensions ? dimensions[0] : 0)\r\n\t            : null;\r\n\r\n\t        function shouldBeNumberDimension(dimIdx) {\r\n\t            return !dimensions || numberDimensionMap.hasOwnProperty(dimIdx);\r\n\t        }\r\n\r\n\t        if (!isArray(data)) {\r\n\t            throw new Error('Invalid data type, you should input an array');\r\n\t        }\r\n\t        var predata = [];\r\n\t        var arraySize = size(data);\r\n\r\n\t        if (arraySize.length === 1) {\r\n\t            for (var i = 0; i < arraySize[0]; i++) {\r\n\t                var item = data[i];\r\n\t                if (isNumber(item)) {\r\n\t                    predata.push(item);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else if (arraySize.length === 2) {\r\n\t            for (var i = 0; i < arraySize[0]; i++) {\r\n\t                var isCorrect = true;\r\n\t                var item = data[i];\r\n\t                for (var j = 0; j < arraySize[1]; j++) {\r\n\t                    if (shouldBeNumberDimension(j) && !isNumber(item[j])) {\r\n\t                        isCorrect = false;\r\n\t                    }\r\n\t                }\r\n\t                if (isCorrect) {\r\n\t                    predata.push(\r\n\t                        targetOneDim != null\r\n\t                            ? item[targetOneDim]\r\n\t                            : item\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return predata;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string|number} val\r\n\t     * @return {number}\r\n\t     */\r\n\t    function getPrecision(val) {\r\n\t        var str = val.toString();\r\n\t        // scientific notation is not considered\r\n\t        var dotIndex = str.indexOf('.');\r\n\t        return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\r\n\t    }\r\n\r\n\t    return {\r\n\t        normalizeDimensions: normalizeDimensions,\r\n\t        dataPreprocess: dataPreprocess,\r\n\t        getPrecision: getPrecision\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var objToString = Object.prototype.toString;\r\n\t    var arrayProto = Array.prototype;\r\n\t    var nativeMap = arrayProto.map;\r\n\r\n\t    /**\r\n\t     * Get the size of a array\r\n\t     * @param  {Array} data\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function size(data) {\r\n\t        var s = [];\r\n\t        while (isArray(data)) {\r\n\t            s.push(data.length);\r\n\t            data = data[0];\r\n\t        }\r\n\t        return s;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {*}  value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isArray(value) {\r\n\t        return objToString.call(value) === '[object Array]';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * constructs a (m x n) array with all values 0\r\n\t     * @param  {number} m  the row\r\n\t     * @param  {number} n  the column\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function zeros(m, n) {\r\n\t        var zeroArray = [];\r\n\t        for (var i = 0; i < m ; i++) {\r\n\t            zeroArray[i] = [];\r\n\t            for (var j = 0; j < n; j++) {\r\n\t                zeroArray[i][j] = 0;\r\n\t            }\r\n\t        }\r\n\t        return zeroArray;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Sums each element in the array.\r\n\t     * Internal use, for performance considerations, to avoid\r\n\t     * unnecessary judgments and calculations.\r\n\t     * @param  {Array} vector\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sum(vector) {\r\n\t        var sum = 0;\r\n\t        for (var i = 0; i < vector.length; i++) {\r\n\t            sum += vector[i];\r\n\t        }\r\n\t        return sum;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Computes the sum of the specified column elements in a two-dimensional array\r\n\t     * @param  {Array.<Array>} dataList  two-dimensional array\r\n\t     * @param  {number} n  the specified column, zero-based\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sumOfColumn(dataList, n) {\r\n\t        var sum = 0;\r\n\t        for (var i = 0; i < dataList.length; i++) {\r\n\t            sum += dataList[i][n];\r\n\t        }\r\n\t        return sum;\r\n\t    }\r\n\r\n\r\n\t    function ascending(a, b) {\r\n\r\n\t        return a > b ? 1 : a < b ? -1 : a === b ? 0 : NaN;\r\n\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Binary search algorithm --- this bisector is specidfied to histogram, which every bin like that [a, b),\r\n\t     * so the return value use to add 1.\r\n\t     * @param  {Array.<number>} array\r\n\t     * @param  {number} value\r\n\t     * @param  {number} start\r\n\t     * @param  {number} end\r\n\t     * @return {number}\r\n\t     */\r\n\t    function bisect(array, value, start, end) { //移出去\r\n\r\n\t        if (start == null) {\r\n\t            start = 0;\r\n\t        }\r\n\t        if (end == null) {\r\n\t            end = array.length;\r\n\t        }\r\n\t        while (start < end) {\r\n\t            var mid = Math.floor((start + end) / 2);\r\n\t            var compare = ascending(array[mid], value);\r\n\t            if (compare > 0) {\r\n\t                end = mid;\r\n\t            }\r\n\t            else if (compare < 0) {\r\n\t                start = mid + 1;\r\n\t            }\r\n\t            else {\r\n\t                return mid + 1;\r\n\t            }\r\n\t        }\r\n\t        return start;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * 数组映射\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Array} obj\r\n\t     * @param {Function} cb\r\n\t     * @param {*} [context]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function map(obj, cb, context) {\r\n\t        if (!(obj && cb)) {\r\n\t            return;\r\n\t        }\r\n\t        if (obj.map && obj.map === nativeMap) {\r\n\t            return obj.map(cb, context);\r\n\t        }\r\n\t        else {\r\n\t            var result = [];\r\n\t            for (var i = 0, len = obj.length; i < len; i++) {\r\n\t                result.push(cb.call(context, obj[i], i, obj));\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    return {\r\n\t        size: size,\r\n\t        isArray: isArray,\r\n\t        zeros: zeros,\r\n\t        sum: sum,\r\n\t        sumOfColumn: sumOfColumn,\r\n\t        ascending: ascending,\r\n\t        bisect: bisect,\r\n\t        map: map\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    /**\r\n\t     * Test whether value is a number.\r\n\t     * @param  {*}  value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isNumber(value) {\r\n\r\n\t        value = value === null ? NaN : +value;\r\n\t        return typeof value === 'number' && !isNaN(value);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Test if a number is integer.\r\n\t     * @param  {number}  value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isInteger(value) {\r\n\t        return isFinite(value) && value === Math.round(value);\r\n\t    }\r\n\r\n\t    function quantityExponent(val) {\r\n\t        if (val === 0) {\r\n\t            return 0;\r\n\t        }\r\n\t        var exp = Math.floor(Math.log(val) / Math.LN10);\r\n\t        // Fix pricision loss.\r\n\t        if (val / Math.pow(10, exp) >= 10) {\r\n\t            exp++;\r\n\t        }\r\n\t        return exp;\r\n\t    }\r\n\r\n\t    return {\r\n\t        isNumber: isNumber,\r\n\t        isInteger: isInteger,\r\n\t        quantityExponent: quantityExponent\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var dataPreprocess = dataProcess.dataPreprocess;\r\n\t    var normalizeDimensions = dataProcess.normalizeDimensions;\r\n\r\n\t    var regreMethods = {\r\n\r\n\t        /**\r\n\t         * Common linear regression algorithm\r\n\t         */\r\n\t        linear: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumX = 0;\r\n\t            var sumY = 0;\r\n\t            var sumXY = 0;\r\n\t            var sumXX = 0;\r\n\t            var len = predata.length;\r\n\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumX += rawItem[xDimIdx];\r\n\t                sumY += rawItem[yDimIdx];\r\n\t                sumXY += rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t                sumXX += rawItem[xDimIdx] * rawItem[xDimIdx];\r\n\t            }\r\n\r\n\t            var gradient = ((len * sumXY) - (sumX * sumY)) / ((len * sumXX) - (sumX * sumX));\r\n\t            var intercept = (sumY / len) - ((gradient * sumX) / len);\r\n\r\n\t            var result = [];\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = gradient * rawItem[xDimIdx] + intercept;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ' + Math.round(gradient * 100) / 100 + 'x + ' + Math.round(intercept * 100) / 100;\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    gradient: gradient,\r\n\t                    intercept: intercept\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If the raw data include [0,0] point, we should choose linearThroughOrigin\r\n\t         *   instead of linear.\r\n\t         */\r\n\t        linearThroughOrigin: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumXX = 0;\r\n\t            var sumXY = 0;\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumXX += rawItem[xDimIdx] * rawItem[xDimIdx];\r\n\t                sumXY += rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t            }\r\n\r\n\t            var gradient = sumXY / sumXX;\r\n\t            var result = [];\r\n\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = rawItem[xDimIdx] * gradient;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ' + Math.round(gradient * 100) / 100 + 'x';\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    gradient: gradient\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Exponential regression\r\n\t         */\r\n\t        exponential: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumX = 0;\r\n\t            var sumY = 0;\r\n\t            var sumXXY = 0;\r\n\t            var sumYlny = 0;\r\n\t            var sumXYlny = 0;\r\n\t            var sumXY = 0;\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumX += rawItem[xDimIdx];\r\n\t                sumY += rawItem[yDimIdx];\r\n\t                sumXY += rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t                sumXXY += rawItem[xDimIdx] * rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t                sumYlny += rawItem[yDimIdx] * Math.log(rawItem[yDimIdx]);\r\n\t                sumXYlny += rawItem[xDimIdx] * rawItem[yDimIdx] * Math.log(rawItem[yDimIdx]);\r\n\t            }\r\n\r\n\t            var denominator = (sumY * sumXXY) - (sumXY * sumXY);\r\n\t            var coefficient = Math.pow(Math.E, (sumXXY * sumYlny - sumXY * sumXYlny) / denominator);\r\n\t            var index = (sumY * sumXYlny - sumXY * sumYlny) / denominator;\r\n\t            var result = [];\r\n\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = coefficient * Math.pow(Math.E, index * rawItem[xDimIdx]);\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ' + Math.round(coefficient * 100) / 100 + 'e^(' + Math.round(index * 100) / 100 + 'x)';\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    coefficient: coefficient,\r\n\t                    index: index\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Logarithmic regression\r\n\t         */\r\n\t        logarithmic: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumlnx = 0;\r\n\t            var sumYlnx = 0;\r\n\t            var sumY = 0;\r\n\t            var sumlnxlnx = 0;\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumlnx += Math.log(rawItem[xDimIdx]);\r\n\t                sumYlnx += rawItem[yDimIdx] * Math.log(rawItem[xDimIdx]);\r\n\t                sumY += rawItem[yDimIdx];\r\n\t                sumlnxlnx += Math.pow(Math.log(rawItem[xDimIdx]), 2);\r\n\t            }\r\n\r\n\t            var gradient = (i * sumYlnx - sumY * sumlnx) / (i * sumlnxlnx - sumlnx * sumlnx);\r\n\t            var intercept = (sumY - gradient * sumlnx) / i;\r\n\t            var result = [];\r\n\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = gradient * Math.log(rawItem[xDimIdx]) + intercept;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression =\r\n\t                'y = '\r\n\t                + Math.round(intercept * 100) / 100\r\n\t                + ' + '\r\n\t                + Math.round(gradient * 100) / 100 + 'ln(x)';\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    gradient: gradient,\r\n\t                    intercept: intercept\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Polynomial regression\r\n\t         */\r\n\t        polynomial: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var order = opt.order;\r\n\r\n\t            if (order == null) {\r\n\t                order = 2;\r\n\t            }\r\n\t            //coefficient matrix\r\n\t            var coeMatrix = [];\r\n\t            var lhs = [];\r\n\t            var k = order + 1;\r\n\r\n\t            for (var i = 0; i < k; i++) {\r\n\t                var sumA = 0;\r\n\t                for (var n = 0; n < predata.length; n++) {\r\n\t                    var rawItem = predata[n];\r\n\t                    sumA += rawItem[yDimIdx] * Math.pow(rawItem[xDimIdx], i);\r\n\t                }\r\n\t                lhs.push(sumA);\r\n\r\n\t                var temp = [];\r\n\t                for (var j = 0; j < k; j++) {\r\n\t                    var sumB = 0;\r\n\t                    for (var m = 0; m < predata.length; m++) {\r\n\t                        sumB += Math.pow(predata[m][xDimIdx], i + j);\r\n\t                    }\r\n\t                    temp.push(sumB);\r\n\t                }\r\n\t                coeMatrix.push(temp);\r\n\t            }\r\n\t            coeMatrix.push(lhs);\r\n\r\n\t            var coeArray = gaussianElimination(coeMatrix, k);\r\n\r\n\t            var result = [];\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var value = 0;\r\n\t                var rawItem = predata[i];\r\n\t                for (var n = 0; n < coeArray.length; n++) {\r\n\t                    value += coeArray[n] * Math.pow(rawItem[xDimIdx], n);\r\n\t                }\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = value;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ';\r\n\t            for (var i = coeArray.length - 1; i >= 0; i--) {\r\n\t                if (i > 1) {\r\n\t                    expression += Math.round(coeArray[i] * Math.pow(10, i + 1)) / Math.pow(10, i + 1) + 'x^' + i + ' + ';\r\n\t                }\r\n\t                else if (i === 1) {\r\n\t                    expression += Math.round(coeArray[i] * 100) / 100 + 'x' + ' + ';\r\n\t                }\r\n\t                else {\r\n\t                    expression += Math.round(coeArray[i] * 100) / 100;\r\n\t                }\r\n\t            }\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: coeArray,\r\n\t                expression: expression\r\n\t            };\r\n\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Gaussian elimination\r\n\t     * @param  {Array.<Array.<number>>} matrix   two-dimensional number array\r\n\t     * @param  {number} number\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function gaussianElimination(matrix, number) {\r\n\r\n\t        for (var i = 0; i < matrix.length - 1; i++) {\r\n\t            var maxColumn = i;\r\n\t            for (var j = i + 1; j < matrix.length - 1; j++) {\r\n\t                if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxColumn])) {\r\n\t                    maxColumn = j;\r\n\t                }\r\n\t            }\r\n\t            // the matrix here is the transpose of the common Augmented matrix.\r\n\t            //  so the can perform the primary column transform, in fact, equivalent\r\n\t            //  to the primary line changes\r\n\t            for (var k = i; k < matrix.length; k++) {\r\n\t                var temp = matrix[k][i];\r\n\t                matrix[k][i] = matrix[k][maxColumn];\r\n\t                matrix[k][maxColumn] = temp;\r\n\t            }\r\n\t            for (var n = i + 1; n < matrix.length - 1; n++) {\r\n\t                for (var m = matrix.length - 1; m >= i; m--) {\r\n\t                    matrix[m][n] -= matrix[m][i] / matrix[i][i] * matrix[i][n];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        var data = new Array(number);\r\n\t        var len = matrix.length - 1;\r\n\t        for (var j = matrix.length - 2; j >= 0; j--) {\r\n\t            var temp = 0;\r\n\t            for (var i = j + 1; i < matrix.length - 1; i++) {\r\n\t                temp += matrix[i][j] * data[i];\r\n\t            }\r\n\t            data[j] = (matrix[len][j] - temp) / matrix[j][j];\r\n\r\n\t        }\r\n\r\n\t        return data;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param  {string} regreMethod\r\n\t     * @param  {Array.<Array.<number>>} data   two-dimensional number array\r\n\t     * @param  {Object|number} [optOrOrder]  opt or order\r\n\t     * @param  {number} [optOrOrder.order]  order of polynomials\r\n\t     * @param  {Array.<number>|number} [optOrOrder.dimensions=[0, 1]]  Target dimensions to calculate the regression.\r\n\t     *         By defualt: use [0, 1] as [x, y].\r\n\t     * @return {Array}\r\n\t     */\r\n\t    var regression = function (regreMethod, data, optOrOrder) {\r\n\t        var opt = typeof optOrOrder === 'number'\r\n\t            ? { order: optOrOrder }\r\n\t            : (optOrOrder || {});\r\n\r\n\t        var dimensions = normalizeDimensions(opt.dimensions, [0, 1]);\r\n\r\n\t        var predata = dataPreprocess(data, { dimensions: dimensions });\r\n\t        var result = regreMethods[regreMethod](predata, {\r\n\t            order: opt.order,\r\n\t            dimensions: dimensions\r\n\t        });\r\n\r\n\t        // Sort for line chart.\r\n\t        var xDimIdx = dimensions[0];\r\n\t        result.points.sort(function (itemA, itemB) {\r\n\t            return itemA[xDimIdx] - itemB[xDimIdx];\r\n\t        });\r\n\r\n\t        return result;\r\n\t    };\r\n\r\n\t    return regression;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var statistics = {};\r\n\r\n\t    statistics.max = __webpack_require__(7);\r\n\t    statistics.deviation = __webpack_require__(8);\r\n\t    statistics.mean = __webpack_require__(10);\r\n\t    statistics.median = __webpack_require__(12);\r\n\t    statistics.min = __webpack_require__(14);\r\n\t    statistics.quantile = __webpack_require__(13);\r\n\t    statistics.sampleVariance = __webpack_require__(9);\r\n\t    statistics.sum = __webpack_require__(11);\r\n\r\n\t    return statistics;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * Is a method for computing the max value of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function max(data) {\r\n\r\n\t        var maxData = -Infinity;\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            if (isNumber(data[i]) && data[i] > maxData) {\r\n\t                maxData = data[i];\r\n\t            }\r\n\t        }\r\n\t        return maxData;\r\n\t    }\r\n\r\n\t    return max;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var variance = __webpack_require__(9);\r\n\r\n\t    /**\r\n\t     * Computing the deviation\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    return function (data) {\r\n\r\n\t        var squaredDeviation = variance(data);\r\n\r\n\t        return squaredDeviation ? Math.sqrt(squaredDeviation) : squaredDeviation;\r\n\t    };\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\t    var mean = __webpack_require__(10);\r\n\r\n\t    /**\r\n\t     * Computing the variance of list of sample\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sampleVariance(data) {\r\n\r\n\t        var len = data.length;\r\n\t        if (!len || len < 2) {\r\n\t            return 0;\r\n\t        }\r\n\t        if (data.length >= 2) {\r\n\r\n\t            var meanValue = mean(data);\r\n\t            var sum = 0;\r\n\t            var temple;\r\n\r\n\t            for (var i = 0; i < data.length; i++) {\r\n\t                if (isNumber(data[i])) {\r\n\t                    temple = data[i] - meanValue;\r\n\t                    sum += temple * temple;\r\n\t                }\r\n\t            }\r\n\t            return sum / (data.length - 1);\r\n\t        }\r\n\t    }\r\n\r\n\t    return sampleVariance;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var sum = __webpack_require__(11);\r\n\r\n\t    /**\r\n\t     * Is a method for computing the mean value of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function mean(data) {\r\n\r\n\t        var len = data.length;\r\n\r\n\t        if (!len) {\r\n\t            return 0;\r\n\t        }\r\n\r\n\t        return sum(data) / data.length;\r\n\r\n\t    }\r\n\r\n\t    return mean;\r\n\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * Is a method for computing the sum of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sum(data) {\r\n\r\n\t        var len = data.length;\r\n\r\n\t        if (!len) {\r\n\t            return 0;\r\n\t        }\r\n\t        var sumData = 0;\r\n\t        for (var i = 0; i < len; i++) {\r\n\t            if (isNumber(data[i])) {\r\n\t                sumData += data[i];\r\n\t            }\r\n\t        }\r\n\t        return sumData;\r\n\t    }\r\n\r\n\t    return sum;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var quantile = __webpack_require__(13);\r\n\r\n\t    /**\r\n\t     * Is a method for computing the median value of a sorted array of numbers\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function median(data) {\r\n\r\n\t        return quantile(data, 0.5);\r\n\t    }\r\n\r\n\t    return median;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    /**\r\n\t     * Estimating quantiles from a sorted sample of numbers\r\n\t     * @see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\r\n\t     * R-7 method\r\n\t     * @param  {Array.<number>} data  sorted array\r\n\t     * @param  {number} p\r\n\t     */\r\n\t    return function (data, p) {\r\n\r\n\t        var len = data.length;\r\n\r\n\t        if (!len) {\r\n\t            return 0;\r\n\t        }\r\n\t        if (p <= 0 || len < 2) {\r\n\t            return data[0];\r\n\t        }\r\n\t        if (p >= 1) {\r\n\t            return data[len -1];\r\n\t        }\r\n\t        // in the wikipedia's R-7 method h = (N - 1)p + 1, but here array index start from 0\r\n\t        var h = (len - 1) * p;\r\n\t        var i = Math.floor(h);\r\n\t        var a = data[i];\r\n\t        var b = data[i + 1];\r\n\t        return a + (b - a) * (h - i);\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * Is a method for computing the min value of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function min(data) {\r\n\r\n\t        var minData = Infinity;\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            if (isNumber(data[i]) && data[i] < minData) {\r\n\t                minData = data[i];\r\n\t            }\r\n\t        }\r\n\t        return minData;\r\n\t    }\r\n\r\n\t    return min;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var max = __webpack_require__(7);\r\n\t    var min = __webpack_require__(14);\r\n\t    var quantile = __webpack_require__(13);\r\n\t    var deviation = __webpack_require__(8);\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var dataPreprocess = dataProcess.dataPreprocess;\r\n\t    var normalizeDimensions = dataProcess.normalizeDimensions;\r\n\t    var array = __webpack_require__(3);\r\n\t    var ascending = array.ascending;\r\n\t    var map = array.map;\r\n\t    var range = __webpack_require__(16);\r\n\t    var bisect = array.bisect;\r\n\t    var tickStep = __webpack_require__(17);\r\n\r\n\t    /**\r\n\t     * Compute bins for histogram\r\n\t     * @param  {Array.<number>} data\r\n\t     * @param  {Object|string} optOrMethod Optional settings or `method`.\r\n\t     * @param  {Object|string} optOrMethod.method 'squareRoot' | 'scott' | 'freedmanDiaconis' | 'sturges'\r\n\t     * @param  {Array.<number>|number} optOrMethod.dimensions If data is a 2-d array,\r\n\t     *         which dimension will be used to calculate histogram.\r\n\t     * @return {Object}\r\n\t     */\r\n\t    function computeBins(data, optOrMethod) {\r\n\t        var opt = typeof optOrMethod === 'string'\r\n\t            ? { method: optOrMethod }\r\n\t            : (optOrMethod || {});\r\n\r\n\t        var threshold = opt.method == null\r\n\t            ? thresholdMethod.squareRoot\r\n\t            : thresholdMethod[opt.method];\r\n\t        var dimensions = normalizeDimensions(opt.dimensions);\r\n\r\n\t        var values = dataPreprocess(data, {\r\n\t            dimensions: dimensions,\r\n\t            toOneDimensionArray: true\r\n\t        });\r\n\t        var maxValue = max(values);\r\n\t        var minValue = min(values);\r\n\t        var binsNumber = threshold(values, minValue, maxValue);\r\n\t        var tickStepResult = tickStep(minValue, maxValue, binsNumber);\r\n\t        var step = tickStepResult.step;\r\n\t        var toFixedPrecision = tickStepResult.toFixedPrecision;\r\n\r\n\t        // return the xAxis coordinate for each bins, except the end point of the value\r\n\t        var rangeArray = range(\r\n\t            // use function toFixed() to avoid data like '0.700000001'\r\n\t            +((Math.ceil(minValue / step) * step).toFixed(toFixedPrecision)),\r\n\t            +((Math.floor(maxValue / step) * step).toFixed(toFixedPrecision)),\r\n\t            step,\r\n\t            toFixedPrecision\r\n\t        );\r\n\r\n\t        var len = rangeArray.length;\r\n\r\n\t        var bins = new Array(len + 1);\r\n\r\n\t        for (var i = 0; i <= len; i++) {\r\n\t            bins[i] = {};\r\n\t            bins[i].sample = [];\r\n\t            bins[i].x0 = i > 0\r\n\t                ? rangeArray[i - 1]\r\n\t                : (rangeArray[i] - minValue) === step\r\n\t                ? minValue\r\n\t                : (rangeArray[i] - step);\r\n\t            bins[i].x1 = i < len\r\n\t                ? rangeArray[i]\r\n\t                : (maxValue - rangeArray[i-1]) === step\r\n\t                ? maxValue\r\n\t                : rangeArray[i - 1] + step;\r\n\t        }\r\n\r\n\t        for (var i = 0; i < values.length; i++) {\r\n\t            if (minValue <= values[i] && values[i] <= maxValue) {\r\n\t                bins[bisect(rangeArray, values[i], 0, len)].sample.push(values[i]);\r\n\t            }\r\n\t        }\r\n\r\n\t        var data = map(bins, function (bin) {\r\n\t            // use function toFixed() to avoid data like '6.5666638489'\r\n\t            return [\r\n\t                +((bin.x0 + bin.x1) / 2).toFixed(toFixedPrecision),\r\n\t                bin.sample.length,\r\n\t                bin.x0,\r\n\t                bin.x1,\r\n\t                bin.x0 + ' - ' + bin.x1\r\n\t            ];\r\n\t        });\r\n\r\n\t        var customData = map(bins, function (bin) {\r\n\t            return [bin.x0, bin.x1, bin.sample.length];\r\n\t        });\r\n\r\n\t        return {\r\n\t            bins: bins,\r\n\t            data: data,\r\n\t            customData: customData\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Four kinds of threshold methods used to\r\n\t     * compute how much bins the histogram should be divided\r\n\t     * @see  https://en.wikipedia.org/wiki/Histogram\r\n\t     * @type {Object}\r\n\t     */\r\n\t    var thresholdMethod = {\r\n\r\n\t        squareRoot: function (data) {\r\n\r\n\t            var bins = Math.ceil(Math.sqrt(data.length));\r\n\r\n\t            return bins > 50 ? 50 : bins;\r\n\t        },\r\n\r\n\t        scott: function (data, min, max) {\r\n\r\n\t            return Math.ceil((max - min) / (3.5 * deviation(data) * Math.pow(data.length, -1 / 3)));\r\n\t        },\r\n\r\n\t        freedmanDiaconis: function (data, min, max) {\r\n\r\n\t            data.sort(ascending);\r\n\r\n\t            return Math.ceil(\r\n\t                (max - min) / (2 * (quantile(data, 0.75) - quantile(data, 0.25)) * Math.pow(data.length, -1 / 3))\r\n\t            );\r\n\t        },\r\n\r\n\t        sturges: function (data) {\r\n\r\n\t            return Math.ceil(Math.log(data.length) / Math.LN2) + 1;\r\n\r\n\t        }\r\n\t    };\r\n\r\n\t    return computeBins;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var getPrecision = dataProcess.getPrecision;\r\n\r\n\t    /**\r\n\t     * Computing range array.\r\n\t     * Adding param precision to fix range value, avoiding range[i] = 0.7000000001.\r\n\t     * @param  {number} start\r\n\t     * @param  {number} end\r\n\t     * @param  {number} step\r\n\t     * @param  {number} precision\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    return function (start, end, step, precision) {\r\n\r\n\t        var len = arguments.length;\r\n\r\n\t        if (len < 2) {\r\n\t            end = start;\r\n\t            start = 0;\r\n\t            step = 1;\r\n\t        }\r\n\t        else if (len < 3) {\r\n\t            step = 1;\r\n\t        }\r\n\t        else if (len < 4) {\r\n\t            step = +step;\r\n\t            precision = getPrecision(step);\r\n\t        }\r\n\t        else {\r\n\t            precision = +precision;\r\n\t        }\r\n\r\n\t        var n = Math.ceil(((end - start) / step).toFixed(precision));\r\n\t        var range = new Array(n + 1);\r\n\t        for (var i = 0; i < n + 1; i++) {\r\n\t            range[i] = +(start + i * step).toFixed(precision);\r\n\t        }\r\n\t        return range;\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var numberUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * Computing the length of step\r\n\t     * @see  https://github.com/d3/d3-array/blob/master/src/ticks.js\r\n\t     * @param {number} start\r\n\t     * @param {number} stop\r\n\t     * @param {number} count\r\n\t     */\r\n\t    return function (start, stop, count) {\r\n\r\n\t        var step0 = Math.abs(stop - start) / count;\r\n\t        var precision = numberUtil.quantityExponent(step0);\r\n\r\n\t        var step1 = Math.pow(10, precision);\r\n\t        var error = step0 / step1;\r\n\r\n\t        if (error >= Math.sqrt(50)) {\r\n\t            step1 *= 10;\r\n\t        }\r\n\t        else if (error >= Math.sqrt(10)) {\r\n\t            step1 *= 5;\r\n\t        }\r\n\t        else if(error >= Math.sqrt(2)) {\r\n\t            step1 *= 2;\r\n\t        }\r\n\r\n\t        var toFixedPrecision = precision < 0 ? -precision : 0;\r\n\t        var resultStep = +(\r\n\t            (stop >= start ? step1 : -step1).toFixed(toFixedPrecision)\r\n\t        );\r\n\r\n\t        return {\r\n\t            step: resultStep,\r\n\t            toFixedPrecision: toFixedPrecision\r\n\t        };\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var regression = __webpack_require__(5);\r\n\t    var transformHelper = __webpack_require__(19);\r\n\t    var FORMULA_DIMENSION = 2;\r\n\r\n\t    return {\r\n\r\n\t        type: 'ecStat:regression',\r\n\r\n\t        /**\r\n\t         * @param {Paramter<typeof regression>[0]} [params.config.method='linear'] 'linear' by default\r\n\t         * @param {Paramter<typeof regression>[2]} [params.config.order=2] Only work when method is `polynomial`.\r\n\t         * @param {DimensionLoose[]|DimensionLoose} [params.config.dimensions=[0, 1]] dimensions that used to calculate regression.\r\n\t         *        By default [0, 1].\r\n\t         * @param {'start' | 'end' | 'all'} params.config.formulaOn Include formula on the last (third) dimension of the:\r\n\t         *        'start': first data item.\r\n\t         *        'end': last data item (by default).\r\n\t         *        'all': all data items.\r\n\t         *        'none': no data item.\r\n\t         */\r\n\t        transform: function transform(params) {\r\n\t            var upstream = params.upstream;\r\n\t            var config = params.config || {};\r\n\t            var method = config.method || 'linear';\r\n\r\n\t            var result = regression(method, upstream.cloneRawData(), {\r\n\t                order: config.order,\r\n\t                dimensions: transformHelper.normalizeExistingDimensions(params, config.dimensions)\r\n\t            });\r\n\t            var points = result.points;\r\n\r\n\t            var formulaOn = config.formulaOn;\r\n\t            if (formulaOn == null) {\r\n\t                formulaOn = 'end';\r\n\t            }\r\n\r\n\t            var dimensions;\r\n\t            if (formulaOn !== 'none') {\r\n\t                for (var i = 0; i < points.length; i++) {\r\n\t                    points[i][FORMULA_DIMENSION] =\r\n\t                    (\r\n\t                        (formulaOn === 'start' && i === 0)\r\n\t                        || (formulaOn === 'all')\r\n\t                        || (formulaOn === 'end' && i === points.length - 1)\r\n\t                    ) ? result.expression : '';\r\n\t                }\r\n\t                dimensions = upstream.cloneAllDimensionInfo();\r\n\t                dimensions[FORMULA_DIMENSION] = {};\r\n\t            }\r\n\r\n\t            return [{\r\n\t                dimensions: dimensions,\r\n\t                data: points\r\n\t            }];\r\n\t        }\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var arrayUtil = __webpack_require__(3);\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var objectUtil = __webpack_require__(20);\r\n\r\n\t    /**\r\n\t     * type DimensionLoose = DimensionIndex | DimensionName;\r\n\t     * type DimensionIndex = number;\r\n\t     * type DimensionName = string;\r\n\t     *\r\n\t     * @param {object} transformParams The parameter of echarts transfrom.\r\n\t     * @param {DimensionLoose | DimensionLoose[]} dimensionsConfig\r\n\t     * @return {DimensionIndex | DimensionIndex[]}\r\n\t     */\r\n\t    function normalizeExistingDimensions(transformParams, dimensionsConfig) {\r\n\t        if (dimensionsConfig == null) {\r\n\t            return;\r\n\t        }\r\n\t        var upstream = transformParams.upstream;\r\n\r\n\t        if (arrayUtil.isArray(dimensionsConfig)) {\r\n\t            var result = [];\r\n\t            for (var i = 0; i < dimensionsConfig.length; i++) {\r\n\t                var dimInfo = upstream.getDimensionInfo(dimensionsConfig[i]);\r\n\t                validateDimensionExists(dimInfo, dimensionsConfig[i]);\r\n\t                result[i] = dimInfo.index;\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t        else {\r\n\t            var dimInfo = upstream.getDimensionInfo(dimensionsConfig);\r\n\t            validateDimensionExists(dimInfo, dimensionsConfig);\r\n\t            return dimInfo.index;\r\n\t        }\r\n\r\n\t        function validateDimensionExists(dimInfo, dimConfig) {\r\n\t            if (!dimInfo) {\r\n\t                throw new Error('Can not find dimension by ' + dimConfig);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {object} transformParams The parameter of echarts transfrom.\r\n\t     * @param {(DimensionIndex | {name: DimensionName, index: DimensionIndex})[]} dimensionsConfig\r\n\t     * @param {{name: DimensionName | DimensionName[], index: DimensionIndex | DimensionIndex[]}}\r\n\t     */\r\n\t    function normalizeNewDimensions(dimensionsConfig) {\r\n\t        if (arrayUtil.isArray(dimensionsConfig)) {\r\n\t            var names = [];\r\n\t            var indices = [];\r\n\t            for (var i = 0; i < dimensionsConfig.length; i++) {\r\n\t                var item = parseDimensionNewItem(dimensionsConfig[i]);\r\n\t                names.push(item.name);\r\n\t                indices.push(item.index);\r\n\t            }\r\n\t            return {name: names, index: indices};\r\n\t        }\r\n\t        else if (dimensionsConfig != null) {\r\n\t            return parseDimensionNewItem(dimensionsConfig);\r\n\t        }\r\n\r\n\t        function parseDimensionNewItem(dimConfig) {\r\n\t            if (numberUtil.isNumber(dimConfig)) {\r\n\t                return { index: dimConfig };\r\n\t            }\r\n\t            else if (objectUtil.isObject(dimConfig) && numberUtil.isNumber(dimConfig.index)) {\r\n\t                return dimConfig;\r\n\t            }\r\n\t            throw new Error('Illegle new dimensions config. Expect `{ name: string, index: number }`.');\r\n\t        }\r\n\t    }\r\n\r\n\t    return {\r\n\t        normalizeExistingDimensions: normalizeExistingDimensions,\r\n\t        normalizeNewDimensions: normalizeNewDimensions\r\n\t    };\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    function extend(target, source) {\r\n\t        if (Object.assign) {\r\n\t            Object.assign(target, source);\r\n\t        }\r\n\t        else {\r\n\t            for (var key in source) {\r\n\t                if (source.hasOwnProperty(key)) {\r\n\t                    target[key] = source[key];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return target;\r\n\t    }\r\n\r\n\t    function isObject(value) {\r\n\t        const type = typeof value;\r\n\t        return type === 'function' || (!!value && type === 'object');\r\n\t    }\r\n\r\n\t    return {\r\n\t        extend: extend,\r\n\t        isObject: isObject\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var histogram = __webpack_require__(15);\r\n\t    var transformHelper = __webpack_require__(19);\r\n\r\n\t    return {\r\n\r\n\t        type: 'ecStat:histogram',\r\n\r\n\t        /**\r\n\t         * @param {'squareRoot' | 'scott' | 'freedmanDiaconis' | 'sturges'} [params.config.method='squareRoot']\r\n\t         * @param {DimnensionLoose[]} [params.config.dimensions=[0, 1]] dimensions that used to calculate histogram.\r\n\t         *        By default [0].\r\n\t         */\r\n\t        transform: function transform(params) {\r\n\t            var upstream = params.upstream;\r\n\t            var config = params.config || {};\r\n\r\n\t            var result = histogram(upstream.cloneRawData(), {\r\n\t                method: config.method,\r\n\t                dimensions: transformHelper.normalizeExistingDimensions(params, config.dimensions)\r\n\t            });\r\n\r\n\t            return [{\r\n\t                dimensions: ['MeanOfV0V1', 'VCount', 'V0', 'V1', 'DisplayableName'],\r\n\t                data: result.data\r\n\t            }, {\r\n\t                data: result.customData\r\n\t            }];\r\n\t        }\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var clustering = __webpack_require__(1);\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var transformHelper = __webpack_require__(19);\r\n\r\n\t    var isNumber = numberUtil.isNumber;\r\n\r\n\t    return {\r\n\r\n\t        type: 'ecStat:clustering',\r\n\r\n\t        /**\r\n\t         * @param {number} params.config.clusterCount Mandatory.\r\n\t         *        The number of clusters in a dataset. It has to be greater than 1.\r\n\t         * @param {(DimensionName | DimensionIndex)[]} [params.config.dimensions] Optional.\r\n\t         *        Target dimensions to calculate the regression.\r\n\t         *        By default: use all of the data.\r\n\t         * @param {(DimensionIndex | {name?: DimensionName, index: DimensionIndex})} [params.config.outputClusterIndexDimension] Mandatory.\r\n\t         * @param {(DimensionIndex | {name?: DimensionName, index: DimensionIndex})[]} [params.config.outputCentroidDimensions] Optional.\r\n\t         *        If specified, the centroid will be set to those dimensions of the result data one by one.\r\n\t         *        By default not set centroid to result.\r\n\t         */\r\n\t        transform: function transform(params) {\r\n\t            var upstream = params.upstream;\r\n\t            var config = params.config || {};\r\n\t            var clusterCount = config.clusterCount;\r\n\r\n\t            if (!isNumber(clusterCount) || clusterCount <= 0) {\r\n\t                throw new Error('config param \"clusterCount\" need to be specified as an interger greater than 1.');\r\n\t            }\r\n\r\n\t            if (clusterCount === 1) {\r\n\t                return [{\r\n\t                }, {\r\n\t                    data: []\r\n\t                }];\r\n\t            }\r\n\r\n\t            var outputClusterIndexDimension = transformHelper.normalizeNewDimensions(\r\n\t                config.outputClusterIndexDimension\r\n\t            );\r\n\t            var outputCentroidDimensions = transformHelper.normalizeNewDimensions(\r\n\t                config.outputCentroidDimensions\r\n\t            );\r\n\r\n\t            if (outputClusterIndexDimension == null) {\r\n\t                throw new Error('outputClusterIndexDimension is required as a number.');\r\n\t            }\r\n\r\n\t            var result = clustering.hierarchicalKMeans(upstream.cloneRawData(), {\r\n\t                clusterCount: clusterCount,\r\n\t                stepByStep: false,\r\n\t                dimensions: transformHelper.normalizeExistingDimensions(params, config.dimensions),\r\n\t                outputType: clustering.OutputType.SINGLE,\r\n\t                outputClusterIndexDimension: outputClusterIndexDimension.index,\r\n\t                outputCentroidDimensions: (outputCentroidDimensions || {}).index\r\n\t            });\r\n\r\n\t            var sourceDimAll = upstream.cloneAllDimensionInfo();\r\n\t            var resultDimsDef = [];\r\n\t            for (var i = 0; i < sourceDimAll.length; i++) {\r\n\t                var sourceDimItem = sourceDimAll[i];\r\n\t                resultDimsDef.push(sourceDimItem.name);\r\n\t            }\r\n\r\n\t            // Always set to dims def even if name not exists, because the resultDimsDef.length\r\n\t            // need to be enlarged to tell echarts that there is \"cluster index dimension\" and \"dist dimension\".\r\n\t            resultDimsDef[outputClusterIndexDimension.index] = outputClusterIndexDimension.name;\r\n\r\n\t            if (outputCentroidDimensions) {\r\n\t                for (var i = 0; i < outputCentroidDimensions.index.length; i++) {\r\n\t                    if (outputCentroidDimensions.name[i] != null) {\r\n\t                        resultDimsDef[outputCentroidDimensions.index[i]] = outputCentroidDimensions.name[i];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            return [{\r\n\t                dimensions: resultDimsDef,\r\n\t                data: result.data\r\n\t            }, {\r\n\t                data: result.centroids\r\n\t            }];\r\n\t        }\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ })\r\n/******/ ])\r\n});\r\n;", "module.exports = require('./dist/ecStat.js');\r\n"],
  "mappings": "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",
  "names": ["module", "exports", "require", "dist", "i", "sum", "min", "max", "dimInfo"]
}
